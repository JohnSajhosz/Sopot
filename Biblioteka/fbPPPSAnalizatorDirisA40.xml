<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2019-10-29T12:22:40.6637861" />
  <contentHeader name="CoDeSys External Library Template" version="3.5.5.30" modificationDateTime="2019-10-24T14:40:07.960949" organization="3S - Smart Software Solutions GmbH" author="3S - Smart Software Solutions GmbH">
    <Comment>Library project template with all possible element types, docu and a sample project structure</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="Company" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="DefaultNamespace" type="string">TMP</property>
          <property name="Description" type="string">Library project template with all possible element types, docu and a sample project structure</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">SOLWENA_Biblioteka - MASTER</property>
          <property name="Title" type="string">CoDeSys External Library Template</property>
          <property name="Version" type="version">3.5.5.30</property>
          <property name="library-category-list" type="library-category-list">Intern|CAA|Guidelines</property>
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="fbPPPSAnalizatorDirisA40" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="rDeadband">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Napięcia fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wNapiecieL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNapiecieL1Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyNapiecieL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyNapiecieL1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyNapiecieL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNapiecieL2Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyNapiecieL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyNapiecieL2Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyNapiecieL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNapiecieL3Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyNapiecieL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyNapiecieL3Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyNapiecieL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL1L2Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Napięcia przewodowe</xhtml>
              </documentation>
            </variable>
            <variable name="wNapiecieL1L2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL1L2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL1L2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL1L2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wNapiecieL2L3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL2L3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL2L3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL2L3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL2L3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wNapiecieL3L1Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL3L1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL3L1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL3L1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL3L1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wCzestotliwoscHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Częstotliwość</xhtml>
              </documentation>
            </variable>
            <variable name="wCzestotliwoscLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rCzestotliwosc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbCzestotliwosc">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rCzestotliwoscZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wCzasPracyAnalizatoraHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Czas pracy</xhtml>
              </documentation>
            </variable>
            <variable name="wCzasPracyAnalizatoraLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rCzasPracyAnalizatora">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbCzasPracyAnalizatora">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rCzasPracyAnalizatoraZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Prądy fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wPradL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradL1Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyPradL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyPradL1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPradL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wPradL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradL2Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyPradL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyPradL2Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPradL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wPradL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradL3Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyPradL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyPradL3Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPradL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wPradNHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradNLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradN">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradNZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradSredniL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Prądy średnie fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wPradSredniL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradSredniL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradSredniL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradSredniL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradSredniL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradSredniL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradSredniL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradSredniL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradSredniL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradSredniL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradSredniL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradSredni">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Prąd średni (I1+I2+I3)/3</xhtml>
              </documentation>
            </variable>
            <variable name="fbPradSredni">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaCalkowitaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc 3-fazowa czynna</xhtml>
              </documentation>
            </variable>
            <variable name="wMocCzynnaCalkowitaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaCalkowita">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaCalkowita">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaCalkowitaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaCalkowitaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc 3-fazowa bierna</xhtml>
              </documentation>
            </variable>
            <variable name="wMocBiernaCalkowitaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaCalkowita">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaCalkowita">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaCalkowitaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaCalkowitaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc 3-fazowa pozorna</xhtml>
              </documentation>
            </variable>
            <variable name="wMocPozornaCalkowitaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaCalkowita">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaCalkowita">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaCalkowitaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyCalkowityHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Całkowity współczynnik mocy</xhtml>
              </documentation>
            </variable>
            <variable name="wWspolczynnikMocyCalkowityLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyCalkowity">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyCalkowity">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyCalkowityZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc Czynna fazowa</xhtml>
              </documentation>
            </variable>
            <variable name="wMocCzynnaL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocCzynnaL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocCzynnaL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc Bierna fazowa</xhtml>
              </documentation>
            </variable>
            <variable name="wMocBiernaL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocBiernaL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocBiernaL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc Pozorna fazowa</xhtml>
              </documentation>
            </variable>
            <variable name="wMocPozornaL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocPozornaL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocPozornaL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Fazowe współczynniki mocy</xhtml>
              </documentation>
            </variable>
            <variable name="wWspolczynnikMocyL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaCzynnaPobranaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Energia pobrana</xhtml>
              </documentation>
            </variable>
            <variable name="wEnergiaCzynnaPobranaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaCzynnaPobrana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaCzynnaPobrana">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaCzynnaPobranaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaBiernaPobranaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnergiaBiernaPobranaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaBiernaPobrana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaBiernaPobrana">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaBiernaPobranaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaPozornaPobranaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnergiaPozornaPobranaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaPozornaPobrana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaPozornaPobrana">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaPozornaPobranaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaSredniaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc średnia</xhtml>
              </documentation>
            </variable>
            <variable name="wMocCzynnaSredniaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaSredniaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocBiernaSredniaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaSredniaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocPozornaSredniaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Maksymalne napięcia fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wMaksymalneNapiecieL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMaksymalneNapiecieL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMaksymalneNapiecieL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMaksymalneNapiecieL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDNapieciaL1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">THD napięcia</xhtml>
              </documentation>
            </variable>
            <variable name="rTHDNapieciaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDNapieciaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDNapieciaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDNapieciaL2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDNapieciaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDNapieciaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDNapieciaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDNapieciaL3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDNapieciaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDNapieciaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDNapieciaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDPraduL1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">THD prądu</xhtml>
              </documentation>
            </variable>
            <variable name="rTHDPraduL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDPraduL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDPraduL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDPraduL2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDPraduL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDPraduL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDPraduL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDPraduL3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDPraduL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDPraduL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDPraduL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="intStatus">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="enumPPPSUrzadenieStatus.Prawidlowy" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> status urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="intStatusZaraportowana">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> status urządzenia zaraportowany</xhtml>
              </documentation>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Opis:					fb służy do komunikacji po Modbus RTU z analizatorem sieci ECA0 na budynkach PPP Sopot
						Analizator Diris A40
						
Aktualizacje:			2018-11-20-JB: Poprawienie adresów Modbusowych
						2019-01-21-JC: Przeliczanie charakteru mocy biernej oraz współczynnika mocy (czynna/indukcyjna)
						2019-03-26-AWy: Wyłączenie (wykomentowanie) eneregii oddanej czynnej i biernej
						2019-04-01-AWy: Przeliczenie pomocnicze dla mocy czynnej całkowitej
						2019-05-05-AWy: Dodanie bloków włączania autonomizacji i kontroli komunikacji (analogicznie do pozostałych fb). Usunięcie zmiennej xBrakKomunikacji
						2019-08-14-AWy: Przeniesienie xAutonomizacja do VAR_INPUT
						2019-09-04-AWy: Usunięcie bugów z obliczania współczynnika mocy i mocy biernej.
						2019-09-05-Awy: Zmiana sposobu przeliczania wartości odczytanych po modbusie (sklejenie w DINT i konwersja na REAL). Usunięcie energii oddanej czynnej i biernej.
										Zmiana nazwy atrybutu FACTOR na FACTOR3PH.
						2019-10-18-JB: Zmiana dead-bandów.
						2019-10-24-AWy: Zmiana wartości tCzasMinimalny dla czasu pracy analizatora.
	
*)

//inicjalizacja sterownika

fbInicjalizacyjnyTimer(IN := NOT xPoInicjalizacji , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rNapiecieL1Zaraportowana := rNapiecieL1;
	rNapiecieL2Zaraportowana := rNapiecieL2;
	rNapiecieL3Zaraportowana := rNapiecieL3;
	rNapiecieL1L2Zaraportowana := rNapiecieL1L2;
	rNapiecieL2L3Zaraportowana := rNapiecieL2L3;
	rNapiecieL3L1Zaraportowana := rNapiecieL3L1;
	rCzestotliwoscZaraportowana := rCzestotliwosc;
	rCzasPracyAnalizatoraZaraportowana := rCzasPracyAnalizatora;
	rPradL1Zaraportowana := rPradL1;
	rPradL2Zaraportowana := rPradL2;
	rPradL3Zaraportowana := rPradL3;
	rPradNZaraportowana := rPradN;
	rPradSredniL1Zaraportowana := rPradSredniL1;
	rPradSredniL2Zaraportowana := rPradSredniL2;
	rPradSredniL3Zaraportowana := rPradSredniL3;
	rPradSredniZaraportowana := rPradSredni;
	rMocCzynnaCalkowitaZaraportowana := rMocCzynnaCalkowita;
	rMocBiernaCalkowitaZaraportowana := rMocBiernaCalkowita;
	rMocPozornaCalkowitaZaraportowana := rMocPozornaCalkowita;
	rWspolczynnikMocyCalkowityZaraportowana := rWspolczynnikMocyCalkowity;
	rMocCzynnaL1Zaraportowana := rMocCzynnaL1;
	rMocCzynnaL2Zaraportowana := rMocCzynnaL2;
	rMocCzynnaL3Zaraportowana := rMocCzynnaL3;
	rMocBiernaL1Zaraportowana := rMocBiernaL1;
	rMocBiernaL2Zaraportowana := rMocBiernaL2;
	rMocBiernaL3Zaraportowana := rMocBiernaL3;
	rMocPozornaL1Zaraportowana := rMocPozornaL1;
	rMocPozornaL2Zaraportowana := rMocPozornaL2;
	rMocPozornaL3Zaraportowana := rMocPozornaL3;
	rWspolczynnikMocyL1Zaraportowana := rWspolczynnikMocyL1;
	rWspolczynnikMocyL2Zaraportowana := rWspolczynnikMocyL2;
	rWspolczynnikMocyL3Zaraportowana := rWspolczynnikMocyL3;
	rEnergiaCzynnaPobranaZaraportowana := rEnergiaCzynnaPobrana;
	rEnergiaBiernaPobranaZaraportowana := rEnergiaBiernaPobrana;
	rEnergiaPozornaPobranaZaraportowana := rEnergiaPozornaPobrana;
	rMocCzynnaSredniaZaraportowana := rMocCzynnaSrednia;
	rMocBiernaSredniaZaraportowana := rMocBiernaSrednia;
	rMocPozornaSredniaZaraportowana := rMocPozornaSrednia;
	rMaksymalneNapiecieL1Zaraportowana := rMaksymalneNapiecieL1;
	rMaksymalneNapiecieL2Zaraportowana := rMaksymalneNapiecieL2;
	rMaksymalneNapiecieL3Zaraportowana := rMaksymalneNapiecieL3;
	rTHDNapieciaL1Zaraportowana := rTHDNapieciaL1;
	rTHDNapieciaL2Zaraportowana := rTHDNapieciaL2;
	rTHDNapieciaL3Zaraportowana := rTHDNapieciaL3;
	rTHDPraduL1Zaraportowana := rTHDPraduL1;
	rTHDPraduL2Zaraportowana := rTHDPraduL2;
	rTHDPraduL3Zaraportowana := rTHDPraduL3;
	intStatusZaraportowana := intStatus;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE

//deklaracja rejestrow do odczytu
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50512;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasPracyAnalizatoraHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50513;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasPracyAnalizatoraLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50514;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1L2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50515;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1L2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50516;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2L3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50517;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2L3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50518;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3L1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50519;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3L1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50520;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50521;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50522;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50523;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50524;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50525;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50526;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzestotliwoscHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50527;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzestotliwoscLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50528;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50529;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50530;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50531;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50532;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50533;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50534;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradNHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50535;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradNLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50536;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaCalkowitaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50537;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaCalkowitaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50538;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaCalkowitaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50539;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaCalkowitaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50540;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaCalkowitaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50541;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaCalkowitaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50542;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyCalkowityHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50543;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyCalkowityLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50554;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50555;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50552;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50553;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50550;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50551;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	


	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50544;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50545;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50546;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50547;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50548;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50549;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50556;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50557;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50558;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50559;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50560;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50561;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50562;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50563;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50564;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50565;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50566;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50567;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 856;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCzynnaPobranaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 857;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCzynnaPobranaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 858;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaBiernaPobranaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 859;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaBiernaPobranaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 860;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaPozornaPobranaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 861;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaPozornaPobranaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51038;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51039;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51040;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51041;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51042;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51043;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51046;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaSredniaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51047;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaSredniaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51052;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaSredniaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51053;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaSredniaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51054;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaSredniaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51055;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaSredniaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51062;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51063;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51064;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51065;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51066;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51067;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51539;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDNapieciaL1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51540;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDNapieciaL2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51541;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDNapieciaL3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51542;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDPraduL1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51543;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDPraduL2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51544;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDPraduL3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
END_IF

//obsluga komunikatu przychodzacego z IZE

IF 	sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			//Napięcia fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1=' , sWartosc := REAL_TO_STRING(rNapiecieL1) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2=' , sWartosc := REAL_TO_STRING(rNapiecieL2) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3=' , sWartosc := REAL_TO_STRING(rNapiecieL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Napięcia przewodowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL1L2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1L2=' , sWartosc := REAL_TO_STRING(rNapiecieL1L2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL2L3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2L3=' , sWartosc := REAL_TO_STRING(rNapiecieL2L3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL3L1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3L1=' , sWartosc := REAL_TO_STRING(rNapiecieL3L1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Częstotliwość 
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'CZEST=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZEST=' , sWartosc := REAL_TO_STRING(rCzestotliwosc) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Czas pracy 
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'CZAS=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZAS=' , sWartosc := REAL_TO_STRING(rCzasPracyAnalizatora) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Prądy fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL1=' , sWartosc := REAL_TO_STRING(rPradL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL2=' , sWartosc := REAL_TO_STRING(rPradL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL3=' , sWartosc := REAL_TO_STRING(rPradL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERN=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERN=' , sWartosc := REAL_TO_STRING(rPradN) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Prądy średnie fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVGL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL1=' , sWartosc := REAL_TO_STRING(rPradSredniL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVGL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL2=' , sWartosc := REAL_TO_STRING(rPradSredniL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVGL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL3=' , sWartosc := REAL_TO_STRING(rPradSredniL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Prąd średni
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVG=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVG=' , sWartosc := REAL_TO_STRING(rPradSredni) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Moce 3-fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := '=' , sWartosc := REAL_TO_STRING(rMocCzynnaCalkowita) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWBE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWBE=' , sWartosc := REAL_TO_STRING(rMocBiernaCalkowita) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWPE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWPE=' , sWartosc := REAL_TO_STRING(rMocPozornaCalkowita) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Współczynnik mocy 3-fazowy
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTOR3PH=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTOR3PH=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyCalkowity) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			//Moce czynne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCECL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CL1=' , sWartosc := REAL_TO_STRING(rMocCzynnaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCECL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CL2=' , sWartosc := REAL_TO_STRING(rMocCzynnaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCECL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CL3=' , sWartosc := REAL_TO_STRING(rMocCzynnaL3) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			//Moce bierne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEBL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BL1=' , sWartosc := REAL_TO_STRING(rMocBiernaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEBL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL2=' , sWartosc := REAL_TO_STRING(rMocBiernaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEBL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL3=' , sWartosc := REAL_TO_STRING(rMocBiernaL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Moce pozorne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEPL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL1=' , sWartosc := REAL_TO_STRING(rMocPozornaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEPL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL2=' , sWartosc := REAL_TO_STRING(rMocPozornaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEPL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL3=' , sWartosc := REAL_TO_STRING(rMocPozornaL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Współczynniki mocy fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTORL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL1=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTORL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL2=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL2) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTORL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL3=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Energia pobrana
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENCE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCE=' , sWartosc := REAL_TO_STRING(rEnergiaCzynnaPobrana) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENBE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENBE=' , sWartosc := REAL_TO_STRING(rEnergiaBiernaPobrana) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENPE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENPE=' , sWartosc := REAL_TO_STRING(rEnergiaPozornaPobrana) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Moce średnie
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWAVGEC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEC=' , sWartosc := REAL_TO_STRING(rMocCzynnaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWAVGEB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEB=' , sWartosc := REAL_TO_STRING(rMocBiernaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWAVGEP=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGCEP=' , sWartosc := REAL_TO_STRING(rMocPozornaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Napięcia maksymalne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTMAXL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL1=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTMAXL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL2=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTMAXL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL3=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//THD napięcia, fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTTHDL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL1=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTTHDL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL2=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTTHDL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL3=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL3) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			//THD prądu, fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERTHDL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL1=' , sWartosc := REAL_TO_STRING(rTHDPraduL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERTHDL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL2=' , sWartosc := REAL_TO_STRING(rTHDPraduL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERTHDL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL3=' , sWartosc := REAL_TO_STRING(rTHDPraduL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 20 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// dokonywanie obliczeń
	// Napięcia fazowe
fbNapiecieL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL1Hi, 16) OR wNapiecieL1Lo), 
				rWartoscWejsciowaZaraportowana := rNapiecieL1Zaraportowana,
				rDeadband := 5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL1);

fbNapiecieL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL2Hi, 16) OR wNapiecieL2Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL2Zaraportowana,
				rDeadband := 5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL2);

fbNapiecieL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL3Hi, 16) OR wNapiecieL3Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL3Zaraportowana,
				rDeadband := 5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL3);
				
	// Napięcia przewodowe
fbNapiecieL1L2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL1L2Hi, 16) OR wNapiecieL1L2Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL1L2Zaraportowana,
				rDeadband := 3,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL1L2);

fbNapiecieL2L3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL2L3Hi, 16) OR wNapiecieL2L3Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL2L3Zaraportowana,
				rDeadband := 3,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL2L3);

fbNapiecieL3L1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL3L1Hi, 16) OR wNapiecieL3L1Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL3L1Zaraportowana,
				rDeadband := 3,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL3L1);
				
	// Częstotliwość
fbCzestotliwosc(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wCzestotliwoscHi, 16) OR wCzestotliwoscLo),
					rWartoscWejsciowaZaraportowana := rCzestotliwoscZaraportowana,
					rDeadband := 0.05,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.01,
					rWartoscWyjsciowa =&gt; rCzestotliwosc);
				
	// Czas pracy
fbCzasPracyAnalizatora(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wCzasPracyAnalizatoraHi, 16) OR wCzasPracyAnalizatoraLo),
						rWartoscWejsciowaZaraportowana := rCzasPracyAnalizatoraZaraportowana,
						rDeadband := 1,
						tCzasMinimalny := tMaksymalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 36,
						rWartoscWyjsciowa =&gt; rCzasPracyAnalizatora);
				
	// Prądy fazowe
fbPradL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradL1Hi, 16) OR wPradL1Lo),
			rWartoscWejsciowaZaraportowana := rPradL1Zaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradL1);

fbPradL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradL2Hi, 16) OR wPradL2Lo),
			rWartoscWejsciowaZaraportowana := rPradL2Zaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradL2);

fbPradL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradL3Hi, 16) OR wPradL3Lo),
			rWartoscWejsciowaZaraportowana := rPradL3Zaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradL3);

fbPradN(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradNHi, 16) OR wPradNLo),
			rWartoscWejsciowaZaraportowana := rPradNZaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradN);
				
	// Prądy średnie fazowe
fbPradSredniL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradSredniL1Hi, 16) OR wPradSredniL1Lo),
				rWartoscWejsciowaZaraportowana := rPradSredniL1Zaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rPradSredniL1);

fbPradSredniL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradSredniL2Hi, 16) OR wPradSredniL2Lo),
				rWartoscWejsciowaZaraportowana := rPradSredniL2Zaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rPradSredniL2);

fbPradSredniL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradSredniL3Hi, 16) OR wPradSredniL3Lo),
				rWartoscWejsciowaZaraportowana := rPradSredniL3Zaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rPradSredniL3);
				
	// Prąd średni (I1+I2+I3)/3
fbPradSredni(	rWartoscWejsciowa := (rPradSredniL1 + rPradSredniL2 + rPradSredniL3) / 3,
				rWartoscWejsciowaZaraportowana := rPradSredniZaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 1,
				rWartoscWyjsciowa =&gt; rPradSredni);
				
	// Moce 3-fazowe
fbMocCzynnaCalkowita(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaCalkowitaHi, 16) OR wMocCzynnaCalkowitaLo),
						rWartoscWejsciowaZaraportowana := rMocCzynnaCalkowitaZaraportowana,
						rDeadband := 1000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocCzynnaCalkowita);
	
fbMocBiernaCalkowita(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaCalkowitaHi, 16) OR wMocBiernaCalkowitaLo),
						rWartoscWejsciowaZaraportowana := rMocBiernaCalkowitaZaraportowana,
						rDeadband := 100,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocBiernaCalkowita);

fbMocPozornaCalkowita(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaCalkowitaHi, 16) OR wMocPozornaCalkowitaLo),
						rWartoscWejsciowaZaraportowana := rMocPozornaCalkowitaZaraportowana,
						rDeadband := 1000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocPozornaCalkowita);
		
	// Całkowity współczynnik mocy
fbWspolczynnikMocyCalkowity(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyCalkowityHi, 16) OR wWspolczynnikMocyCalkowityLo),
								rWartoscWejsciowaZaraportowana := rWspolczynnikMocyCalkowityZaraportowana,
								rDeadband := 0.05,
								tCzasMinimalny := tMinimalnyCzasRaportowania,
								tCzasMaksymalny := tMaksymalnyCzasRaportowania,
								rWynikMnoznik := 0.001,
								rWartoscWyjsciowa =&gt; rWspolczynnikMocyCalkowity);
				
	// Moce czynne fazowe
fbMocCzynnaL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaL1Hi, 16) OR wMocCzynnaL1Lo),
				rWartoscWejsciowaZaraportowana := rMocCzynnaL1Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocCzynnaL1);
				
fbMocCzynnaL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaL2Hi, 16) OR wMocCzynnaL2Lo),
				rWartoscWejsciowaZaraportowana := rMocCzynnaL2Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocCzynnaL2);
				
fbMocCzynnaL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaL3Hi, 16) OR wMocCzynnaL3Lo),
				rWartoscWejsciowaZaraportowana := rMocCzynnaL3Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocCzynnaL3);

	// Moce bierne fazowe
fbMocBiernaL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaL1Hi, 16) OR wMocBiernaL1Lo),
				rWartoscWejsciowaZaraportowana := rMocBiernaL1Zaraportowana,
				rDeadband := 50,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocBiernaL1);
				
fbMocBiernaL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaL2Hi, 16) OR wMocBiernaL2Lo),
				rWartoscWejsciowaZaraportowana := rMocBiernaL2Zaraportowana,
				rDeadband := 50,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocBiernaL2);
				
fbMocBiernaL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaL3Hi, 16) OR wMocBiernaL3Lo),
				rWartoscWejsciowaZaraportowana := rMocBiernaL3Zaraportowana,
				rDeadband := 50,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocBiernaL3);
				
	// Moce pozorne fazowe
fbMocPozornaL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaL1Hi, 16) OR wMocPozornaL1Lo),
				rWartoscWejsciowaZaraportowana := rMocPozornaL1Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocPozornaL1);
				
fbMocPozornaL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaL2Hi, 16) OR wMocPozornaL2Lo),
				rWartoscWejsciowaZaraportowana := rMocPozornaL2Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocPozornaL2);
				
fbMocPozornaL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaL3Hi, 16) OR wMocPozornaL3Lo),
				rWartoscWejsciowaZaraportowana := rMocPozornaL3Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocPozornaL3);
				
	// Współczynniki mocy fazowe
fbWspolczynnikMocyL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyL1Hi, 16) OR wWspolczynnikMocyL1Lo),
						rWartoscWejsciowaZaraportowana := rWspolczynnikMocyL1Zaraportowana,
						rDeadband := 0.05,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.001,
						rWartoscWyjsciowa =&gt; rWspolczynnikMocyL1);
				
fbWspolczynnikMocyL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyL2Hi, 16) OR wWspolczynnikMocyL2Lo),
						rWartoscWejsciowaZaraportowana := rWspolczynnikMocyL2Zaraportowana,
						rDeadband := 0.05,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.001,
						rWartoscWyjsciowa =&gt; rWspolczynnikMocyL2);
				
fbWspolczynnikMocyL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyL3Hi, 16) OR wWspolczynnikMocyL3Lo),
						rWartoscWejsciowaZaraportowana := rWspolczynnikMocyL3Zaraportowana,
						rDeadband := 0.05,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.001,
						rWartoscWyjsciowa =&gt; rWspolczynnikMocyL3);
				
	// Energia pobrana
fbEnergiaCzynnaPobrana(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wEnergiaCzynnaPobranaHi, 16) OR wEnergiaCzynnaPobranaLo),
						rWartoscWejsciowaZaraportowana := rEnergiaCzynnaPobranaZaraportowana,
						rDeadband := 3600000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 3600000,
						rWartoscWyjsciowa =&gt; rEnergiaCzynnaPobrana);
				
fbEnergiaBiernaPobrana(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wEnergiaBiernaPobranaHi, 16) OR wEnergiaBiernaPobranaLo),
						rWartoscWejsciowaZaraportowana := rEnergiaBiernaPobranaZaraportowana,
						rDeadband := 1800000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 3600000,
						rWartoscWyjsciowa =&gt; rEnergiaBiernaPobrana);
				
fbEnergiaPozornaPobrana(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wEnergiaPozornaPobranaHi, 16) OR wEnergiaPozornaPobranaLo),
							rWartoscWejsciowaZaraportowana := rEnergiaPozornaPobranaZaraportowana,
							rDeadband := 3600000,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 3600000,
							rWartoscWyjsciowa =&gt; rEnergiaPozornaPobrana);

	// Moce średnie
fbMocCzynnaSrednia(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaSredniaHi, 16) OR wMocCzynnaSredniaLo),
					rWartoscWejsciowaZaraportowana := rMocCzynnaSredniaZaraportowana,
					rDeadband := 500,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 10,
					rWartoscWyjsciowa =&gt; rMocCzynnaSrednia);
				
fbMocBiernaSrednia(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaSredniaHi, 16) OR wMocBiernaSredniaLo),
					rWartoscWejsciowaZaraportowana := rMocBiernaSredniaZaraportowana,
					rDeadband := 500,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 10,
					rWartoscWyjsciowa =&gt; rMocBiernaSrednia);
				
fbMocPozornaSrednia(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaSredniaHi, 16) OR wMocPozornaSredniaLo),
						rWartoscWejsciowaZaraportowana := rMocPozornaSredniaZaraportowana,
						rDeadband := 500,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocPozornaSrednia);
				
	//Maksymalne napięcia fazowe
fbMaksymalneNapiecieL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMaksymalneNapiecieL1Hi, 16) OR wMaksymalneNapiecieL1Lo),
				rWartoscWejsciowaZaraportowana := rMaksymalneNapiecieL1Zaraportowana,
				rDeadband := 20,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rMaksymalneNapiecieL1);
				
fbMaksymalneNapiecieL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMaksymalneNapiecieL2Hi, 16) OR wMaksymalneNapiecieL2Lo),
				rWartoscWejsciowaZaraportowana := rMaksymalneNapiecieL2Zaraportowana,
				rDeadband := 20,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rMaksymalneNapiecieL2);
				
fbMaksymalneNapiecieL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMaksymalneNapiecieL3Hi, 16) OR wMaksymalneNapiecieL3Lo),
				rWartoscWejsciowaZaraportowana := rMaksymalneNapiecieL3Zaraportowana,
				rDeadband := 20,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rMaksymalneNapiecieL3);
			
	// THD napięcia
fbTHDNapieciaL1(	rWartoscWejsciowa := WORD_TO_REAL(wTHDNapieciaL1),
					rWartoscWejsciowaZaraportowana := rTHDNapieciaL1Zaraportowana,
					rDeadband := 0.08,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.001,
					rWartoscWyjsciowa =&gt; rTHDNapieciaL1);
				
fbTHDNapieciaL2(	rWartoscWejsciowa := WORD_TO_REAL(wTHDNapieciaL2),
					rWartoscWejsciowaZaraportowana := rTHDNapieciaL2Zaraportowana,
					rDeadband := 0.08,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.001,
					rWartoscWyjsciowa =&gt; rTHDNapieciaL2);
				
fbTHDNapieciaL3(	rWartoscWejsciowa := WORD_TO_REAL(wTHDNapieciaL3),
					rWartoscWejsciowaZaraportowana := rTHDNapieciaL3Zaraportowana,
					rDeadband := 0.08,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.001,
					rWartoscWyjsciowa =&gt; rTHDNapieciaL3);
				
	// THD prądu
fbTHDPraduL1(	rWartoscWejsciowa := WORD_TO_REAL(wTHDPraduL1),
				rWartoscWejsciowaZaraportowana := rTHDPraduL1Zaraportowana,
				rDeadband := 0.08,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rTHDPraduL1);
				
fbTHDPraduL2(	rWartoscWejsciowa := WORD_TO_REAL(wTHDPraduL2),
				rWartoscWejsciowaZaraportowana := rTHDPraduL2Zaraportowana,
				rDeadband := 0.08,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rTHDPraduL2);
				
fbTHDPraduL3(	rWartoscWejsciowa := WORD_TO_REAL(wTHDPraduL3),
				rWartoscWejsciowaZaraportowana := rTHDPraduL3Zaraportowana,
				rDeadband := 0.08,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rTHDPraduL3);
				
	
//Raportowanie typu M do IZE wartosci odczytanych z Modbusa			
IF (rNapiecieL1 &lt;&gt; rNapiecieL1Zaraportowana OR rNapiecieL2 &lt;&gt; rNapiecieL2Zaraportowana OR rNapiecieL3 &lt;&gt; rNapiecieL3Zaraportowana OR rNapiecieL1L2 &lt;&gt; rNapiecieL1L2Zaraportowana 
OR rNapiecieL2L3 &lt;&gt; rNapiecieL2L3Zaraportowana OR rNapiecieL3L1 &lt;&gt; rNapiecieL3L1Zaraportowana OR rCzestotliwosc &lt;&gt; rCzestotliwoscZaraportowana OR rCzasPracyAnalizatora &lt;&gt; rCzasPracyAnalizatoraZaraportowana 
OR rPradL1 &lt;&gt; rPradL1Zaraportowana OR rPradL2 &lt;&gt; rPradL2Zaraportowana OR rPradL3 &lt;&gt; rPradL3Zaraportowana OR rPradN &lt;&gt; rPradNZaraportowana OR rPradSredniL1 &lt;&gt; rPradSredniL1Zaraportowana 
OR rPradSredniL2 &lt;&gt; rPradSredniL2Zaraportowana OR rPradSredniL3 &lt;&gt; rPradSredniL3Zaraportowana OR rPradSredni &lt;&gt; rPradSredniZaraportowana OR rMocCzynnaCalkowita &lt;&gt; rMocCzynnaCalkowitaZaraportowana 
OR rMocBiernaCalkowita &lt;&gt; rMocBiernaCalkowitaZaraportowana OR rMocPozornaCalkowita &lt;&gt; rMocPozornaCalkowitaZaraportowana OR rWspolczynnikMocyCalkowity &lt;&gt; rWspolczynnikMocyCalkowityZaraportowana 
OR rMocCzynnaL1 &lt;&gt; rMocCzynnaL1Zaraportowana OR rMocCzynnaL2 &lt;&gt; rMocCzynnaL2Zaraportowana OR rMocCzynnaL3 &lt;&gt; rMocCzynnaL3Zaraportowana OR rMocBiernaL1 &lt;&gt; rMocBiernaL1Zaraportowana 
OR rMocBiernaL2 &lt;&gt; rMocBiernaL2Zaraportowana OR rMocBiernaL3 &lt;&gt; rMocBiernaL3Zaraportowana OR rMocPozornaL1 &lt;&gt; rMocPozornaL1Zaraportowana OR rMocPozornaL2 &lt;&gt; rMocPozornaL2Zaraportowana 
OR rMocPozornaL3 &lt;&gt; rMocPozornaL3Zaraportowana OR rWspolczynnikMocyL1 &lt;&gt; rWspolczynnikMocyL1Zaraportowana OR rWspolczynnikMocyL2 &lt;&gt; rWspolczynnikMocyL2Zaraportowana 
OR rWspolczynnikMocyL3 &lt;&gt; rWspolczynnikMocyL3Zaraportowana OR rEnergiaCzynnaPobrana &lt;&gt; rEnergiaCzynnaPobranaZaraportowana OR rEnergiaBiernaPobrana &lt;&gt; rEnergiaBiernaPobranaZaraportowana 
OR rEnergiaPozornaPobrana &lt;&gt; rEnergiaPozornaPobranaZaraportowana OR rMocCzynnaSrednia &lt;&gt; rMocCzynnaSredniaZaraportowana OR rMocBiernaSrednia &lt;&gt; rMocBiernaSredniaZaraportowana 
OR rMocPozornaSrednia &lt;&gt; rMocPozornaSredniaZaraportowana OR rMaksymalneNapiecieL1 &lt;&gt; rMaksymalneNapiecieL1Zaraportowana OR rMaksymalneNapiecieL2 &lt;&gt; rMaksymalneNapiecieL2Zaraportowana 
OR rMaksymalneNapiecieL3 &lt;&gt; rMaksymalneNapiecieL3Zaraportowana OR rTHDNapieciaL1 &lt;&gt; rTHDNapieciaL1Zaraportowana OR rTHDNapieciaL2 &lt;&gt; rTHDNapieciaL2Zaraportowana OR rTHDNapieciaL3 &lt;&gt; rTHDNapieciaL3Zaraportowana 
OR rTHDPraduL1 &lt;&gt; rTHDPraduL1Zaraportowana OR rTHDPraduL2 &lt;&gt; rTHDPraduL2Zaraportowana OR rTHDPraduL3 &lt;&gt; rTHDPraduL3Zaraportowana) AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa 
AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF 
				
IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intStatus &lt;&gt; intStatusZaraportowana THEN
		intStatusZaraportowana := intStatus;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STATUS=' , sWartosc := INT_TO_STRING(intStatus) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	//Napięcia fazowe
	IF rNapiecieL1 &lt;&gt; rNapiecieL1Zaraportowana THEN
		rNapiecieL1Zaraportowana := rNapiecieL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1=' , sWartosc := REAL_TO_STRING(rNapiecieL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rNapiecieL2 &lt;&gt; rNapiecieL2Zaraportowana THEN
		rNapiecieL2Zaraportowana := rNapiecieL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2=' , sWartosc := REAL_TO_STRING(rNapiecieL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rNapiecieL3 &lt;&gt; rNapiecieL3Zaraportowana THEN
		rNapiecieL3Zaraportowana := rNapiecieL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3=' , sWartosc := REAL_TO_STRING(rNapiecieL3) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	//Napięcia przewodowe		
	IF rNapiecieL1L2 &lt;&gt; rNapiecieL1L2Zaraportowana THEN
		rNapiecieL1L2Zaraportowana := rNapiecieL1L2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1L2=' , sWartosc := REAL_TO_STRING(rNapiecieL1L2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rNapiecieL2L3 &lt;&gt; rNapiecieL2L3Zaraportowana THEN
		rNapiecieL2L3Zaraportowana := rNapiecieL2L3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2L3=' , sWartosc := REAL_TO_STRING(rNapiecieL2L3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rNapiecieL3L1 &lt;&gt; rNapiecieL3L1Zaraportowana THEN
		rNapiecieL3L1Zaraportowana := rNapiecieL3L1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3L1=' , sWartosc := REAL_TO_STRING(rNapiecieL3L1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Częstotliwość 
	IF rCzestotliwosc &lt;&gt; rCzestotliwoscZaraportowana THEN
		rCzestotliwoscZaraportowana := rCzestotliwosc;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZEST=' , sWartosc := REAL_TO_STRING(rCzestotliwosc) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Czas pracy 
	IF rCzasPracyAnalizatora &lt;&gt; rCzasPracyAnalizatoraZaraportowana THEN
		rCzasPracyAnalizatoraZaraportowana := rCzasPracyAnalizatora;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZAS=' , sWartosc := REAL_TO_STRING(rCzasPracyAnalizatora) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Prądy fazowe	
	IF rPradL1 &lt;&gt; rPradL1Zaraportowana THEN
		rPradL1Zaraportowana := rPradL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL1=' , sWartosc := REAL_TO_STRING(rPradL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rPradL2 &lt;&gt; rPradL2Zaraportowana THEN
		rPradL2Zaraportowana := rPradL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL2=' , sWartosc := REAL_TO_STRING(rPradL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rPradL3 &lt;&gt; rPradL3Zaraportowana THEN
		rPradL3Zaraportowana := rPradL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL3=' , sWartosc := REAL_TO_STRING(rPradL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rPradN &lt;&gt; rPradNZaraportowana THEN
		rPradNZaraportowana := rPradN;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERN=' , sWartosc := REAL_TO_STRING(rPradN) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Prądy średnie fazowe
	IF rPradSredniL1 &lt;&gt; rPradSredniL1Zaraportowana THEN
		rPradSredniL1Zaraportowana := rPradSredniL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL1=' , sWartosc := REAL_TO_STRING(rPradSredniL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rPradSredniL2 &lt;&gt; rPradSredniL2Zaraportowana THEN
		rPradSredniL2Zaraportowana := rPradSredniL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL2=' , sWartosc := REAL_TO_STRING(rPradSredniL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rPradSredniL3 &lt;&gt; rPradSredniL3Zaraportowana THEN
		rPradSredniL3Zaraportowana := rPradSredniL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL3=' , sWartosc := REAL_TO_STRING(rPradSredniL3) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Prąd średni
	IF rPradSredni &lt;&gt; rPradSredniZaraportowana THEN
		rPradSredniZaraportowana := rPradSredni;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVG=' , sWartosc := REAL_TO_STRING(rPradSredni) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce 3-fazowe		 
	IF rMocCzynnaCalkowita &lt;&gt; rMocCzynnaCalkowitaZaraportowana THEN
		rMocCzynnaCalkowitaZaraportowana := rMocCzynnaCalkowita;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCE=' , sWartosc := REAL_TO_STRING(rMocCzynnaCalkowita) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaCalkowita &lt;&gt; rMocBiernaCalkowitaZaraportowana THEN
		rMocBiernaCalkowitaZaraportowana := rMocBiernaCalkowita;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWBE=' , sWartosc := REAL_TO_STRING(rMocBiernaCalkowita) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rMocPozornaCalkowita &lt;&gt; rMocPozornaCalkowitaZaraportowana THEN
		rMocPozornaCalkowitaZaraportowana := rMocPozornaCalkowita;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWPE=' , sWartosc := REAL_TO_STRING(rMocPozornaCalkowita) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Współczynnik mocy 3-fazowy
	IF rWspolczynnikMocyCalkowity &lt;&gt; rWspolczynnikMocyCalkowityZaraportowana THEN
		rWspolczynnikMocyCalkowityZaraportowana := rWspolczynnikMocyCalkowity;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTOR3PH=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyCalkowity) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce czynne fazowe
	IF rMocCzynnaL1 &lt;&gt; rMocCzynnaL1Zaraportowana THEN
		rMocCzynnaL1Zaraportowana := rMocCzynnaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCECL1=' , sWartosc := REAL_TO_STRING(rMocCzynnaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocCzynnaL2 &lt;&gt; rMocCzynnaL2Zaraportowana THEN
		rMocCzynnaL2Zaraportowana := rMocCzynnaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCECL2=' , sWartosc := REAL_TO_STRING(rMocCzynnaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocCzynnaL3 &lt;&gt; rMocCzynnaL3Zaraportowana THEN
		rMocCzynnaL3Zaraportowana := rMocCzynnaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCECL3=' , sWartosc := REAL_TO_STRING(rMocCzynnaL3) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	//Moce bierne fazowe	
	IF rMocBiernaL1 &lt;&gt; rMocBiernaL1Zaraportowana THEN
		rMocBiernaL1Zaraportowana := rMocBiernaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL1=' , sWartosc := REAL_TO_STRING(rMocBiernaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaL2 &lt;&gt; rMocBiernaL2Zaraportowana THEN
		rMocBiernaL2Zaraportowana := rMocBiernaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL2=' , sWartosc := REAL_TO_STRING(rMocBiernaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaL3 &lt;&gt; rMocBiernaL3Zaraportowana THEN
		rMocBiernaL3Zaraportowana := rMocBiernaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL3=' , sWartosc := REAL_TO_STRING(rMocBiernaL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce pozorne fazowe
	IF rMocPozornaL1 &lt;&gt; rMocPozornaL1Zaraportowana THEN
		rMocPozornaL1Zaraportowana := rMocPozornaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL1=' , sWartosc := REAL_TO_STRING(rMocPozornaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocPozornaL2 &lt;&gt; rMocPozornaL2Zaraportowana THEN
		rMocPozornaL2Zaraportowana := rMocPozornaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL2=' , sWartosc := REAL_TO_STRING(rMocPozornaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocPozornaL3 &lt;&gt; rMocPozornaL3Zaraportowana THEN
		rMocPozornaL3Zaraportowana := rMocPozornaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL3=' , sWartosc := REAL_TO_STRING(rMocPozornaL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Współczynniki mocy fazowe
	IF rWspolczynnikMocyL1 &lt;&gt; rWspolczynnikMocyL1Zaraportowana THEN
		rWspolczynnikMocyL1Zaraportowana := rWspolczynnikMocyL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL1=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL1) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	IF rWspolczynnikMocyL2 &lt;&gt; rWspolczynnikMocyL2Zaraportowana THEN
		rWspolczynnikMocyL2Zaraportowana := rWspolczynnikMocyL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL2=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rWspolczynnikMocyL3 &lt;&gt; rWspolczynnikMocyL3Zaraportowana THEN
		rWspolczynnikMocyL3Zaraportowana := rWspolczynnikMocyL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL3=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Energia pobrana
	IF rEnergiaCzynnaPobrana &lt;&gt; rEnergiaCzynnaPobranaZaraportowana THEN
		rEnergiaCzynnaPobranaZaraportowana := rEnergiaCzynnaPobrana;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCE=' , sWartosc := REAL_TO_STRING(rEnergiaCzynnaPobrana) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rEnergiaBiernaPobrana &lt;&gt; rEnergiaBiernaPobranaZaraportowana THEN
		rEnergiaBiernaPobranaZaraportowana := rEnergiaBiernaPobrana;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENBE=' , sWartosc := REAL_TO_STRING(rEnergiaBiernaPobrana) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rEnergiaPozornaPobrana &lt;&gt; rEnergiaPozornaPobranaZaraportowana THEN
		rEnergiaPozornaPobranaZaraportowana := rEnergiaPozornaPobrana;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENPE=' , sWartosc := REAL_TO_STRING(rEnergiaPozornaPobrana) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce średnie	
	IF rMocCzynnaSrednia &lt;&gt; rMocCzynnaSredniaZaraportowana THEN
		rMocCzynnaSredniaZaraportowana := rMocCzynnaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEC=' , sWartosc := REAL_TO_STRING(rMocCzynnaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaSrednia &lt;&gt; rMocBiernaSredniaZaraportowana THEN
		rMocBiernaSredniaZaraportowana := rMocBiernaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEB=' , sWartosc := REAL_TO_STRING(rMocBiernaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocPozornaSrednia &lt;&gt; rMocPozornaSredniaZaraportowana THEN
		rMocPozornaSredniaZaraportowana := rMocPozornaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEP=' , sWartosc := REAL_TO_STRING(rMocPozornaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Napięcia maksymalne fazowe
	IF rMaksymalneNapiecieL1 &lt;&gt; rMaksymalneNapiecieL1Zaraportowana THEN
		rMaksymalneNapiecieL1Zaraportowana := rMaksymalneNapiecieL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL1=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMaksymalneNapiecieL2 &lt;&gt; rMaksymalneNapiecieL2Zaraportowana THEN
		rMaksymalneNapiecieL2Zaraportowana := rMaksymalneNapiecieL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL2=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rMaksymalneNapiecieL3 &lt;&gt; rMaksymalneNapiecieL3Zaraportowana THEN
		rMaksymalneNapiecieL3Zaraportowana := rMaksymalneNapiecieL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL3=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//THD napięcia, fazowe
	IF rTHDNapieciaL1 &lt;&gt; rTHDNapieciaL1Zaraportowana THEN
		rTHDNapieciaL1Zaraportowana := rTHDNapieciaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL1=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rTHDNapieciaL2 &lt;&gt; rTHDNapieciaL2Zaraportowana THEN
		rTHDNapieciaL2Zaraportowana := rTHDNapieciaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL2=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rTHDNapieciaL3 &lt;&gt; rTHDNapieciaL3Zaraportowana THEN
		rTHDNapieciaL3Zaraportowana := rTHDNapieciaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL3=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//THD prądu, fazowe
	IF rTHDPraduL1 &lt;&gt; rTHDPraduL1Zaraportowana THEN
		rTHDPraduL1Zaraportowana := rTHDPraduL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL1=' , sWartosc := REAL_TO_STRING(rTHDPraduL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rTHDPraduL2 &lt;&gt; rTHDPraduL2Zaraportowana THEN
		rTHDPraduL2Zaraportowana := rTHDPraduL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL2=' , sWartosc := REAL_TO_STRING(rTHDPraduL2) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	IF rTHDPraduL3 &lt;&gt; rTHDPraduL3Zaraportowana THEN
		rTHDPraduL3Zaraportowana := rTHDPraduL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL3=' , sWartosc := REAL_TO_STRING(rTHDPraduL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// Sprawdzanie stanu komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);

// Sprawdzanie czy pomiar napięcia L1 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rNapiecieL1Pamiec = rNapiecieL1 THEN
	xBrakZmianyNapiecieL1 := TRUE;
ELSE
	xBrakZmianyNapiecieL1 := FALSE;	
END_IF
fbBrakZmianyNapiecieL1Timer(IN := xBrakZmianyNapiecieL1, PT := T#12H);
rNapiecieL1Pamiec := rNapiecieL1;
IF fbBrakZmianyNapiecieL1Timer.Q THEN
	xBladBrakZmianyNapiecieL1 := TRUE;
ELSE
	xBladBrakZmianyNapiecieL1 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L2 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rNapiecieL2Pamiec = rNapiecieL2 THEN
	xBrakZmianyNapiecieL2 := TRUE;
ELSE
	xBrakZmianyNapiecieL2 := FALSE;	
END_IF
fbBrakZmianyNapiecieL2Timer(IN := xBrakZmianyNapiecieL2, PT := T#12H);
rNapiecieL2Pamiec := rNapiecieL2;
IF fbBrakZmianyNapiecieL2Timer.Q THEN
	xBladBrakZmianyNapiecieL2 := TRUE;
ELSE
	xBladBrakZmianyNapiecieL2 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L3 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rNapiecieL3Pamiec = rNapiecieL3 THEN
	xBrakZmianyNapiecieL3 := TRUE;
ELSE
	xBrakZmianyNapiecieL3 := FALSE;	
END_IF
fbBrakZmianyNapiecieL3Timer(IN := xBrakZmianyNapiecieL3, PT := T#12H);
rNapiecieL3Pamiec := rNapiecieL3;
IF fbBrakZmianyNapiecieL3Timer.Q THEN
	xBladBrakZmianyNapiecieL3 := TRUE;
ELSE
	xBladBrakZmianyNapiecieL3 := FALSE;
END_IF

// Sprawdzanie czy pomiar prądu L1 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rPradL1Pamiec = rPradL1 THEN
	xBrakZmianyPradL1 := TRUE;
ELSE
	xBrakZmianyPradL1 := FALSE;	
END_IF
fbBrakZmianyPradL1Timer(IN := xBrakZmianyPradL1, PT := T#12H);
rPradL1Pamiec := rPradL1;
IF fbBrakZmianyPradL1Timer.Q THEN
	xBladBrakZmianyPradL1 := TRUE;
ELSE
	xBladBrakZmianyPradL1 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L2 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rPradL2Pamiec = rPradL2 THEN
	xBrakZmianyPradL2 := TRUE;
ELSE
	xBrakZmianyPradL2 := FALSE;	
END_IF
fbBrakZmianyPradL2Timer(IN := xBrakZmianyPradL2, PT := T#12H);
rPradL2Pamiec := rPradL2;
IF fbBrakZmianyPradL2Timer.Q THEN
	xBladBrakZmianyPradL2 := TRUE;
ELSE
	xBladBrakZmianyPradL2 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L3 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rPradL3Pamiec = rPradL3 THEN
	xBrakZmianyPradL3 := TRUE;
ELSE
	xBrakZmianyPradL3 := FALSE;	
END_IF
fbBrakZmianyPradL3Timer(IN := xBrakZmianyPradL3, PT := T#12H);
rPradL3Pamiec := rPradL3;
IF fbBrakZmianyPradL3Timer.Q THEN
	xBladBrakZmianyPradL3 := TRUE;
ELSE
	xBladBrakZmianyPradL3 := FALSE;
END_IF

// obsługa alarmów do analizatora
	//brak komunikacji z analizatorem
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbTimerBrakuKomunikacji.Q THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji , intNumer := enumPPPSAnalizatorDirisA40Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbTimerBrakuKomunikacji.Q THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji , intNumer := enumPPPSAnalizatorDirisA40Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	// Brak zmiany parametrów przez 24h
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyNapiecieL1 AND xBladBrakZmianyNapiecieL2 AND xBladBrakZmianyNapiecieL3 AND
   xBladBrakZmianyPradL1 AND xBladBrakZmianyPradL2 AND xBladBrakZmianyPradL3 THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow , intNumer := enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT (xBladBrakZmianyNapiecieL1 AND xBladBrakZmianyNapiecieL2 AND xBladBrakZmianyNapiecieL3 AND
   xBladBrakZmianyPradL1 AND xBladBrakZmianyPradL2 AND xBladBrakZmianyPradL3) THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow , intNumer := enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
</project>