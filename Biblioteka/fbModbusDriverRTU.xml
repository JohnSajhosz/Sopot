<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2019-10-29T12:37:19.6174207" />
  <contentHeader name="CoDeSys External Library Template" version="3.5.5.30" modificationDateTime="2019-10-29T12:36:39.3744516" organization="3S - Smart Software Solutions GmbH" author="3S - Smart Software Solutions GmbH">
    <Comment>Library project template with all possible element types, docu and a sample project structure</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="Company" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="DefaultNamespace" type="string">TMP</property>
          <property name="Description" type="string">Library project template with all possible element types, docu and a sample project structure</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">SOLWENA_Biblioteka - MASTER</property>
          <property name="Title" type="string">CoDeSys External Library Template</property>
          <property name="Version" type="version">3.5.5.30</property>
          <property name="library-category-list" type="library-category-list">Intern|CAA|Guidelines</property>
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="fbModbusDriverRTU" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="intOdczytZapisZadanieRozmiarBufora">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arRTUParametryKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="typModbusRTUParametryKomunikacji" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="ModbusMasterRTU">
              <type>
                <derived name="FbMbMasterSerial" />
              </type>
            </variable>
            <variable name="arRTUParametryKomunikacjiPoprz">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="typModbusRTUParametryKomunikacji" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="utZapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utZapytaniePoprz">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utOdpowiedz">
              <type>
                <derived name="typMbResponse" />
              </type>
            </variable>
            <variable name="xStatusPolaczenia">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBladKomunikacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="typStatusKomunikacji">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="tCzasPonowienia">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#15s0ms0us0ns" />
              </initialValue>
            </variable>
            <variable name="tCzasStabilnosciKomunikacji">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#30s0ms0us0ns" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas po jakim driver raportuje poprawną komunikację po jej faktycznym odzyskaniu - czas powinien być większy niż czas tCzasPonawiania</xhtml>
              </documentation>
            </variable>
            <variable name="xDriverWykonajKomunikacje">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienna sygnalizujaca konicznosc wykonania zapisu/odczytu do Modbus RTU </xhtml>
              </documentation>
            </variable>
            <variable name="tonDriverWykonajKomunikacje">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Opóżnienie włączenia triggera wysłania komunikatu po włączeniu drivera MODBUSa</xhtml>
              </documentation>
            </variable>
            <variable name="xDriverWykonajKomunikacjeTrigger">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger wysłania komunikatu MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="ftrigDriverWykonajKomunikacjeTrigger">
              <type>
                <derived name="F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zbocze opadające triggera wysłania komunikatu </xhtml>
              </documentation>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniaProba">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniBlad">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="negWykonaj">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="intZnacznikDriveraOdczytuCyklicznego">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="intZnacznikDriveraOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoPoczatek">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanieReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikPomocniczy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytZadanieTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablicaIlosc">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoopOverflow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="statusbledu">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="jakiezapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="intDebugZnacznik">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> debug</xhtml>
              </documentation>
            </variable>
            <variable name="arDebugZapytanie">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typMBQuery" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugOdpowiedz">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typMbResponse" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="typDebugOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugCzas">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <DT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="inttest">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="ctuLicznikBledow">
              <type>
                <derived name="CTU" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Licznik błędów</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					N/A
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:								

Opis:					Obsługa komunikacji MODBUS
						
Aktualizacje:			2019-09-13-AWy: zmiana sposobu uruchamiania drivera MODBUSowego ModbusMasterRTU i wysyłania komunkatów.
						2019-10-18-AWy: dodanie licznika błędów
						2019-10-22-AWy: zmiana opóżnienia włączenia drivera po zakończeniu komunikacji
						
Rozwój:					Możliwe jest przyspieszenie drivera poprzez nie restartowanie po każdej komunikacji a jedynie wtedy, gdy ulegną zmianie parametry komunikacji.						
	
*)

// obsługa odczytu/zapisu danych na żądanie

IF intZnacznikDriveraOdczytuZapisuZadanie &lt;&gt; intZnacznikOdczytuZapisuZadanie AND NOT xDriverWykonajKomunikacje THEN
	fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := intOdczytZapisZadanieRozmiarBufora, intWskaznik := intZnacznikDriveraOdczytuZapisuZadanie);
	IF arStatusKomunikacji[arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia] = enumModbusStatus.KomunikacjaPrawidlowa THEN
		xDriverWykonajKomunikacje := TRUE;
		utZapytanie.bUnitId := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bFunkcja;
		utZapytanie.uiReadQuantity := 1;
		utZapytanie.uiReadAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.uiWriteAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.awWriteData[0] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].wWartoscDoZapisania;
		utZapytanie.uiWriteQuantity := 1;
		intOdczytZadanieTablica := intZnacznikDriveraOdczytuZapisuZadanie;
	END_IF
END_IF

// obsługa odczytu cyklicznego zmiennych zapisanych w tabeli

IF NOT xDriverWykonajKomunikacje THEN 
	
	intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
	intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
	IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
		intZnacznikDriveraOdczytuCyklicznego := 1;
	END_IF

	WHILE intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego AND _GetLongTime() - arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] &lt; tCzasPonowienia AND
			_GetLongTime() - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltZnacznikCzasuWyslania &lt; arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltCzestotliwosc DO
		intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
			intZnacznikDriveraOdczytuCyklicznego := 1;
		END_IF
	END_WHILE

// zapis adresu startowego rejestrów do zapisu

	IF intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego THEN
		xDriverWykonajKomunikacje := TRUE;
		arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] := _GetLongTime();
		utZapytanie.bUnitId := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja;
		utZapytanie.uiReadAddress := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru;
		utZapytanie.uiReadQuantity := 1;
		intOdczytCyklicznyTablica := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
			intZnacznikPomocniczy := 1;
		END_IF

// sprawdzenie czy następne żądanie nie jest w kolejności do bieżącego jeśli tak to grupuje je w jedno zapytanie

		WHILE (arOdczytCykliczny[intZnacznikPomocniczy].uiAdresRejestru - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru = 1 AND
				arOdczytCykliczny[intZnacznikPomocniczy].bFunkcja = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja AND
				arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia) DO
				
			utZapytanie.uiReadQuantity := utZapytanie.uiReadQuantity + 1;
			intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
				intZnacznikDriveraOdczytuCyklicznego := 1;
			END_IF
			intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
				intZnacznikPomocniczy := 1;
			END_IF
		END_WHILE
		intOdczytCyklicznyTablicaIlosc := UINT_TO_INT(utZapytanie.uiReadQuantity);
	END_IF
END_IF

// driver komunikacyjny MODBUS RTU
	// Na potrzeby obsługi komunikacji w kilku prędkościach: ModbusMasterRTU jest włączany (xConnect := TRUE), wprowadzane są nowe parametry komunikacji, a następnie triggerowane jest wysłanie komunikatu
	// (xTrigger := TRUE). Następnie ModbusMasterRTU jest wyłączany (xConnect := FALSE) i algorytm zaczyna się od nowa.

ftrigDriverWykonajKomunikacjeTrigger(CLK := xDriverWykonajKomunikacjeTrigger);
IF ftrigDriverWykonajKomunikacjeTrigger.Q THEN
	xDriverWykonajKomunikacje := FALSE;
END_IF

tonDriverWykonajKomunikacje(IN := xDriverWykonajKomunikacje, PT := T#1000MS); // Opóżnienie konieczne ze względu na nieprawidłowe działanie drivera przy zbyt szybkim wysyłaniu komunikatu po włączeniu drivera
IF tonDriverWykonajKomunikacje.Q THEN
	xDriverWykonajKomunikacjeTrigger := TRUE;
END_IF		

ModbusMasterRTU(xConnect := 		xDriverWykonajKomunikacje,
				I_Port := 			arRTUParametryKomunikacji[utZapytanie.bUnitId].typNazwaPortuKomunikacyjnego , 
				eFrameType := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eTypRamki , 
				udiBaudrate := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].udiPredkosc , 
				usiDataBits := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].usiBityDanych , 
				eParity := 			arRTUParametryKomunikacji[utZapytanie.bUnitId].eParzystosc , 
				eStopBits := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eBityStopu , 
				eHandshake :=		arRTUParametryKomunikacji[utZapytanie.bUnitId].eHandshake , 
				ePhysical := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eDuplex , 
				tTimeOut := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].tTimeout , 
 
				xTrigger := 		xDriverWykonajKomunikacjeTrigger , 
				utQuery := 			utZapytanie , 
				utResponse := 		utOdpowiedz ,
 
				xError =&gt; 			xBladKomunikacji);
				
// Licznik błędów
ctuLicznikBledow(CU := ModbusMasterRTU.xError, PV := 65535);
	
// obługa akcji po zakończeniu zadania komunikacji (zapis wartości , zapis błędu itd)
	
negWykonaj(CLK := xDriverWykonajKomunikacjeTrigger);

IF negWykonaj.Q THEN
// jeżeli był błąd komunikacji wpisz go do tablicy błędów

	IF xBladKomunikacji THEN
		arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.BrakKomunikacji;
		statusbledu := ModbusMasterRTU.oStatus;
		jakiezapytanie := utZapytanie;
		arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] := _GetLongTime();
		IF utZapytaniePoprz.bFunctionCode = 0 THEN
			utZapytaniePoprz := utZapytanie;
		END_IF
		IF arRTUParametryKomunikacjiPoprz[3].udiPredkosc = 0 THEN
			arRTUParametryKomunikacjiPoprz := arRTUParametryKomunikacji;
		END_IF
	ELSE
		IF _GetLongTime() - arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] &gt; tCzasStabilnosciKomunikacji AND arStatusKomunikacji[utZapytanie.bUnitId] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa THEN	
			arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.KomunikacjaPrawidlowa;
		END_IF

// jeżeli zapytanie było żądaniem  wysłania danych

		IF utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWejscBitowych OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWyjscBitowych OR
			utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrow OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych THEN
			intZnacznikOdczytuCyklicznegoPoczatek := 0;
		
// jeżeli był wykonany rozkaz odczytu danych z cyklu "na żądanie" - DOŁOŻONO KAWAŁEK KODU DEBUGUJĄCEGO - ZATRZYMYWANIE SIĘ STEROWNIKA NA ZAREMOWANEJ LINII

			IF intOdczytZadanieTablica &lt;&gt; 0 THEN
				arDebugZapytanie[intDebugZnacznik] := utZapytanie;
				arDebugOdpowiedz[intDebugZnacznik] := utOdpowiedz;
				typDebugOdczytZapisZadanie[intDebugZnacznik] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie];				
				arDebugCzas[intDebugZnacznik] := FuGetDateAndTime();
				fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := 900, intWskaznik := intDebugZnacznik);
//				arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].pZmiennaDoOdczytu^ := utOdpowiedz.awData[0];
			END_IF

// jeżeli był wykonany rozkaz odczytu danych z cyklu "cykliczny"

			IF intOdczytCyklicznyTablica &lt;&gt; 0 THEN
				intLoopOverflow:=1;
				FOR intLoop := 1 TO intOdczytCyklicznyTablicaIlosc DO
					IF arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna &lt;&gt; null THEN
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].ltZnacznikCzasuWyslania := _GetLongTime();
					ELSE
					arOdczytCykliczny[intLoopOverflow].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intLoopOverflow].ltZnacznikCzasuWyslania := _GetLongTime();
					intLoopOverflow:=intLoopOverflow+1;
					END_IF
				END_FOR
			END_IF
		END_IF
	END_IF
	intOdczytZadanieTablica := 0;
	intOdczytCyklicznyTablica := 0;
	intOdczytCyklicznyTablicaIlosc := 0;
END_IF

</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
</project>