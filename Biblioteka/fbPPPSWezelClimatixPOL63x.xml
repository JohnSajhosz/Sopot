<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2019-10-29T12:37:19.7199586" />
  <contentHeader name="CoDeSys External Library Template" version="3.5.5.30" modificationDateTime="2019-10-29T12:36:39.3744516" organization="3S - Smart Software Solutions GmbH" author="3S - Smart Software Solutions GmbH">
    <Comment>Library project template with all possible element types, docu and a sample project structure</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="Company" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="DefaultNamespace" type="string">TMP</property>
          <property name="Description" type="string">Library project template with all possible element types, docu and a sample project structure</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">SOLWENA_Biblioteka - MASTER</property>
          <property name="Title" type="string">CoDeSys External Library Template</property>
          <property name="Version" type="version">3.5.5.30</property>
          <property name="library-category-list" type="library-category-list">Intern|CAA|Guidelines</property>
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="fbPPPSWezelClimatixPOL63x" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xSezonGrzewczyCalyRok">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tCzestotliwoscWysylaniaAlternatywnyAlgorytm">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wZaprogramowanyTypInstalacji">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Autonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Sterowanie w trybie autonomizacji</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intTrybPracyDHWAutonomizacja">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="aTemperatury">
              <type>
                <array>
                  <dimension lower="0" upper="96" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tablica pomiarów temperatur bieżącego dnia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia1Dzien">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia dzienna temperatura</xhtml>
              </documentation>
            </variable>
            <variable name="iTemperaturyIndex">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index tablicy </xhtml>
              </documentation>
            </variable>
            <variable name="aTemperaturySrednie">
              <type>
                <array>
                  <dimension lower="0" upper="2" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tablica zawierająca średnie temperatury z trzech ostatnich dni</xhtml>
              </documentation>
            </variable>
            <variable name="iTemperaturySrednieIndex">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index tablicy śrenich temperatur</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia3Dni">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia temperatura z trzech dni</xhtml>
              </documentation>
            </variable>
            <variable name="xTemperaturaSrednia3DniObliczona">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Prawda, jeśli obliczona została średnia temperatura z trzech dni</xhtml>
              </documentation>
            </variable>
          </inOutVars>
          <localVars constant="true">
            <variable name="uintTrybPracyHC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="400" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">1</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX2HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="424" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX3HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="449" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">9</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX4HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="450" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">10</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX5HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="451" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">11</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX6HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="425" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">3</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY2HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="426" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">4</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY3HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="435" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">6</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY4HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="436" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">7</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY5HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="437" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">8</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY6HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="427" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">5</xhtml>
              </documentation>
            </variable>
            <variable name="uintTrybPracyZadanieDHWAdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="800" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">12</xhtml>
              </documentation>
            </variable>
          </localVars>
          <localVars>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="xInstalacjaHC1">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Heat circuit 1 - 1-szy obwód grzewczy</xhtml>
              </documentation>
            </variable>
            <variable name="xInstalacjaDHW">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Domestic hot water - ciepła woda użytkowa</xhtml>
              </documentation>
            </variable>
            <variable name="xInstalacjaHP">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">??? - BRAK ZAPROGRAMOWANIA</xhtml>
              </documentation>
            </variable>
            <variable name="xInstalacjaHC2">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Heat circuit 2 - 2-gi obwód grzewczy - BRAK ZAPROGRAMOWANIA</xhtml>
              </documentation>
            </variable>
            <variable name="fbAutonomizacja">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wykrywanie przejścia w stan autonomizacji</xhtml>
              </documentation>
            </variable>
            <variable name="xPrzywrocDomyslne">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywrócenie nastaw krzywej grzewczej i trybów pracy (przepisanie rAutonomizacjaKrzywaGrzewcza[...] etc. do Climatixa)</xhtml>
              </documentation>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuBezpieczenstwa">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> definicja zmiennych do odczytu wartości z modbusa
klasy alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuKrytyczny">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuOstrzezenie">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuInformacyjny">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="wAlarmsWord1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">alarmy</xhtml>
              </documentation>
            </variable>
            <variable name="wAlarmsWord1Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord2Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord3Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord4">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord4Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass0">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass1">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wReczneWylaczenieInstalacji">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">odczyt	</xhtml>
              </documentation>
            </variable>
            <variable name="xReczneWylaczenieInstalacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTypInstalacji">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">0=Other,1=1 HC,2=1 HC + DHW,3=1 HC + DHW + HP,4=2 HC,5=2 HC + DHW,6=2 HC + DHW + HP,7=Free (other combination)</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZewnetrzna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">HC1
Temperatura zewnętrzna</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZewnetrzna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZewnetrzna">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaGrzaniaNastawionaHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Temperatura nastawiona zasilania</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaGrzaniaNastawionaHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Temperatura nastawiona zasilania z krzywej grzewczej</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTrybPracyHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Tryb Pracy </xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyHC1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyHC1Zaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyHC1Autonomizacja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTrybPracyHC1Ramka">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xTrybPracyHC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyHC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia	</xhtml>
              </documentation>
            </variable>
            <variable name="wTrybOperacjiHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Tryb operacji</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybOperacjiHC1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybOperacjiHC1Zaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaObwoduHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Obwód na instalację</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaObwoduHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuObwoduHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Obwód na instalację</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuObwoduHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuObwoduHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuObwoduHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuMiastoHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie wyskoiego parametru (miejskiej sieci ciepłowniczej)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuMiastoHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaBudynku">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Zasilanie przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynku">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaBudynku">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynkuZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuBudynku">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuBudynku">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuBudynku">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuBudynkuZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wSygnalZadaniaGrzaniaHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Sygnał żądanego grzania, w procentach</xhtml>
              </documentation>
            </variable>
            <variable name="rSygnalZadaniaGrzaniaHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbSygnalZadaniaGrzaniaHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rSygnalZadaniaGrzaniaHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wStopienOtwarciaZaworuMiastoHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Stopień otwarcia zaworu na powrocie wymiennika po stronie miejskiej sieci ciepłowniczej</xhtml>
              </documentation>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbStopienOtwarciaZaworuMiastoHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X2</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX2HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY2OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y2</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY2HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X3</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX3HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY3OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y3</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY3HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X4</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX4HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY4OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y4</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY4HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X5</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX5HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY5OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y5</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY5HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X6</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX6HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY6OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y6</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY6HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaGrzaniaNastawionaDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">DHW
Temperatura nastawiona zasilania</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaGrzaniaNastawionaDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTrybPracyDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Tryb Pracy</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyDHW">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyDHWZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTrybPracyDHWRamka">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xTrybPracyDHWZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyDHWZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wTrybOperacjiDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb operacji</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybOperacjiDHW">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybOperacjiDHWZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuMiastoDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie wyskoiego parametru (miejskiej sieci ciepłowniczej)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuMiastoDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaBudynekDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Zasilanie przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynekDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaBudynekDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynekDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuBudynekDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuBudynekDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuBudynekDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuBudynekDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wStopienOtwarciaZaworuMiastoDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Stopień otwarcia zaworu na powrocie wymiennika po stronie miejskiej sieci ciepłowniczej</xhtml>
              </documentation>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbStopienOtwarciaZaworuMiastoDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pozostale definicje</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="11" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="11" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rtrigPrzywrocDomyslne">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywracanie domyślnych wartości nastaw</xhtml>
              </documentation>
            </variable>
            <variable name="rtrigZapisModbus">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger zapisu danych po Modbusie</xhtml>
              </documentation>
            </variable>
            <variable name="fbTaktowanieZapisywaniaModbus">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cykliczne żądanie zapisu danych do urządzenia	</xhtml>
              </documentation>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTrybPracyZadanie">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="rAutonomizacjaKorektaTemperaturyGrzaniaZadanie">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xBrakKomunikacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zewnętrznej</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZewnetrznej">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZewnetrznejTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZewnetrznej">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduHC1Pamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zasilania obwodu HC1</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilaniaObwoduHC1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaObwoduHC1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilaniaObwoduHC1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduDHWPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zasilania obwodu DHW</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilaniaObwoduDHW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaObwoduDHWTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilaniaObwoduDHW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakOsiagnieciaTemperauryZadanejHC1">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu HC1</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakOsiagnieciaTemperauryZadanejHC1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakOsiagnieciaTemperauryZadanejHC1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakOsiagnieciaTemperauryZadanejDHW">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu DHW</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakOsiagnieciaTemperauryZadanejDHWTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakOsiagnieciaTemperauryZadanejDHW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbWschodZachod">
              <type>
                <derived name="FbCalculateSunriseSunset" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Obliczanie wschodu i zachodu słońca</xhtml>
              </documentation>
            </variable>
            <variable name="fbZegar15M">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer taktujący zapisywanie temperatury</xhtml>
              </documentation>
            </variable>
            <variable name="xObliczSrednia3Dni">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger obliczania średniej dziennej temperatury z 3 ostatnich dni</xhtml>
              </documentation>
            </variable>
            <variable name="iIloscPomiarow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ilość pomiarów dokonanych w ciągu dnia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia1DzienZaraportowana">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia dzienna temperatura zaraporotawana</xhtml>
              </documentation>
            </variable>
            <variable name="xSezonGrzewczy">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie ogrzewania</xhtml>
              </documentation>
            </variable>
            <variable name="xSezonGrzewczyZaraportowana">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie ogrzewania zaraportowane</xhtml>
              </documentation>
            </variable>
            <variable name="xBladIloscPomiarowTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zbyt mała ilość pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-09-03 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-09-06-PK: zmiana adresów rejestrów o -1
						2018-09-07-PK: przerobienie całego fb tak aby realizował układ HC1 (1-szego obiegu grzewczego) oraz/lub DHW (ciepłej wody użytkowej), wykonanie reakcji na autonomizację
						2019-01-04-AW: zmiana odczytu klasy alarmów (zmiana funkcji i adresów); odczyt rejestrów zawierających info o rodzaju alarmu
						2019-02-08-AWy: OverFlow
						2019-02-10-AWy: odczyt trybu operacji HC1 i wysyłanie do IZE, poprawa odczytywania i wysyłania temperatury zasilania, powrotu obwodu i miasta, krzywej grzewczej etc.
						2019-02-18-AWy: odczyt trybu operacji DHW i wysyłanie do IZE
						2019-05-15-AWy: - modyfikacja warunku obsługi ramki C. Było: IF sTempWartoscAtrybutu &lt;&gt; '' AND intBlokadaWykonywaniaRozkazow = 0 THEN. Jest: IF intBlokadaWykonywaniaRozkazow = 0 THEN
						2019-05-16-AWy: - modyfikacja warunku ręcznej inizjalizacji trybów pracy i krzywej grzewczej. Było: IF xAutonomizacja THEN. Jest: IF xPrzywrocDomyslne THEN.
									    - modyfikacja warunku na raportowanie. Dopisane: AND xPoInicjalizacji
									    - modyfikacja warunków na zapis po otrzymaniu ramki C. Nowy warunek: IF fnKomunikatDaneSzukajWartosci(sKomunikat,'TEMPKGHC1X5=') &lt;&gt; '' THEN etc.
						2019-05-23-AWy: dodanie przesyłania wewnętrznych numerów błędów z Climatixa (wAlarmsWord1 etc.)
						2019-06-03-AWy: załadowanie domyślnych trybów pracy i nastaw po przejściu w tryb autonomizacji
						2019-06-04-AWy: usunięcie błędów generowanych przy odczycie liczb ujemnych
						2019-07-16-AWy: zmiana typu zmiennej intTrybPracyDHWAutonomizacja z WORD na INT
						2019-08-05-AWy: wyznaczanie okresu grzewczego. Wysyłanie xSezonGrzewczy i rTemperaturaSrednia1Dzien do IZE. Przeniesie xTrybPracyAutonomizacja z VAR_INPUT do VAR
						2019-10-22-AWy: - wydłużenie czasu fbTaktowanieZapisywaniaModbus oraz wprowadzenie trigera zapisu po Modbusie
										- zmiana trigera fbTimerBrakuKomunikacji
						
Opis:					fb służy do komunikacji po Modbus RTU z węzłem ciepła na budynkach ENGIE, gdzie zainstalowano Siemens Climatix POL638.70
						Zawiera kod wykonywany w razie autonomizacji - wysyłanie zmiennych wprowadzonych poprzez EIG,
						po ustaniu Autonomizacji zostaje utrzymany stan z Autonomizacji, a układ reaguje dopiero na nowe ramki

UWAGA:					Zaprogramowano HC1 oraz DHN, nie zaprogramowane HP i HC2 
*)


//inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	IF xInstalacjaHC1 OR xInstalacjaHC2 THEN
		rTemperaturaZewnetrznaZaraportowana := rTemperaturaZewnetrzna;
	END_IF
	IF xInstalacjaHC1 THEN
		rTemperaturaGrzaniaNastawionaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaHC1;
		rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1;
		intTrybPracyHC1Zaraportowana := intTrybPracyHC1;
		intTrybOperacjiHC1 := intTrybOperacjiHC1Zaraportowana;
		rTemperaturaZasilaniaObwoduHC1Zaraportowana := rTemperaturaZasilaniaObwoduHC1;
		rTemperaturaPowrotuObwoduHC1Zaraportowana := rTemperaturaPowrotuObwoduHC1;
		rTemperaturaPowrotuMiastoHC1Zaraportowana := rTemperaturaPowrotuMiastoHC1;
		rTemperaturaZasilaniaBudynkuZaraportowana := rTemperaturaZasilaniaBudynku;
		rTemperaturaPowrotuBudynkuZaraportowana := rTemperaturaPowrotuBudynku;
		rSygnalZadaniaGrzaniaHC1Zaraportowana := rSygnalZadaniaGrzaniaHC1;
		rStopienOtwarciaZaworuMiastoHC1Zaraportowana := rStopienOtwarciaZaworuMiastoHC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1;
		xSezonGrzewczyZaraportowana := xSezonGrzewczy;
		rTemperaturaSrednia1DzienZaraportowana := rTemperaturaSrednia1Dzien;
	END_IF
	IF xInstalacjaDHW THEN
		rTemperaturaGrzaniaNastawionaDHWZaraportowana := rTemperaturaGrzaniaNastawionaDHW;
		intTrybPracyDHWZaraportowana := intTrybPracyDHW;
		rTemperaturaPowrotuMiastoDHWZaraportowana := rTemperaturaPowrotuMiastoDHW;
		rTemperaturaZasilaniaBudynekDHWZaraportowana := rTemperaturaZasilaniaBudynekDHW;
		rTemperaturaPowrotuBudynekDHWZaraportowana := rTemperaturaPowrotuBudynekDHW;
		rStopienOtwarciaZaworuMiastoDHWZaraportowana := rStopienOtwarciaZaworuMiastoDHW;
		intTrybOperacjiDHWZaraportowana := intTrybOperacjiDHW;
	END_IF
	wAlarmsWord1Zaraportowana := wAlarmsWord1;
	wAlarmsWord2Zaraportowana := wAlarmsWord2;
	wAlarmsWord3Zaraportowana := wAlarmsWord3;
	wAlarmsWord4Zaraportowana := wAlarmsWord4;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

// Deklaracja rejestrów Modbusa
IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	
	//wybrana instalacja na budynku
	CASE wZaprogramowanyTypInstalacji OF
		0:	xInstalacjaHC1 := FALSE;
			xInstalacjaDHW := FALSE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := FALSE;
		1:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := FALSE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := FALSE;
		2:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := FALSE;
		3:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := TRUE;
			xInstalacjaHC2 := FALSE;
		4:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := FALSE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := TRUE;
		5:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := TRUE;
		6:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := TRUE;
			xInstalacjaHC2 := TRUE;
	END_CASE
	
//deklaracja rejestrow do odczytu
	// Rejestry zawierające informację alarmach
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 18;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 19;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 20;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 21;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord4);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 22;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass0);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 23;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 24;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 25;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	// Flagi typów alarmów (nie ma pewności, że działa - najprawdopodobniej w dokumentacji jest błąd i typy alarmów to nie inputy a coile - do zweryfikowania) - CAŁOŚĆ DO PRZETESTOWANIA
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 0;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuBezpieczenstwa);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 1;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuKrytyczny);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 2;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuOstrzezenie);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 3;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuInformacyjny);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	//input register
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wReczneWylaczenieInstalacji);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 9;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTypInstalacji);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 49;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZewnetrzna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaBudynku);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuBudynku);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 449;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaObwoduHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 450;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuObwoduHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 400;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracyHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 401;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybOperacjiHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 419;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaGrzaniaNastawionaHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
		
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 420;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF

	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 451;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuMiastoHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 474;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wSygnalZadaniaGrzaniaHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 489;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStopienOtwarciaZaworuMiastoHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 800;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracyDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 801;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybOperacjiDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 819;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaGrzaniaNastawionaDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 849;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaBudynekDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 850;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuBudynekDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 854;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuMiastoDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 889;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStopienOtwarciaZaworuMiastoDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	//holding register	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 424;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 425;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 426;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY2OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 427;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY6OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 435;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY3OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 436;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY4OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 437;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY5OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 449;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 450;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 451;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
END_IF

//obsluga komunikatu przychodzacego z IZE

IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
			//sprawdzanie atrybutow dedykowanych dla urzadzenia - przygotowywanie do zapisu do Modbusa
			IF intBlokadaWykonywaniaRozkazow = 0 THEN
				// Tryb pracy HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYBNASHC1=',
					rAtrybutWartosc := rTrybPracyHC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyHC1Zapisz);	
				// Temperatura punktu X2 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X2=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz);
				// Temperatura punktu X3 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X3=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz);
				// Temperatura punktu X4 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X4=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz);
				// Temperatura punktu X5 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X5=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz);
				// Temperatura punktu X6 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X6=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz);					
				// Temperatura punktu Y2 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y2=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz);				
				// Temperatura punktu Y3 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y3=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz);				
				// Temperatura punktu Y4 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y4=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz);				
				// Temperatura punktu Y5 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y5=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz);				
				// Temperatura punktu Y6 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y6=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz);	
				// Tryb pracy DHW
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYBNASDHW=',
					rAtrybutWartosc := rTrybPracyDHWZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyDHWZapisz);	
			END_IF
		END_IF
				
		//raportowanie typu A na potwierdzanie stanow zadanych przez C
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
		
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF xInstalacjaHC1 THEN
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZEW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEW=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrzna) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNASHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNASKGHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASKGHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBNASHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASHC1=' , sWartosc := INT_TO_STRING(intTrybPracyHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBOPHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPHC1=' , sWartosc := INT_TO_STRING(intTrybOperacjiHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASOHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaObwoduHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWOHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuObwoduHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWMHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASB=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynku) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWB=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynku) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERGRZHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERGRZHC1=' , sWartosc := REAL_TO_STRING(rSygnalZadaniaGrzaniaHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERZAWMHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMHC1=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X4=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X5=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X6=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY2HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY3HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y4=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY4HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y5=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY5HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y6=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY6HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'SEZONGRZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'SEZONGRZ=' , sWartosc := BOOL_TO_STRING(xSezonGrzewczy) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPSR1DZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPSR1DZ=' , sWartosc := REAL_TO_STRING(rTemperaturaSrednia1Dzien + 273.15) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF				
			END_IF
			IF xInstalacjaDHW THEN
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNASDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBNASDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASDHW=' , sWartosc := INT_TO_STRING(intTrybPracyDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBOPDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPDHW=' , sWartosc := INT_TO_STRING(intTrybOperacjiDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWMDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASBDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynekDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWBDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynekDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERZAWMDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMDHW=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
			END_IF
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 11 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Przywrócenie wartości domyślnych nastaw krzywej grzewczej i trybów pracy w przypadku restartu sterownika lub przejścia w stan autonomizacji (brak komunikacji z IZE)
rtrigPrzywrocDomyslne(CLK := xAutonomizacja);
IF rtrigPrzywrocDomyslne.Q THEN	
	IF intTrybPracyHC1 &lt;&gt; intTrybPracyHC1Autonomizacja THEN
		rTrybPracyHC1Zapis := INT_TO_REAL(intTrybPracyHC1Autonomizacja);
		xTrybPracyHC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz := TRUE;
	END_IF
	IF intTrybPracyDHW &lt;&gt; intTrybPracyDHWAutonomizacja THEN
		rTrybPracyDHWZapis := INT_TO_REAL(intTrybPracyDHWAutonomizacja);
		xTrybPracyDHWZapisz := TRUE;
	END_IF
END_IF	

// Trigger zapisu po Modbusie
rtrigZapisModbus (CLK := 	xTrybPracyHC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz OR
							xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz OR xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz OR 
							xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz OR xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz OR xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz OR
							xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz OR xTrybPracyDHWZapisz);

// Taktowanie zapisywania po Modbusie
fbTaktowanieZapisywaniaModbus(IN := NOT fbTaktowanieZapisywaniaModbus.Q, PT := T#180S);
				
// Zapisywanie trybu pracy HC1 do pamięci urządzenia
IF xTrybPracyHC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintTrybPracyHC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTrybPracyHC1Zapis),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF intTrybPracyHC1 = REAL_TO_INT(rTrybPracyHC1Zapis) THEN					
		xTrybPracyHC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X2 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX2HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X3 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX3HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X4 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX4HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X5 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX5HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X6 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX6HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y2 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY2HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y3 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY3HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y4 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY4HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y5 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY5HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y6 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY6HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz := FALSE;
	END_IF				
END_IF
// Zapisywanie trybu pracy DHW do pamięci urządzenia
IF xTrybPracyDHWZapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintTrybPracyZadanieDHWAdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTrybPracyDHWZapis),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF intTrybPracyDHW = REAL_TO_INT(rTrybPracyDHWZapis) THEN					
		xTrybPracyDHWZapisz := FALSE;
	END_IF
END_IF

// Wyznaczanie okresu grzewczego
fbZegar15M(IN := NOT fbZegar15M.Q AND NOT xBladBrakZmianyTemperaturyZewnetrznej, PT := T#15M);

	// Obliczenie wschodu i zachodu słońca
fbWschodZachod(dtUTC_Time := WagoAppTime.FuGetDateAndTime(),
	rTimeZone := 0,
	xDST := FALSE,
	rLatitude := 54.441944,
	rLongitude := 18.559722);

	// Zapisywanie tempratury z 15-minutowym okresem, oraz obliczanie średniej
IF fbWschodZachod.dtUTC_Time &gt; fbWschodZachod.dtSunrise AND fbWschodZachod.dtUTC_Time &lt; fbWschodZachod.dtSunset THEN
	IF fbZegar15M.Q OR xPierwszySkan THEN
		aTemperatury[iTemperaturyIndex] := WORD_TO_REAL(wTemperaturaZewnetrzna) / 10;
		iTemperaturyIndex := iTemperaturyIndex + 1;
	END_IF	
	xObliczSrednia3Dni := TRUE;
ELSE 
	// Obliczanie średniej temperatury dziennej
	IF iTemperaturyIndex &gt;= 40 THEN		// Oblicz średnią temperaturę tylko, jeśli zebranych zostało przynajmniej 40 próbek
		rTemperaturaSrednia1Dzien := 0;
		iIloscPomiarow := iTemperaturyIndex;
		FOR iTemperaturyIndex := 0 TO iIloscPomiarow BY 1 DO  
			rTemperaturaSrednia1Dzien := rTemperaturaSrednia1Dzien + aTemperatury[iTemperaturyIndex];
		END_FOR
		rTemperaturaSrednia1Dzien := rTemperaturaSrednia1Dzien / iTemperaturyIndex;
		xBladIloscPomiarowTemperatury := FALSE;
	ELSE
		rTemperaturaSrednia1Dzien := 15;
		xBladIloscPomiarowTemperatury := TRUE;
	END_IF
	// Obliczanie średniej z trzech dni
	IF xObliczSrednia3Dni THEN
		aTemperaturySrednie[iTemperaturySrednieIndex] := rTemperaturaSrednia1Dzien;
		iTemperaturySrednieIndex := iTemperaturySrednieIndex + 1;
		IF iTemperaturySrednieIndex = 3 THEN 
			iTemperaturySrednieIndex := 0;
			xTemperaturaSrednia3DniObliczona := TRUE;
		END_IF
		rTemperaturaSrednia3Dni := (aTemperaturySrednie[0] + aTemperaturySrednie[1] + aTemperaturySrednie[2]) / 3; 
		xObliczSrednia3Dni := FALSE;	
	END_IF
	iTemperaturyIndex := 0;
END_IF

	// Sprawdzenie warunku na włączenie ogrzewania (pomiędzy 15 września a 15 maja i/lub średnia temperatura jest poniżej 15 stopni)
IF  ((fbWschodZachod._rDay &gt;= 15 AND fbWschodZachod._rMonth = 9) OR (fbWschodZachod._rMonth &gt; 9 OR fbWschodZachod._rMonth &lt; 5) OR (fbWschodZachod._rDay &lt;= 15 AND fbWschodZachod._rMonth = 5)) OR 
	(rTemperaturaSrednia3Dni &lt; 15 AND xTemperaturaSrednia3DniObliczona) OR xSezonGrzewczyCalyRok THEN
	xSezonGrzewczy := TRUE;
	intTrybPracyHC1Autonomizacja := enumPPPSWezelClimatixPOL63xTrybPracy.Komfort;
ELSE
	xSezonGrzewczy := FALSE;
	intTrybPracyHC1Autonomizacja := enumPPPSWezelClimatixPOL63xTrybPracy.OchronaBudynku;
END_IF

// dokonywanie obliczeń
(*
xOdczytanaKlasaAlarmuBezpieczenstwa := WORD_TO_BOOL(wOdczytanaKlasaAlarmuBezpieczenstwa);
xOdczytanaKlasaAlarmuKrytyczny := WORD_TO_BOOL(wOdczytanaKlasaAlarmuKrytyczny);
xOdczytanaKlasaAlarmuOstrzezenie := WORD_TO_BOOL(wOdczytanaKlasaAlarmuOstrzezenie);
xOdczytanaKlasaAlarmuInformacyjny := WORD_TO_BOOL(wOdczytanaKlasaAlarmuInformacyjny);
*)
xReczneWylaczenieInstalacji := WORD_TO_BOOL(wReczneWylaczenieInstalacji);

IF xInstalacjaHC1 OR xInstalacjaHC2 THEN
	fbTemperaturaZewnetrzna(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZewnetrzna),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZewnetrznaZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZewnetrzna);
END_IF

IF xInstalacjaHC1 THEN							
	fbTemperaturaGrzaniaNastawionaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaHC1);
						
	fbTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaHC1);
	
	IF xReczneWylaczenieInstalacji THEN
		intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.ReczneWylaczenie;
	ELSE
		IF wTrybPracyHC1 = 0 THEN
			intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.Auto;
		ELSE
			IF wTrybPracyHC1 = 1 THEN
				intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.OchronaBudynku;
			ELSE
				IF wTrybPracyHC1 = 2 THEN
					intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.Ekonomiczny;
				ELSE
					IF wTrybPracyHC1 = 3 THEN
						intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.Komfort;
					END_IF
				END_IF
			END_IF
		END_IF
	END_IF
					
	fbTemperaturaGrzaniaNastawionaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaHC1);

	fbTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1);
								
	fbTemperaturaZasilaniaObwoduHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaObwoduHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaObwoduHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaObwoduHC1);
									
	fbTemperaturaPowrotuObwoduHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuObwoduHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuObwoduHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuObwoduHC1);
									
	fbTemperaturaPowrotuMiastoHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuMiastoHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuMiastoHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuMiastoHC1);
									
	fbTemperaturaZasilaniaBudynku(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaBudynku),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaBudynkuZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaBudynku);
									
	fbTemperaturaPowrotuBudynku(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuBudynku),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuBudynkuZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuBudynku);
									
	fbSygnalZadaniaGrzaniaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wSygnalZadaniaGrzaniaHC1),
									rDeadband := 0.05,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.01,
									rWynikOffset := 0.0,
									rWartoscWejsciowaZaraportowana := rSygnalZadaniaGrzaniaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rSygnalZadaniaGrzaniaHC1);
									
	fbStopienOtwarciaZaworuMiastoHC1(	rWartoscWejsciowa := WORD_TO_REAL(wStopienOtwarciaZaworuMiastoHC1),
									rDeadband := 0.05,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.01,
									rWynikOffset := 0.0,
									rWartoscWejsciowaZaraportowana := rStopienOtwarciaZaworuMiastoHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rStopienOtwarciaZaworuMiastoHC1);
									
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1);
	END_IF		
	fbKrzywaGrzewczaTemperaturyZewnetrznejX2HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY2HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY2OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1);
	
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1);
	END_IF								
	fbKrzywaGrzewczaTemperaturyZewnetrznejX3HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY3HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY3OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1);
	
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1);
	END_IF												
	fbKrzywaGrzewczaTemperaturyZewnetrznejX4HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY4HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY4OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1);
	
		
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1);
	END_IF										
	fbKrzywaGrzewczaTemperaturyZewnetrznejX5HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY5HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY5OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1);
	
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1);
	END_IF									
	fbKrzywaGrzewczaTemperaturyZewnetrznejX6HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY6HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY6OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1);


	intTrybOperacjiHC1 := WORD_TO_INT(wTrybOperacjiHC1);
END_IF

IF xInstalacjaDHW THEN
	fbTemperaturaGrzaniaNastawionaDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaDHW);
									
	IF xReczneWylaczenieInstalacji THEN
		intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.ReczneWylaczenie;
	ELSE
		IF wTrybPracyDHW = 0 THEN
			intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.Auto;
		ELSE
			IF wTrybPracyDHW = 1 THEN
				intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.OchronaBudynku;
			ELSE
				IF wTrybPracyDHW = 2 THEN
					intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.Ekonomiczny;
				ELSE
					IF wTrybPracyDHW = 3 THEN
						intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.Komfort;
					END_IF
				END_IF
			END_IF
		END_IF
	END_IF
					
	fbTemperaturaPowrotuMiastoDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuMiastoDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuMiastoDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuMiastoDHW);
									
	fbTemperaturaZasilaniaBudynekDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaBudynekDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaBudynekDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaBudynekDHW);
									
	fbTemperaturaPowrotuBudynekDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuBudynekDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuBudynekDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuBudynekDHW);
									
	fbStopienOtwarciaZaworuMiastoDHW(	rWartoscWejsciowa := WORD_TO_REAL(wStopienOtwarciaZaworuMiastoDHW),
									rDeadband := 0.05,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.01,
									rWynikOffset := 0.0,
									rWartoscWejsciowaZaraportowana := rStopienOtwarciaZaworuMiastoDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rStopienOtwarciaZaworuMiastoDHW);
									
	intTrybOperacjiDHW := WORD_TO_INT(wTrybOperacjiDHW);
END_IF


//raportowanie
IF (intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR rTemperaturaZewnetrzna &lt;&gt; rTemperaturaZewnetrznaZaraportowana OR rTemperaturaGrzaniaNastawionaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaHC1Zaraportowana
OR intTrybPracyHC1 &lt;&gt; intTrybPracyHC1Zaraportowana OR rTemperaturaZasilaniaObwoduHC1 &lt;&gt; rTemperaturaZasilaniaObwoduHC1Zaraportowana OR rTemperaturaPowrotuObwoduHC1 &lt;&gt; rTemperaturaPowrotuObwoduHC1Zaraportowana
OR rTemperaturaPowrotuMiastoHC1 &lt;&gt; rTemperaturaPowrotuMiastoHC1Zaraportowana OR rTemperaturaZasilaniaBudynku &lt;&gt; rTemperaturaZasilaniaBudynkuZaraportowana OR rTemperaturaPowrotuBudynku &lt;&gt; rTemperaturaPowrotuBudynkuZaraportowana
OR rSygnalZadaniaGrzaniaHC1 &lt;&gt; rSygnalZadaniaGrzaniaHC1Zaraportowana OR rStopienOtwarciaZaworuMiastoHC1 &lt;&gt; rStopienOtwarciaZaworuMiastoHC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana
OR rTemperaturaGrzaniaNastawionaDHW &lt;&gt; rTemperaturaGrzaniaNastawionaDHWZaraportowana OR intTrybPracyDHW &lt;&gt; intTrybPracyDHWZaraportowana OR rTemperaturaPowrotuMiastoDHW &lt;&gt; rTemperaturaPowrotuMiastoDHWZaraportowana
OR rTemperaturaZasilaniaBudynekDHW &lt;&gt; rTemperaturaZasilaniaBudynekDHWZaraportowana OR rTemperaturaPowrotuBudynekDHW &lt;&gt; rTemperaturaPowrotuBudynekDHWZaraportowana OR rStopienOtwarciaZaworuMiastoDHW &lt;&gt; rStopienOtwarciaZaworuMiastoDHWZaraportowana 
OR intTrybOperacjiHC1 &lt;&gt; intTrybOperacjiHC1Zaraportowana OR rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana OR intTrybOperacjiDHW &lt;&gt; intTrybOperacjiDHWZaraportowana
OR intTrybOperacjiDHW &lt;&gt; intTrybOperacjiDHWZaraportowana OR wAlarmsWord1 &lt;&gt; wAlarmsWord1Zaraportowana OR wAlarmsWord2 &lt;&gt; wAlarmsWord2Zaraportowana OR wAlarmsWord3 &lt;&gt; wAlarmsWord3Zaraportowana
OR wAlarmsWord4 &lt;&gt; wAlarmsWord4Zaraportowana OR xSezonGrzewczy &lt;&gt; xSezonGrzewczyZaraportowana OR rTemperaturaSrednia1Dzien &lt;&gt; rTemperaturaSrednia1DzienZaraportowana) 
AND	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF	
	END_IF	
	IF wAlarmsWord1 &lt;&gt; wAlarmsWord1Zaraportowana THEN
	wAlarmsWord1Zaraportowana := wAlarmsWord1;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD1=' , sWartosc := WORD_TO_STRING(wAlarmsWord1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF wAlarmsWord2 &lt;&gt; wAlarmsWord2Zaraportowana THEN
	wAlarmsWord2Zaraportowana := wAlarmsWord2;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD2=' , sWartosc := WORD_TO_STRING(wAlarmsWord2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF wAlarmsWord3 &lt;&gt; wAlarmsWord3Zaraportowana THEN
	wAlarmsWord3Zaraportowana := wAlarmsWord3;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD3=' , sWartosc := WORD_TO_STRING(wAlarmsWord3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF wAlarmsWord4 &lt;&gt; wAlarmsWord4Zaraportowana THEN
	wAlarmsWord4Zaraportowana := wAlarmsWord4;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD4=' , sWartosc := WORD_TO_STRING(wAlarmsWord4) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF xInstalacjaHC1 OR xInstalacjaHC2 THEN
		IF rTemperaturaZewnetrzna &lt;&gt; rTemperaturaZewnetrznaZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZewnetrznaZaraportowana := rTemperaturaZewnetrzna;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEW=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrzna) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
	END_IF
	IF xInstalacjaHC1 THEN
		IF rTemperaturaGrzaniaNastawionaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaGrzaniaNastawionaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASKGHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybPracyHC1 &lt;&gt; intTrybPracyHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybPracyHC1Zaraportowana := intTrybPracyHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASHC1=' , sWartosc := INT_TO_STRING(intTrybPracyHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybOperacjiHC1 &lt;&gt; intTrybOperacjiHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybOperacjiHC1Zaraportowana := intTrybOperacjiHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPHC1=' , sWartosc := INT_TO_STRING(intTrybOperacjiHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaZasilaniaObwoduHC1 &lt;&gt; rTemperaturaZasilaniaObwoduHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZasilaniaObwoduHC1Zaraportowana := rTemperaturaZasilaniaObwoduHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaObwoduHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuObwoduHC1 &lt;&gt; rTemperaturaPowrotuObwoduHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuObwoduHC1Zaraportowana := rTemperaturaPowrotuObwoduHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuObwoduHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuMiastoHC1 &lt;&gt; rTemperaturaPowrotuMiastoHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuMiastoHC1Zaraportowana := rTemperaturaPowrotuMiastoHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaZasilaniaBudynku &lt;&gt; rTemperaturaZasilaniaBudynkuZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZasilaniaBudynkuZaraportowana := rTemperaturaZasilaniaBudynku;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASB=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynku) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuBudynku &lt;&gt; rTemperaturaPowrotuBudynkuZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuBudynkuZaraportowana := rTemperaturaPowrotuBudynku;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWB=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynku) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rSygnalZadaniaGrzaniaHC1 &lt;&gt; rSygnalZadaniaGrzaniaHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rSygnalZadaniaGrzaniaHC1Zaraportowana := rSygnalZadaniaGrzaniaHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERGRZHC1=' , sWartosc := REAL_TO_STRING(rSygnalZadaniaGrzaniaHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rStopienOtwarciaZaworuMiastoHC1 &lt;&gt; rStopienOtwarciaZaworuMiastoHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rStopienOtwarciaZaworuMiastoHC1Zaraportowana := rStopienOtwarciaZaworuMiastoHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMHC1=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY2HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY3HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY4HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY5HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY6HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF xSezonGrzewczy &lt;&gt; xSezonGrzewczyZaraportowana THEN
			xSezonGrzewczyZaraportowana := xSezonGrzewczy;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'SEZONGRZ=' , sWartosc := BOOL_TO_STRING(xSezonGrzewczy) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF	
		END_IF	
		IF rTemperaturaSrednia1Dzien &lt;&gt; rTemperaturaSrednia1DzienZaraportowana THEN
			rTemperaturaSrednia1DzienZaraportowana := rTemperaturaSrednia1Dzien;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPSR1DZ=' , sWartosc := REAL_TO_STRING(rTemperaturaSrednia1Dzien + 273.15) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF	
		END_IF	
	END_IF
	IF xInstalacjaDHW THEN
		IF rTemperaturaGrzaniaNastawionaDHW &lt;&gt; rTemperaturaGrzaniaNastawionaDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaGrzaniaNastawionaDHWZaraportowana := rTemperaturaGrzaniaNastawionaDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybPracyDHW &lt;&gt; intTrybPracyDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybPracyDHWZaraportowana := intTrybPracyDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASDHW=' , sWartosc := INT_TO_STRING(intTrybPracyDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybOperacjiDHW &lt;&gt; intTrybOperacjiDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybOperacjiDHWZaraportowana := intTrybOperacjiDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPDHW=' , sWartosc := INT_TO_STRING(intTrybOperacjiDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuMiastoDHW &lt;&gt; rTemperaturaPowrotuMiastoDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuMiastoDHWZaraportowana := rTemperaturaPowrotuMiastoDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaZasilaniaBudynekDHW &lt;&gt; rTemperaturaZasilaniaBudynekDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZasilaniaBudynekDHWZaraportowana := rTemperaturaZasilaniaBudynekDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynekDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuBudynekDHW &lt;&gt; rTemperaturaPowrotuBudynekDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuBudynekDHWZaraportowana := rTemperaturaPowrotuBudynekDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynekDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rStopienOtwarciaZaworuMiastoDHW &lt;&gt; rStopienOtwarciaZaworuMiastoDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rStopienOtwarciaZaworuMiastoDHWZaraportowana := rStopienOtwarciaZaworuMiastoDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMDHW=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Obsługa alarmów do węzła ciepła
// Alarm komunikacji
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji;
	xBrakKomunikacji := TRUE;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji , intNumer := enumPPPSWezelClimatixPOL63xError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji;
	xBrakKomunikacji := FALSE;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji , intNumer := enumPPPSWezelClimatixPOL63xError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm ogólny w klasie bezpieczeństwa
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xOdczytanaKlasaAlarmuBezpieczenstwa AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xOdczytanaKlasaAlarmuBezpieczenstwa AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm ogólny w klasie krytycznej
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xOdczytanaKlasaAlarmuKrytyczny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xOdczytanaKlasaAlarmuKrytyczny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm ogólny w klasie ostrzeżenia
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xOdczytanaKlasaAlarmuOstrzezenie AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xOdczytanaKlasaAlarmuOstrzezenie AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika zewnętrzengo
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika obwodu HC1
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika obwodu DHW
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm braku osiągnięcia zadanej temperatury zasilania obwodu HC1
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm braku osiągnięcia zadanej temperatury zasilania obwodu DHW
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm braku wymaganej ilości pomiarów do obliczenia średniej temperatury
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladIloscPomiarowTemperatury THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury] := enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury , intNumer := enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury zewnętrznej działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF xInstalacjaHC1 THEN
	IF rTemperaturaZewnetrznaPamiec = rTemperaturaZewnetrzna THEN
		xBrakZmianyTemperaturyZewnetrznej := TRUE;
	ELSE
		xBrakZmianyTemperaturyZewnetrznej := FALSE;	
	END_IF
	fbBrakZmianyTemperaturyZewnetrznejTimer(IN := xBrakZmianyTemperaturyZewnetrznej, PT := T#12H);
	rTemperaturaZewnetrznaPamiec := rTemperaturaZewnetrzna;
	IF fbBrakZmianyTemperaturyZewnetrznejTimer.Q THEN
		xBladBrakZmianyTemperaturyZewnetrznej := TRUE;
	ELSE
		xBladBrakZmianyTemperaturyZewnetrznej := FALSE;
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury zasilania obwodu HC1 działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF xInstalacjaHC1 THEN
	IF rTemperaturaZasilaniaObwoduHC1Pamiec = rTemperaturaZasilaniaObwoduHC1 THEN
		xBrakZmianyTemperaturyZasilaniaObwoduHC1 := TRUE;
	ELSE
		xBrakZmianyTemperaturyZasilaniaObwoduHC1 := FALSE;	
	END_IF
	fbBrakZmianyTemperaturyZasilaniaObwoduHC1Timer(IN := xBrakZmianyTemperaturyZasilaniaObwoduHC1, PT := T#12H);
	rTemperaturaZasilaniaObwoduHC1Pamiec := rTemperaturaZasilaniaObwoduHC1;
	IF fbBrakZmianyTemperaturyZasilaniaObwoduHC1Timer.Q THEN
		xBladBrakZmianyTemperaturyZasilaniaObwoduHC1 := TRUE;
	ELSE
		xBladBrakZmianyTemperaturyZasilaniaObwoduHC1 := FALSE;
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury zasilania obwodu DHW działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF xInstalacjaDHW THEN
	IF rTemperaturaZasilaniaObwoduDHWPamiec = rTemperaturaZasilaniaBudynekDHW THEN
		xBrakZmianyTemperaturyZasilaniaObwoduDHW := TRUE;
	ELSE
		xBrakZmianyTemperaturyZasilaniaObwoduDHW := FALSE;	
	END_IF
	fbBrakZmianyTemperaturyZasilaniaObwoduDHWTimer(IN := xBrakZmianyTemperaturyZasilaniaObwoduDHW, PT := T#12H);
	rTemperaturaZasilaniaObwoduDHWPamiec := rTemperaturaZasilaniaBudynekDHW;
	IF fbBrakZmianyTemperaturyZasilaniaObwoduDHWTimer.Q THEN
		xBladBrakZmianyTemperaturyZasilaniaObwoduDHW := TRUE;
	ELSE
		xBladBrakZmianyTemperaturyZasilaniaObwoduDHW := FALSE;
	END_IF
END_IF

// Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu HC1
IF xInstalacjaHC1 THEN
	IF rTemperaturaZasilaniaObwoduHC1 &lt; rTemperaturaGrzaniaNastawionaHC1 THEN
		xBrakOsiagnieciaTemperauryZadanejHC1 := TRUE;
	ELSE
		xBrakOsiagnieciaTemperauryZadanejHC1 := FALSE;	
	END_IF
	fbBrakOsiagnieciaTemperauryZadanejHC1Timer(IN := xBrakOsiagnieciaTemperauryZadanejHC1, PT := T#3H);
	IF fbBrakOsiagnieciaTemperauryZadanejHC1Timer.Q THEN
		xBladBrakOsiagnieciaTemperauryZadanejHC1 := TRUE;
	ELSE
		xBladBrakOsiagnieciaTemperauryZadanejHC1 := FALSE;
	END_IF
END_IF

// Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu DHW
IF xInstalacjaDHW THEN
	IF rTemperaturaZasilaniaBudynekDHW &lt; rTemperaturaGrzaniaNastawionaDHW THEN
		xBrakOsiagnieciaTemperauryZadanejDHW := TRUE;
	ELSE
		xBrakOsiagnieciaTemperauryZadanejDHW := FALSE;	
	END_IF
	fbBrakOsiagnieciaTemperauryZadanejDHWTimer(IN := xBrakOsiagnieciaTemperauryZadanejDHW, PT := T#3H);
	IF fbBrakOsiagnieciaTemperauryZadanejDHWTimer.Q THEN
		xBladBrakOsiagnieciaTemperauryZadanejDHW := TRUE;
	ELSE
		xBladBrakOsiagnieciaTemperauryZadanejDHW := FALSE;
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
</project>