<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2019-10-29T12:37:19.6631106" />
  <contentHeader name="CoDeSys External Library Template" version="3.5.5.30" modificationDateTime="2019-10-29T12:36:39.3744516" organization="3S - Smart Software Solutions GmbH" author="3S - Smart Software Solutions GmbH">
    <Comment>Library project template with all possible element types, docu and a sample project structure</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="Company" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="DefaultNamespace" type="string">TMP</property>
          <property name="Description" type="string">Library project template with all possible element types, docu and a sample project structure</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">SOLWENA_Biblioteka - MASTER</property>
          <property name="Title" type="string">CoDeSys External Library Template</property>
          <property name="Version" type="version">3.5.5.30</property>
          <property name="library-category-list" type="library-category-list">Intern|CAA|Guidelines</property>
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="fbPPPSDestratyfikatorTBOX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje zmiennych do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje do komunikacji z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Parametry	</xhtml>
              </documentation>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wSoftwareVersion">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTrybPracy">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 - wyłączony; 2 - auto (depend), 3 - auto (independ), 4 - manual</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracy">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTrybPracyZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPredkoscWentylatora">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 - wyłączony; 1..33 - I bieg; 34..66 - drugi bieg; 67..100 - trzeci bieg</xhtml>
              </documentation>
            </variable>
            <variable name="rPredkoscWentylatora">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPredkoscWentylatoraZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPredkoscWentylatora">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="wTemperaturaReferencyjna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 50..450 (10 = 1 st. C)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaReferencyjna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaReferencyjnaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaRzeczywista">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> -600..600 (10 = 1 st. C)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaRzeczywista">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaRzeczywistaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaRzeczywista">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaRzeczywistaPamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTemperaturaReferencyjnaTrybManualny">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 50..450 (10 = 1 st. C)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaReferencyjnaTrybManualny">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaReferencyjnaTrybManualnyZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Jan Bartczak, 2019-01-10 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-01-28-AWy: Odczyt rejestrów temperatury ref., zadanej, prędkości wentylatora etc. Komunikacja z IZE.
						2019-02-06-AWy: Alarm braku komunikacji
						2019-05-16-AWy: Modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji 
						
Opis:					fb służy do komunikacji z zadajnikiem destratyfikatorów - T-BOX'em
				
*)


// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rTrybPracyZaraportowana := rTrybPracy;
	rPredkoscWentylatoraZaraportowana := rPredkoscWentylatora;
	rTemperaturaReferencyjnaZaraportowana := rTemperaturaReferencyjna;
	rTemperaturaRzeczywistaZaraportowana := rTemperaturaRzeczywista;
	rTemperaturaReferencyjnaTrybManualnyZaraportowana := rTemperaturaReferencyjnaTrybManualny;
	xPoInicjalizacji := TRUE;
END_IF
//

IF xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF
//

IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 3;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wSoftwareVersion);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 5;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaRzeczywista);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1004;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracy);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1005;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPredkoscWentylatora);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1006;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaReferencyjna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1007;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaReferencyjnaTrybManualny);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;					
END_IF

// Przeliczenie zmiennych
rTrybPracy := WORD_TO_REAL(wTrybPracy);

fbPredkoscWentylatora(	rWartoscWejsciowa := WORD_TO_REAL(wPredkoscWentylatora),
						rDeadband := 5,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 1,
						rWynikOffset := 0,
						rWartoscWejsciowaZaraportowana := rPredkoscWentylatoraZaraportowana,
						rWartoscWyjsciowa =&gt; rPredkoscWentylatora);
						
rTemperaturaReferencyjna := WORD_TO_REAL(wTemperaturaReferencyjna)*0.1 + 273.15;

fbTemperaturaRzeczywista(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaRzeczywista),
							rDeadband := 0.5,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 0.1,
							rWynikOffset := 273.15,
							rWartoscWejsciowaZaraportowana := rTemperaturaRzeczywistaZaraportowana,
							rWartoscWyjsciowa =&gt; rTemperaturaRzeczywista);
							
rTemperaturaReferencyjnaTrybManualny := WORD_TO_REAL(wTemperaturaReferencyjnaTrybManualny)*0.1 + 273.15;
//					
						
						
// Obsluga komunikatu przychodzacego z IZE
IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		// Rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
		END_IF
				
		// Zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBPRACY=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBPRACY=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'PREDKOSCWENT=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PREDKOSCWENT=' , sWartosc := REAL_TO_STRING(rPredkoscWentylatora) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPREF=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREF=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPRZECZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPRZECZ=' , sWartosc := REAL_TO_STRING(rTemperaturaRzeczywista) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPREFTRYBMAN=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREFTRYBMAN=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjnaTrybManualny) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			// Pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 10 BY 1 DO
					// Raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF		
		// Raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Raportowanie typu M do IZE wartosci odczytanych z Modbusa	
IF 	(intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR rTrybPracy &lt;&gt; rTrybPracyZaraportowana OR rPredkoscWentylatora &lt;&gt; rPredkoscWentylatoraZaraportowana OR
	rTemperaturaReferencyjna &lt;&gt; rTemperaturaReferencyjnaZaraportowana OR rTemperaturaRzeczywista &lt;&gt; rTemperaturaRzeczywistaZaraportowana OR 
	rTemperaturaReferencyjnaTrybManualny &lt;&gt; rTemperaturaReferencyjnaTrybManualnyZaraportowana)AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN 
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
	END_IF	
	IF xOverFlow = TRUE THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
					sTypKomunikatu := 'M' ,
					sMnemonik := sMnemonik ,
					sMACAdres := sMACAdres ,
					sIDNadawcy := sIdInstancji ,
					sIDOdbiorcy := sIdAplikacji ,
					sDaneZapasowe := sDaneZapasowe ,
					sDane := sDane ,
					arTablicaKomunikatow := arTablicaKomunikatow ,
					intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
					intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
					sWyslanyKomunikat := sWyslanyKomunikatDummy);
		sDane := '';
	END_IF
	// Tryb pracy
	IF rTrybPracy &lt;&gt; rTrybPracyZaraportowana THEN
		rTrybPracyZaraportowana := rTrybPracy;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBPRACY=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Prędkość wentylatora
	IF rPredkoscWentylatora &lt;&gt; rPredkoscWentylatoraZaraportowana THEN
		rPredkoscWentylatoraZaraportowana := rPredkoscWentylatora;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PREDKOSCWENT=' , sWartosc := REAL_TO_STRING(rPredkoscWentylatora) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura referencyjna
	IF rTemperaturaReferencyjna &lt;&gt; rTemperaturaReferencyjnaZaraportowana THEN
		rTemperaturaReferencyjnaZaraportowana := rTemperaturaReferencyjna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREF=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura rzeczywista
	IF rTemperaturaRzeczywista &lt;&gt; rTemperaturaRzeczywistaZaraportowana THEN
		rTemperaturaRzeczywistaZaraportowana := rTemperaturaRzeczywista;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPRZECZ=' , sWartosc := REAL_TO_STRING(rTemperaturaRzeczywista) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura referencyjna trybu manulnego
	IF rTemperaturaReferencyjnaTrybManualny &lt;&gt; rTemperaturaReferencyjnaTrybManualnyZaraportowana THEN
		rTemperaturaReferencyjnaTrybManualnyZaraportowana := rTemperaturaReferencyjnaTrybManualny;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREFTRYBMAN=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjnaTrybManualny) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rTemperaturaRzeczywistaPamiec = rTemperaturaRzeczywista THEN
	xBrakZmianyTemperatury := TRUE;
ELSE
	xBrakZmianyTemperatury := FALSE;	
END_IF
fbBrakZmianyTemperaturyTimer(IN := xBrakZmianyTemperatury, PT := T#12H);
rTemperaturaRzeczywistaPamiec := rTemperaturaRzeczywista;
IF fbBrakZmianyTemperaturyTimer.Q THEN
	xBladBrakZmianyTemperatury := TRUE;
ELSE
	xBladBrakZmianyTemperatury := FALSE;
END_IF

// Alarm braku komunikacji MODBUS 
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji , intNumer := enumPPPSDestratyfikatorTBOXError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji , intNumer := enumPPPSDestratyfikatorTBOXError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Alarm czujnika temperatury
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika , intNumer := enumPPPSDestratyfikatorTBOXError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika , intNumer := enumPPPSDestratyfikatorTBOXError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
</project>