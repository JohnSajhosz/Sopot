<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="WAGO" productName="e!COCKPIT" productVersion="e!COCKPIT" creationDateTime="2019-10-30T07:58:58.440898" />
  <contentHeader name="CoDeSys External Library Template" version="3.5.5.30" modificationDateTime="2019-10-29T14:38:06.5373783" organization="3S - Smart Software Solutions GmbH" author="3S - Smart Software Solutions GmbH">
    <Comment>Library project template with all possible element types, docu and a sample project structure</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="Company" type="string">3S - Smart Software Solutions GmbH</property>
          <property name="DefaultNamespace" type="string">TMP</property>
          <property name="Description" type="string">Library project template with all possible element types, docu and a sample project structure</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">PlaceholderTemplate</property>
          <property name="Project" type="string">SOLWENA_Biblioteka - MASTER</property>
          <property name="Title" type="string">CoDeSys External Library Template</property>
          <property name="Version" type="version">3.5.5.30</property>
          <property name="library-category-list" type="library-category-list">Intern|CAA|Guidelines</property>
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="alARRAYTablicaKomunikatow">
        <baseType>
          <array>
            <dimension lower="1" upper="2000" />
            <baseType>
              <derived name="alSTRINGKomunikat" />
            </baseType>
          </array>
        </baseType>
        <addData />
      </dataType>
      <dataType name="alARRAYTablicaKomunikatowDebug">
        <baseType>
          <array>
            <dimension lower="1" upper="100" />
            <baseType>
              <derived name="typKomunikatDebug" />
            </baseType>
          </array>
        </baseType>
        <addData />
      </dataType>
      <dataType name="alSTRINGjSON">
        <baseType>
          <string length="10000" />
        </baseType>
        <addData />
      </dataType>
      <dataType name="alSTRINGKomunikat">
        <baseType>
          <string length="1024" />
        </baseType>
        <addData />
      </dataType>
      <dataType name="enumAlarmWartosc">
        <baseType>
          <enum>
            <values>
              <value name="DUPA" value="0" />
              <value name="StanNormalny" value="1" />
              <value name="StanAlarmowy" value="2" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
      </dataType>
      <dataType name="enumKlasaAlarmu">
        <baseType>
          <enum>
            <values>
              <value name="Bezpieczenstwa" value="0" />
              <value name="Krytyczny" value="1" />
              <value name="Ostrzezenie" value="2" />
              <value name="Informacyjny" value="3" />
              <value name="AwariaAutomatyki" value="8" />
              <value name="Wewnetrzny" value="9" />
              <value name="Systemowy" value="10" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>Bezpieczenstwa</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> najwyższy priorytet alarmu - alarm mogący mieć wpływ na bezpieczeństwo działania budynku</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Krytyczny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> wysoki priorytet alarmu - alarm istotny mogący doprowadzić do zaistnienia alarmu bezpieczeństwa</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Ostrzezenie</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> średni priorytet alarmu - ostrzeżenie o nieprawidłowym działaniu któregoś z urządzeń</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Informacyjny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> niski priorytet alarm wyswietlany nie wymagajacy potwierdzenia</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AwariaAutomatyki</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm (podjrzenia) uszkodzenia lub nieprawidłowego działania automatyki</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Wewnetrzny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm wewnetrzny niewyświetlany nie wymaga potwierdzenia</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Systemowy</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm systemowy niewyświetlany nie wymaga potwierdzenia</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">
Nazwa bloku:			Enumeracja - definicja klasy błędów
			
Projekt: 				Bałtyckie Centrum Biznesu Budynek 2
Firma:					Solwena
Autor:					Marcin Szumiło
Aktualizacja:			2017-11-17-11:00-PK: aktualizacja względem pliku komunikacja
						2019-02-13-14:56-AWy: dodanie klasy AwariaAutomatyki

</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumModbusKodyFunkcji">
        <baseType>
          <enum>
            <values>
              <value name="OdczytWyjscBitowych" value="1" />
              <value name="OdczytWejscBitowych" value="2" />
              <value name="OdczytNRejestrow" value="3" />
              <value name="OdczytNRejestrowWejsciowych" value="4" />
              <value name="ZapisBitu" value="5" />
              <value name="ZapisRejestru" value="6" />
              <value name="OdczytStatusu" value="7" />
              <value name="ZapisNBitow" value="15" />
              <value name="ZapisNRejestrow" value="16" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>OdczytWyjscBitowych</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> odczyt stanu wyjść cyfrowych</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>OdczytWejscBitowych</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> odczyt stanu wejść cyfrowych</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>OdczytNRejestrow</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> odczyt dowolnej ilości rejestrów</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>OdczytNRejestrowWejsciowych</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> odczyt dowolnej ilości rejestrów wejściowych</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ZapisBitu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> zapis jednego bitu informacji</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ZapisRejestru</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> zapis jednego rejestru</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>OdczytStatusu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> odczyt statusu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ZapisNBitow</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> zapis dowolnej ilości bitów</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ZapisNRejestrow</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> zapis dowolnej ilości rejestrów</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">
Nazwa bloku:			Enumeracja - definicja kodów funkcyjnych protokołu modbus
			
Projekt: 				Bałtyckie Centrum Biznesu Budynek 2
Firma:					Solwena
Autor:					Marcin Szumiło
Wersja:					0.1.0.1 - 2017-01-10

</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumModbusStatus">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="KomunikacjaPrawidlowa" value="2" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> problem z komunikacją</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>KomunikacjaPrawidlowa</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikacja przebiegła prawidłowo</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">
Nazwa bloku:			Enumeracja - definicja kodów błędów w komunikacji modbus
			
Projekt: 				Bałtyckie Centrum Biznesu Budynek 2
Firma:					Solwena
Autor:					Marcin Szumiło
Wersja:					0.1.0.1 - 2017-01-10

</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSAnalizatorDirisA40Error">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="BrakZmianyParametrow" value="2" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji z analizatorem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BrakZmianyParametrow</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości paramterów (napięcie, prąd)	</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-18-AWy: alarm braku zmiany wartości napięcia lub prądu

Opis:					fb służy do obsługi alarmów w fb analizatora sieci ECA0 na budynkach PPP Sopot (ENGIE)
						Diris A40
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSAnalizatorDirisA40ErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="BrakZmianyParametrow" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-18-AWy: alarm braku zmiany wartości napięcia lub prądu, zmiana klas alarmów

Opis:					fb służy do definicji klasy alarmów w fb analizatora sieci ECA0 na budynkach PPP Sopot (ENGIE)
						Diris A40
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSBramkaSTC65RS485ModbusError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="ResetKonwertera" value="2" />
              <value name="BrakTelegramowEnOcean" value="3" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji (MODBUS RTU) z konwerterem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ResetKonwertera</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> reset konwertera</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BrakTelegramowEnOcean</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak odbioru telegramów EnOcean (brak komunikacji EnOcean)</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-08-13-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-09-10-PK - dodanie alarmów ResetKonwertera i BrakTelegramowEnOcean

Opis:					enum służy do obsługi alarmów w fb konwertera GTW0 na budynkach PPP Sopot
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSBramkaSTC65RS485ModbusErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="ResetKonwertera" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="BrakTelegramowEnOcean" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-08-13-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-09-10-PK: dodanie klasy alarmów dla ResetKonwertera i BrakTelegramowEnOcean
						2019-02-18-AWy: zmiana klas alarmów

Opis:					enum służy do definicji klas alarmów w fb konwertera GTW0 na budynkach PPP Sopot
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSDestratyfikatorTBOXError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmCzujnika" value="2" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji z węzłem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnika</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp.</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-02-05-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-18-AWy - alarm czujnika temperatury

Opis:					enum służy do obsługi alarmów w fb węzła Frisko ATTOM1S na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSDestratyfikatorTBOXErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnika" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-03-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-18-AWy: alarm czujnika temperatury
						2019-02-18-AWy: zmiana klas alarmów

Opis:					enum służy do definicji klas alarmów w fb węzła Climatix POL63x na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSFriskoATTOM1SError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmCzujnikaZewnetrznego" value="2" />
              <value name="AlarmCzujnikaZasilaniaObwoduCO" value="3" />
              <value name="BrakOsiagnieciaTemperaturyCO" value="4" />
              <value name="BladIloscPomiarowTemperatury" value="5" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji z węzłem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZewnetrznego</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zewnetrznj</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilaniaObwoduCO</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zasilana obwod c. o.</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BrakOsiagnieciaTemperaturyCO</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku osiągnięcia temp. zadanej obwodu c. o.</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BladIloscPomiarowTemperatury</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm zbyt małej ilości pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-02-05-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-19-AWy: dodanie alarmów czujnika zew., zasilania c.o., braku osiągnięcia temperatury zadanej

Opis:					enum służy do obsługi alarmów w fb węzła Frisko ATTOM1S na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSFriskoATTOM1SErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaZewnetrznego" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaZasilaniaObwoduCO" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="BrakOsiagnieciaTemperaturyCO" value="enumKlasaAlarmu.Ostrzezenie" />
              <value name="BladIloscPomiarowTemperatury" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>AlarmCzujnikaZewnetrznego</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zewnetrznj</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilaniaObwoduCO</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zasilana obwod c. o.</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BrakOsiagnieciaTemperaturyCO</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku osiągnięcia temp. zadanej obwodu c. o.</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BladIloscPomiarowTemperatury</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm zbyt małej ilości pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-03-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-19-AWy: dodanie alarmów czujnika zew., zasilania c.o., braku osiągnięcia temperatury zadanej
						2019-02-18-AWy: zmiana klas alarmów

Opis:					enum służy do definicji klas alarmów w fb węzła Climatix POL63x na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSFriskoATTOM1STrybPracy">
        <baseType>
          <enum>
            <values>
              <value name="Zima" value="0" />
              <value name="Lato" value="1" />
              <value name="Auto" value="2" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>Zima</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zima</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Lato</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Lato</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Auto</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Automatyczny - przełączenie trybów uzależnione od temperatury zewnętrznej</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 22.05.2019
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					enum służy do obsługi Trybów pracy fb węzła Frisko ATTO M1S na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSHarmonogramy">
        <baseType>
          <enum>
            <values>
              <value name="Ekonomiczny" value="0" />
              <value name="Komfort" value="1" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>Ekonomiczny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy ekonomicznej</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Komfort</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy komfortu</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-10-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					enum służy do obsługi Trybów pracy harmonogramu na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSKlimatyzatorTroxSchoolairVError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmCzujnika" value="2" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji z węzłem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnika</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp.</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-02-05-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-18-AWy - alarm czujnika temperatury

Opis:					enum służy do obsługi alarmów w fb węzła Frisko ATTOM1S na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnika" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-03-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-18-AWy: alarm czujnika temperatury
						2019-02-18-AWy: zmiana klas alarmów

Opis:					enum służy do definicji klas alarmów w fb węzła Climatix POL63x na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSLicznikCieplaMultical403Error">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmCzujnikaPrzeplywu" value="2" />
              <value name="AlarmCzujnikaZasilania" value="3" />
              <value name="AlarmCzujnikaPowrotu" value="4" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Brak komunikacji z węzłem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaPrzeplywu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika przepływu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilania</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. zasilania</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaPowrotu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. powrotu</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-08-07-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					Enumeracja alarmów w fb licznia ciepła Multical403
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSLicznikCieplaMultical403ErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaPrzeplywu" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaZasilania" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaPowrotu" value="enumKlasaAlarmu.Ostrzezenie" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>AlarmCzujnikaPrzeplywu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika przepływu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilania</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. zasilania</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaPowrotu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. powrotu</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-08-07-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					Klasy alarmów w fb licznia ciepła Multical403
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSLicznikCieplaMultical602Error">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmCzujnikaPrzeplywu" value="2" />
              <value name="AlarmCzujnikaZasilania" value="3" />
              <value name="AlarmCzujnikaPowrotu" value="4" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Brak komunikacji z węzłem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaPrzeplywu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika przepływu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilania</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. zasilania</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaPowrotu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. powrotu</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-08-08-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					Enumeracja alarmów w fb licznia ciepła Multical602
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSLicznikCieplaMultical602ErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaPrzeplywu" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaZasilania" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaPowrotu" value="enumKlasaAlarmu.Ostrzezenie" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>AlarmCzujnikaPrzeplywu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika przepływu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilania</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. zasilania</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaPowrotu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm braku zmiany wartości czujnika temp. powrotu</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2019-08-08-AWy
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					Klasy alarmów w fb licznia ciepła Multical602
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSPomieszczenie">
        <baseType>
          <enum>
            <values>
              <value name="SalaLekcyjna" value="0" />
              <value name="SalaNiemowlat" value="1" />
              <value name="Rehabilitacyjne" value="2" />
              <value name="Korytarz" value="3" />
              <value name="Szatnia" value="4" />
              <value name="SalaGimnastyczna" value="5" />
              <value name="Lazienka" value="6" />
              <value name="PomieszczenieBiurowe" value="7" />
              <value name="PomieszczenieMieszkalne" value="8" />
              <value name="Magazyn" value="9" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>SalaLekcyjna</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sale lekcyjne, przedszkolne, świetlica, biblioteka (20 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>SalaNiemowlat</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sale niemowląt, dziecięce w żłobkach (24 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Rehabilitacyjne</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pomieszczenia rehabilitacyjne SPON (24 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Korytarz</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Korytarze (20 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Szatnia</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Szatnie (16 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>SalaGimnastyczna</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sale gimnastyczne (16 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Lazienka</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Łazienki i ustępy (24 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>PomieszczenieBiurowe</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pomieszczenia biurowe i administracyjne (20 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>PomieszczenieMieszkalne</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pomieszczenia mieszkalne, przedpokoje, kuchnie (20 st. C)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Magazyn</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pomieszczenia magazynowe (16 st. C)</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2018-10-15-AW;
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					enum służy do obsługi rodzajów pomieszczeń w budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSSilownikSABpError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmOgolny" value="2" />
              <value name="DetekcjaOtwarciaOkna" value="3" />
              <value name="Defrost" value="4" />
              <value name="AlarmCzujnika" value="5" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji (po EnOcean) z siłownikiem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmOgolny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm ogólny</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>DetekcjaOtwarciaOkna</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> błąd baterii</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Defrost</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> defrost</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnika</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp.</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-01-28-JC - defrost
						2019-02-14-AWy - alarm czujnika temperatury

Opis:					enum służy do obsługi alarmów w fb siłownika (SAB+) HRU0 na budynkach PPP Sopot
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSSilownikSABpErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmOgolny" value="enumKlasaAlarmu.Ostrzezenie" />
              <value name="DetekcjaOtwarciaOkna" value="enumKlasaAlarmu.Informacyjny" />
              <value name="Defrost" value="enumKlasaAlarmu.Bezpieczenstwa" />
              <value name="AlarmCzujnika" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-01-28-JC: defrost
						2019-02-14-AWy: alarm czujnika temperatury
						2019-02-18-AWy: zmiana klas alarmów
						
Opis:					enum służy do definicji klas alarmów w fb siłownika (SAB+) HRU0 na budynkach PPP Sopot
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSSilownikSABpServiceFlag">
        <baseType>
          <enum>
            <values>
              <value name="BrakDzialan" value="0" />
              <value name="TrybLetni" value="1" />
              <value name="ZamkniecieZaworu" value="2" />
              <value name="OtwarcieZaworu" value="3" />
              <value name="PozycjaGorna" value="4" />
              <value name="KalibracjaSilownika" value="5" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakDzialan</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Brak rozkazu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>TrybLetni</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rozkaz ustwienia trybu letniego</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ZamkniecieZaworu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rozkaz zamknięcia zaworu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>OtwarcieZaworu</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rozkaz otwarcia zaworu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>PozycjaGorna</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rozkaz pozycji górnej trzpienia (pozycja do transportu) - po jego uruchomieniu wymagana ponowna kalibracja</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>KalibracjaSilownika</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rozkaz uruchomienia sekwencji inicjalizacji siłownika </xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					enum służy do obsługi flagi serwisowej siłownika SAB+ (HRU0) na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSSilownikTrybPracy">
        <baseType>
          <enum>
            <values>
              <value name="Manualny" value="0" />
              <value name="Automatyczny" value="1" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>Manualny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy ręcznej</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Automatyczny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy automatycznej</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Artur Wyszomirski, 2018-09-25-AW
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					enum służy do obsługi Trybów pracy fb siłownika SABp (HRU0) na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSUrzadenieStatus">
        <baseType>
          <enum>
            <values>
              <value name="Nieaktywny" value="1" />
              <value name="Oczekiwanie" value="2" />
              <value name="Prawidlowy" value="3" />
              <value name="Ostrzezenie" value="4" />
              <value name="Awaria" value="5" />
              <value name="Krytyczny" value="6" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
      </dataType>
      <dataType name="enumPPPSWezelClimatixPOL63xError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmOgolnyBezpieczenstwa" value="2" />
              <value name="AlarmOgolnyKrytyczny" value="3" />
              <value name="AlarmOgolnyOstrzezenie" value="4" />
              <value name="AlarmOgolnyInformacyjny" value="5" />
              <value name="AlarmCzujnikaZewnetrznego" value="6" />
              <value name="AlarmCzujnikaZasilaniaObwoduHC1" value="7" />
              <value name="AlarmCzujnikaZasilaniaObwoduDHW" value="8" />
              <value name="AlarmBrakuOsiagnieciaTemperaturyHC1" value="9" />
              <value name="AlarmBrakuOsiagnieciaTemperaturyDHW" value="10" />
              <value name="BladIloscPomiarowTemperatury" value="11" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji z zadajnikiem</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmOgolnyBezpieczenstwa</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm ogólny bezpieczeństwa</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmOgolnyKrytyczny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm ogólny krytyczny</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmOgolnyOstrzezenie</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm ogólny ostrzeżenie</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmOgolnyInformacyjny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm ogólny informacyjny</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZewnetrznego</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zewnetrznj</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilaniaObwoduHC1</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zasilana obwodu HC1</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilaniaObwoduDHW</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zasilana obwodu DHW</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmBrakuOsiagnieciaTemperaturyHC1</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku osiągnięcia temp. zadanej obwodu HC1</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmBrakuOsiagnieciaTemperaturyDHW</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku osiągnięcia temp. zadanej obwodu DHW</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BladIloscPomiarowTemperatury</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm zbyt małej ilości pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-03-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-14-AWy: dodanie alarmów czujników temp. zewnętrznej i zasilania obwodu HC1, DHW 

Opis:					enum służy do obsługi alarmów w fb węzła Climatix POL63x na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSWezelClimatixPOL63xErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmOgolnyBezpieczenstwa" value="enumKlasaAlarmu.Bezpieczenstwa" />
              <value name="AlarmOgolnyKrytyczny" value="enumKlasaAlarmu.Krytyczny" />
              <value name="AlarmOgolnyOstrzezenie" value="enumKlasaAlarmu.Ostrzezenie" />
              <value name="AlarmOgolnyInformacyjny" value="enumKlasaAlarmu.Informacyjny" />
              <value name="AlarmCzujnikaZewnetrznego" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaZasilaniaObwoduHC1" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmCzujnikaZasilaniaObwoduDHW" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmBrakuOsiagnieciaTemperaturyHC1" value="enumKlasaAlarmu.Ostrzezenie" />
              <value name="AlarmBrakuOsiagnieciaTemperaturyDHW" value="enumKlasaAlarmu.Ostrzezenie" />
              <value name="BladIloscPomiarowTemperatury" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>AlarmCzujnikaZewnetrznego</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zewnetrznj</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilaniaObwoduHC1</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zasilana obwodu HC1</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnikaZasilaniaObwoduDHW</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp. zasilana obwodu DHW</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmBrakuOsiagnieciaTemperaturyHC1</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku osiągnięcia temp. zadanej obwodu HC1</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmBrakuOsiagnieciaTemperaturyDHW</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku osiągnięcia temp. zadanej obwodu DHW</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>BladIloscPomiarowTemperatury</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm zbyt małej ilości pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-03-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-14-AWy: dodanie alarmów czujników temp. zewnętrznej i zasilania obwodu HC1, DHW 
						2019-02-18-AWy: zmiana klas alarmów

Opis:					enum służy do definicji klas alarmów w fb węzła Climatix POL63x na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSWezelClimatixPOL63xTrybPracy">
        <baseType>
          <enum>
            <values>
              <value name="Auto" value="0" />
              <value name="OchronaBudynku" value="1" />
              <value name="Ekonomiczny" value="2" />
              <value name="Komfort" value="3" />
              <value name="ReczneWylaczenie" value="4" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>Auto</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy automatycznej</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>OchronaBudynku</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb utrzymania minimalnych nastaw dla ochrony budynku</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Ekonomiczny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb Ekonomiczny</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Komfort</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb komfortu</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>ReczneWylaczenie</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ręczne, lokalne wyłączenie węzła</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-03-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			

Opis:					enum służy do obsługi Trybów pracy fb węzła Climatix POL63x na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSZadajnikError">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="1" />
              <value name="AlarmOgolny" value="2" />
              <value name="AlarmCzujnika" value="3" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>BrakKomunikacji</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> brak komunikacji z zadajnikiem (po EnOcean)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmOgolny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm ogólny</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>AlarmCzujnika</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm braku zmiany wartości czujnika temp.</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-08-13-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-14-AWy - alarm czujnika temperatury

Opis:					enum służy do obsługi alarmów w fb zadajnika FCP0 na budynkach PPP Sopot
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSZadajnikErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakKomunikacji" value="enumKlasaAlarmu.AwariaAutomatyki" />
              <value name="AlarmOgolny" value="enumKlasaAlarmu.Ostrzezenie" />
              <value name="AlarmCzujnika" value="enumKlasaAlarmu.AwariaAutomatyki" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-08-13-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-02-14-AWy: alarm czujnika temperatury
						2019-02-18-AWy: zmiana klas alarmów

Opis:					enum służy do definicji klas alarmów w fb zadajnika FCP0 na budynkach PPP Sopot
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumPPPSZadajnikTrybPracy">
        <baseType>
          <enum>
            <values>
              <value name="Manualny" value="0" />
              <value name="Automatyczny" value="1" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>Manualny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy ręcznej</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>Automatyczny</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy automatyczny</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">		
Autor:					Paweł Kąkol, 2018-09-10-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-10-02 - AW - Zmiana numeracji. Tryb Manualny na 0
						2018-10-15 - AW - Zmiana numeracji. Dodanie trybów AutonomizacjaManualny i AutonomizacjaAutomatyczny
						2018-12-12 - JB - Ujednolicenie trybów z siłownikiem SAB+. 		
						2019-06-06 - AWy - Usunięcie trybów Wylaczenie, AutonomizacjaManualny i AutonomizacjaAutomatyczny oraz zmiana nazwy trybu Regulacja IZE na Automatyczny	

Opis:					enum służy do obsługi Trybów pracy fb zadajnika SR04P (FCP0) na budynkach PPP Sopot (ENGIE)
</xhtml>
        </documentation>
      </dataType>
      <dataType name="enumSystemError">
        <baseType>
          <enum>
            <values>
              <value name="BrakHeartbetuzIZE" value="1" />
              <value name="NiezgodnaIloscKomunikatowOdebranychZIZE" value="2" />
              <value name="BladCRCWKomunikacieZIZE" value="3" />
              <value name="BladSzyfrowania" value="4" />
              <value name="ZaDuzaIloscKomunikatowWBuforze" value="5" />
              <value name="BladWalidacjiFullIdentifier" value="6" />
              <value name="BladFullIdentifierWHeartBeat" value="7" />
              <value name="BlokadaWysylaniaRamek" value="8" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
      </dataType>
      <dataType name="enumSystemErrorKlasa">
        <baseType>
          <enum>
            <values>
              <value name="BrakHeartbetuzIZE" value="enumKlasaAlarmu.Krytyczny" />
              <value name="NiezgodnaIloscKomunikatowOdebranychZIZE" value="enumKlasaAlarmu.Systemowy" />
              <value name="BladCRCWKomunikacieZIZE" value="enumKlasaAlarmu.Systemowy" />
              <value name="BladSzyfrowania" value="enumKlasaAlarmu.Systemowy" />
              <value name="ZaDuzaIloscKomunikatowWBuforze" value="enumKlasaAlarmu.Systemowy" />
              <value name="BladWalidacjiFullIdentifier" value="enumKlasaAlarmu.Systemowy" />
              <value name="BladFullIdentifierWHeartBeat" value="enumKlasaAlarmu.Systemowy" />
              <value name="BlokadaWysylaniaRamek" value="enumKlasaAlarmu.Systemowy" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
        </addData>
      </dataType>
      <dataType name="SILOWNIK_HRU">
        <baseType>
          <struct>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
            </variable>
            <variable name="intTrybPracy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xPokazPanelHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="rTemperaturaPomieszczenia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNastawaPolozeniaSilownika">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rZadanePolozenieSilownikaHMI">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intTrybPracyHMI">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAlarmOgolny">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBladBaterii">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xDetekcjaOtwarciaOkna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sEnOceanIDodczytany">
              <type>
                <string />
              </type>
            </variable>
            <variable name="wCzasOdOstatniegoKomunikatu">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xPoprawneParowanie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xUczenieWlaczHMI">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xUczenieWlaczone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xUsuwaniePotwierdzenieHMI">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xUsuwanieHMI">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="STEROWNIK_LAC">
        <baseType>
          <struct>
            <variable name="xAutonomizacjaWyjscie">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typHarmonogramDzien">
        <baseType>
          <struct>
            <variable name="uintDzienTygodnia">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="arZdarzenia">
              <type>
                <array>
                  <dimension lower="0" upper="24" />
                  <baseType>
                    <derived name="typHarmonogramZdarzenie" />
                  </baseType>
                </array>
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typHarmonogramJSON">
        <baseType>
          <struct>
            <variable name="sPokoj">
              <type>
                <string length="3" />
              </type>
            </variable>
            <variable name="sPietro">
              <type>
                <string length="2" />
              </type>
            </variable>
            <variable name="arHarmonogramTygodniowy">
              <type>
                <array>
                  <dimension lower="0" upper="6" />
                  <baseType>
                    <derived name="typHarmonogramDzien" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arWyjatki">
              <type>
                <array>
                  <dimension lower="0" upper="24" />
                  <baseType>
                    <derived name="typHarmonogramWyjatek" />
                  </baseType>
                </array>
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typHarmonogramWyjatek">
        <baseType>
          <struct>
            <variable name="dData">
              <type>
                <DATE />
              </type>
            </variable>
            <variable name="arZdarzenia">
              <type>
                <array>
                  <dimension lower="0" upper="9" />
                  <baseType>
                    <derived name="typHarmonogramZdarzenie" />
                  </baseType>
                </array>
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typHarmonogramZdarzenie">
        <baseType>
          <struct>
            <variable name="dtCzasRozpoczecia">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="dtCzasZakonczenia">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="sNazwaAtrybutu">
              <type>
                <string length="15" />
              </type>
            </variable>
            <variable name="sWartoscAtrybutu">
              <type>
                <string length="15" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typKomunikat">
        <baseType>
          <struct>
            <variable name="sZnacznik">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sTypKomunikatu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sMnemonikWlasciciela">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sMnemonikWlascicielaExt">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIDZrodla">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIDZrodlaLokalizacja">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIDZrodlaUrzadzenie">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIDPrzeznaczenia">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIDPrzeznaczeniaLokalizacja">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIDPrzeznaczeniaUrzadzenie">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sDlugoscPolaDanych">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sMarkerCzasowy">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sRezerwa">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typKomunikatDebug">
        <baseType>
          <struct>
            <variable name="intGlobalnyZnacznikWysylkiUDP">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intGlobalnyZnacznikOdczytu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intGlobalnyZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intGlobalnaLiczbaKomunikatowWBuforze">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="dtLokalnyCzasSterownika">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typModbusOdczytCykliczny">
        <baseType>
          <struct>
            <variable name="bAdresUrzadzenia">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> ID urządzenia SLAVE w sieci MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="bFunkcja">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> kod funkcji użytej w rozkazie MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="uiAdresRejestru">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rejestr startowy</xhtml>
              </documentation>
            </variable>
            <variable name="ltCzestotliwosc">
              <type>
                <derived name="LTIME" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> po jakim czasie w ms ma być wysłany następny request</xhtml>
              </documentation>
            </variable>
            <variable name="ltZnacznikCzasuWyslania">
              <type>
                <derived name="LTIME" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> znacznik czasowy próby wykonania rozkazu</xhtml>
              </documentation>
            </variable>
            <variable name="pZmiennaReferencyjna">
              <type>
                <pointer>
                  <baseType>
                    <WORD />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wskaźnik do zmiennej INT przechowującej wynik</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typModbusOdczytZapisZadanie">
        <baseType>
          <struct>
            <variable name="bAdresUrzadzenia">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> ID urządzenia SLAVE w sieci MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="bFunkcja">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> kod funkcji użytej w rozkazie MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="uiAdresRejestru">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rejestr startowy</xhtml>
              </documentation>
            </variable>
            <variable name="pZmiennaDoOdczytu">
              <type>
                <pointer>
                  <baseType>
                    <WORD />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wskaźnik do zmiennej INT przechowującej wynik</xhtml>
              </documentation>
            </variable>
            <variable name="wWartoscDoZapisania">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wartość do zapisania</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typModbusRTUParametryKomunikacji">
        <baseType>
          <struct>
            <variable name="xKomunikacjaAktywna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="typNazwaPortuKomunikacyjnego">
              <type>
                <derived name="WagoTypesCom.I_WagoSysComBase" />
              </type>
            </variable>
            <variable name="udiPredkosc">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="usiBityDanych">
              <type>
                <USINT />
              </type>
            </variable>
            <variable name="eParzystosc">
              <type>
                <derived name="eTTYParity" />
              </type>
            </variable>
            <variable name="eBityStopu">
              <type>
                <derived name="eTTYStopBits" />
              </type>
            </variable>
            <variable name="eHandshake">
              <type>
                <derived name="eTTYHandshake" />
              </type>
            </variable>
            <variable name="eDuplex">
              <type>
                <derived name="eTTYPhysicalLayer" />
              </type>
            </variable>
            <variable name="eTypRamki">
              <type>
                <derived name="eMbFrameType" />
              </type>
            </variable>
            <variable name="tTimeout">
              <type>
                <TIME />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typModbusTCPParametryKomunikacji">
        <baseType>
          <struct>
            <variable name="xKomunikacjaAktywna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sAdresTCP">
              <type>
                <string />
              </type>
            </variable>
            <variable name="wPortTCP">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="utPodtrzymajWtyczkeTCP">
              <type>
                <derived name="typKeepAlive" />
              </type>
            </variable>
            <variable name="eTypRamki">
              <type>
                <derived name="eMbFrameType" />
              </type>
            </variable>
            <variable name="tTimeOut">
              <type>
                <TIME />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="typWirtualnePomieszczenie">
        <baseType>
          <struct>
            <variable name="sIDPomieszczenia">
              <type>
                <string />
              </type>
            </variable>
            <variable name="intObecnosc">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
      <dataType name="ZADAJNIK_FCP">
        <baseType>
          <struct>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
            </variable>
            <variable name="rTemperaturaNastawiona">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaPomieszczenia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaBazowaHMI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="293.15" />
              </initialValue>
            </variable>
            <variable name="rSkalaPotencjometruAutonomizacja">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="rTemperaturaBazowaAutoAutonomizacja">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="293.15" />
              </initialValue>
            </variable>
            <variable name="intTrybPracy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xPokazPanelHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intTrybPracyHMI">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sEnOceanIDodczytany">
              <type>
                <string />
              </type>
            </variable>
            <variable name="wCzasOdOstatniegoKomunikatu">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xZwiekszTemperature">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZmniejszTemperature">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData />
      </dataType>
    </dataTypes>
    <pous>
      <pou name="fbDecToBin" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="wWordWejsciowy">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="intIloscBitow">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="arBity">
              <type>
                <array>
                  <dimension lower="0" upper="16" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="intWejsciowy">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="bBajtPojedynczy">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="intWord">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="intI">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
Nazwa bloku:			Blok funkcyjny konwersji liczby decymalnej na binarną
			
Autor:					Jan Bartczak
Wersja:					v1.0.0 - 2018-06-22

</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">intWejsciowy := WORD_TO_UINT(wWordWejsciowy);
intIloscBitow := intIloscBitow - 1;
FOR intI := 0 TO intIloscBitow BY 1 DO
	intWord := (intWejsciowy MOD 2);
	bBajtPojedynczy := UINT_TO_BYTE(intWord);
	arBity[intI] := bBajtPojedynczy;
	intWejsciowy := intWejsciowy/2;
END_FOR;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbFiltrWartoscAnalogowa" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="rWartoscWejsciowa">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rWartoscWejsciowaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDeadband">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tCzasMinimalny">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#5s0ms" />
              </initialValue>
            </variable>
            <variable name="tCzasMaksymalny">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
            </variable>
            <variable name="rWynikMnoznik">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="rWynikOffset">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="rWartoscWyjsciowa">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rWartoscWejsciowaZaraportowanaReferencja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbCzasMinimalny">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="fbCzasMaksymalny">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xCzasMinimalny">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xCzasMaksymalny">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">xCzasMinimalny := TRUE;
xCzasMaksymalny := TRUE;	

IF rWartoscWejsciowaZaraportowana &lt;&gt; rWartoscWejsciowaZaraportowanaReferencja THEN
	rWartoscWejsciowaZaraportowanaReferencja := rWartoscWejsciowaZaraportowana;
	xCzasMinimalny := FALSE;
	xCzasMaksymalny := FALSE;	
END_IF

IF fbCzasMinimalny.Q AND ABS(rWartoscWyjsciowa - (rWartoscWejsciowa * rWynikMnoznik + rWynikOffset)) &gt; rDeadband THEN
	rWartoscWyjsciowa := rWartoscWejsciowa * rWynikMnoznik + rWynikOffset;
	xCzasMinimalny := FALSE;
	xCzasMaksymalny := FALSE;
END_IF

IF fbCzasMaksymalny.Q AND rWartoscWyjsciowa &lt;&gt; rWartoscWejsciowa * rWynikMnoznik + rWynikOffset THEN
	rWartoscWyjsciowa := rWartoscWejsciowa * rWynikMnoznik + rWynikOffset;
	xCzasMinimalny := FALSE;
	xCzasMaksymalny := FALSE;
END_IF

fbCzasMinimalny(IN := xCzasMinimalny, PT := tCzasMinimalny);
fbCzasMaksymalny(IN := xCzasMaksymalny , PT := tCzasMaksymalny);</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbModbusDriverRTU" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="intOdczytZapisZadanieRozmiarBufora">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arRTUParametryKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="typModbusRTUParametryKomunikacji" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="ModbusMasterRTU">
              <type>
                <derived name="FbMbMasterSerial" />
              </type>
            </variable>
            <variable name="arRTUParametryKomunikacjiPoprz">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="typModbusRTUParametryKomunikacji" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="utZapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utZapytaniePoprz">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utOdpowiedz">
              <type>
                <derived name="typMbResponse" />
              </type>
            </variable>
            <variable name="xStatusPolaczenia">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBladKomunikacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="typStatusKomunikacji">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="tCzasPonowienia">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#15s0ms0us0ns" />
              </initialValue>
            </variable>
            <variable name="tCzasStabilnosciKomunikacji">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#30s0ms0us0ns" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas po jakim driver raportuje poprawną komunikację po jej faktycznym odzyskaniu - czas powinien być większy niż czas tCzasPonawiania</xhtml>
              </documentation>
            </variable>
            <variable name="xDriverWykonajKomunikacje">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienna sygnalizujaca konicznosc wykonania zapisu/odczytu do Modbus RTU </xhtml>
              </documentation>
            </variable>
            <variable name="tonDriverWykonajKomunikacje">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Opóżnienie włączenia triggera wysłania komunikatu po włączeniu drivera MODBUSa</xhtml>
              </documentation>
            </variable>
            <variable name="xDriverWykonajKomunikacjeTrigger">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger wysłania komunikatu MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="ftrigDriverWykonajKomunikacjeTrigger">
              <type>
                <derived name="F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zbocze opadające triggera wysłania komunikatu </xhtml>
              </documentation>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniaProba">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniBlad">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="negWykonaj">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="intZnacznikDriveraOdczytuCyklicznego">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="intZnacznikDriveraOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoPoczatek">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanieReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikPomocniczy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytZadanieTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablicaIlosc">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoopOverflow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="statusbledu">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="jakiezapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="intDebugZnacznik">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> debug</xhtml>
              </documentation>
            </variable>
            <variable name="arDebugZapytanie">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typMBQuery" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugOdpowiedz">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typMbResponse" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="typDebugOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugCzas">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <DT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="inttest">
              <type>
                <DINT />
              </type>
            </variable>
            <variable name="ctuLicznikBledow">
              <type>
                <derived name="CTU" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Licznik błędów</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					N/A
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:								

Opis:					Obsługa komunikacji MODBUS
						
Aktualizacje:			2019-09-13-AWy: zmiana sposobu uruchamiania drivera MODBUSowego ModbusMasterRTU i wysyłania komunkatów.
						2019-10-18-AWy: dodanie licznika błędów
						2019-10-22-AWy: zmiana opóżnienia włączenia drivera po zakończeniu komunikacji
						
Rozwój:					Możliwe jest przyspieszenie drivera poprzez nie restartowanie po każdej komunikacji a jedynie wtedy, gdy ulegną zmianie parametry komunikacji.						
	
*)

// obsługa odczytu/zapisu danych na żądanie

IF intZnacznikDriveraOdczytuZapisuZadanie &lt;&gt; intZnacznikOdczytuZapisuZadanie AND NOT xDriverWykonajKomunikacje THEN
	fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := intOdczytZapisZadanieRozmiarBufora, intWskaznik := intZnacznikDriveraOdczytuZapisuZadanie);
	IF arStatusKomunikacji[arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia] = enumModbusStatus.KomunikacjaPrawidlowa THEN
		xDriverWykonajKomunikacje := TRUE;
		utZapytanie.bUnitId := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bFunkcja;
		utZapytanie.uiReadQuantity := 1;
		utZapytanie.uiReadAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.uiWriteAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.awWriteData[0] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].wWartoscDoZapisania;
		utZapytanie.uiWriteQuantity := 1;
		intOdczytZadanieTablica := intZnacznikDriveraOdczytuZapisuZadanie;
	END_IF
END_IF

// obsługa odczytu cyklicznego zmiennych zapisanych w tabeli

IF NOT xDriverWykonajKomunikacje THEN 
	
	intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
	intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
	IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
		intZnacznikDriveraOdczytuCyklicznego := 1;
	END_IF

	WHILE intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego AND _GetLongTime() - arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] &lt; tCzasPonowienia AND
			_GetLongTime() - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltZnacznikCzasuWyslania &lt; arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltCzestotliwosc DO
		intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
			intZnacznikDriveraOdczytuCyklicznego := 1;
		END_IF
	END_WHILE

// zapis adresu startowego rejestrów do zapisu

	IF intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego THEN
		xDriverWykonajKomunikacje := TRUE;
		arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] := _GetLongTime();
		utZapytanie.bUnitId := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja;
		utZapytanie.uiReadAddress := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru;
		utZapytanie.uiReadQuantity := 1;
		intOdczytCyklicznyTablica := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
			intZnacznikPomocniczy := 1;
		END_IF

// sprawdzenie czy następne żądanie nie jest w kolejności do bieżącego jeśli tak to grupuje je w jedno zapytanie

		WHILE (arOdczytCykliczny[intZnacznikPomocniczy].uiAdresRejestru - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru = 1 AND
				arOdczytCykliczny[intZnacznikPomocniczy].bFunkcja = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja AND
				arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia) DO
				
			utZapytanie.uiReadQuantity := utZapytanie.uiReadQuantity + 1;
			intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
				intZnacznikDriveraOdczytuCyklicznego := 1;
			END_IF
			intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
				intZnacznikPomocniczy := 1;
			END_IF
		END_WHILE
		intOdczytCyklicznyTablicaIlosc := UINT_TO_INT(utZapytanie.uiReadQuantity);
	END_IF
END_IF

// driver komunikacyjny MODBUS RTU
	// Na potrzeby obsługi komunikacji w kilku prędkościach: ModbusMasterRTU jest włączany (xConnect := TRUE), wprowadzane są nowe parametry komunikacji, a następnie triggerowane jest wysłanie komunikatu
	// (xTrigger := TRUE). Następnie ModbusMasterRTU jest wyłączany (xConnect := FALSE) i algorytm zaczyna się od nowa.

ftrigDriverWykonajKomunikacjeTrigger(CLK := xDriverWykonajKomunikacjeTrigger);
IF ftrigDriverWykonajKomunikacjeTrigger.Q THEN
	xDriverWykonajKomunikacje := FALSE;
END_IF

tonDriverWykonajKomunikacje(IN := xDriverWykonajKomunikacje, PT := T#1000MS); // Opóżnienie konieczne ze względu na nieprawidłowe działanie drivera przy zbyt szybkim wysyłaniu komunikatu po włączeniu drivera
IF tonDriverWykonajKomunikacje.Q THEN
	xDriverWykonajKomunikacjeTrigger := TRUE;
END_IF		

ModbusMasterRTU(xConnect := 		xDriverWykonajKomunikacje,
				I_Port := 			arRTUParametryKomunikacji[utZapytanie.bUnitId].typNazwaPortuKomunikacyjnego , 
				eFrameType := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eTypRamki , 
				udiBaudrate := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].udiPredkosc , 
				usiDataBits := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].usiBityDanych , 
				eParity := 			arRTUParametryKomunikacji[utZapytanie.bUnitId].eParzystosc , 
				eStopBits := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eBityStopu , 
				eHandshake :=		arRTUParametryKomunikacji[utZapytanie.bUnitId].eHandshake , 
				ePhysical := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eDuplex , 
				tTimeOut := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].tTimeout , 
 
				xTrigger := 		xDriverWykonajKomunikacjeTrigger , 
				utQuery := 			utZapytanie , 
				utResponse := 		utOdpowiedz ,
 
				xError =&gt; 			xBladKomunikacji);
				
// Licznik błędów
ctuLicznikBledow(CU := ModbusMasterRTU.xError, PV := 65535);
	
// obługa akcji po zakończeniu zadania komunikacji (zapis wartości , zapis błędu itd)
	
negWykonaj(CLK := xDriverWykonajKomunikacjeTrigger);

IF negWykonaj.Q THEN
// jeżeli był błąd komunikacji wpisz go do tablicy błędów

	IF xBladKomunikacji THEN
		arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.BrakKomunikacji;
		statusbledu := ModbusMasterRTU.oStatus;
		jakiezapytanie := utZapytanie;
		arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] := _GetLongTime();
		IF utZapytaniePoprz.bFunctionCode = 0 THEN
			utZapytaniePoprz := utZapytanie;
		END_IF
		IF arRTUParametryKomunikacjiPoprz[3].udiPredkosc = 0 THEN
			arRTUParametryKomunikacjiPoprz := arRTUParametryKomunikacji;
		END_IF
	ELSE
		IF _GetLongTime() - arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] &gt; tCzasStabilnosciKomunikacji AND arStatusKomunikacji[utZapytanie.bUnitId] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa THEN	
			arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.KomunikacjaPrawidlowa;
		END_IF

// jeżeli zapytanie było żądaniem  wysłania danych

		IF utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWejscBitowych OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWyjscBitowych OR
			utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrow OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych THEN
			intZnacznikOdczytuCyklicznegoPoczatek := 0;
		
// jeżeli był wykonany rozkaz odczytu danych z cyklu "na żądanie" - DOŁOŻONO KAWAŁEK KODU DEBUGUJĄCEGO - ZATRZYMYWANIE SIĘ STEROWNIKA NA ZAREMOWANEJ LINII

			IF intOdczytZadanieTablica &lt;&gt; 0 THEN
				arDebugZapytanie[intDebugZnacznik] := utZapytanie;
				arDebugOdpowiedz[intDebugZnacznik] := utOdpowiedz;
				typDebugOdczytZapisZadanie[intDebugZnacznik] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie];				
				arDebugCzas[intDebugZnacznik] := FuGetDateAndTime();
				fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := 900, intWskaznik := intDebugZnacznik);
//				arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].pZmiennaDoOdczytu^ := utOdpowiedz.awData[0];
			END_IF

// jeżeli był wykonany rozkaz odczytu danych z cyklu "cykliczny"

			IF intOdczytCyklicznyTablica &lt;&gt; 0 THEN
				intLoopOverflow:=1;
				FOR intLoop := 1 TO intOdczytCyklicznyTablicaIlosc DO
					IF arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna &lt;&gt; null THEN
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].ltZnacznikCzasuWyslania := _GetLongTime();
					ELSE
					arOdczytCykliczny[intLoopOverflow].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intLoopOverflow].ltZnacznikCzasuWyslania := _GetLongTime();
					intLoopOverflow:=intLoopOverflow+1;
					END_IF
				END_FOR
			END_IF
		END_IF
	END_IF
	intOdczytZadanieTablica := 0;
	intOdczytCyklicznyTablica := 0;
	intOdczytCyklicznyTablicaIlosc := 0;
END_IF

</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbModbusDriverRTUStary" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="intOdczytZapisZadanieRozmiarBufora">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arRTUParametryKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="typModbusRTUParametryKomunikacji" />
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="ModbusMasterRTU">
              <type>
                <derived name="FbMbMasterSerial" />
              </type>
            </variable>
            <variable name="arRTUParametryKomunikacjiPoprz">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="typModbusRTUParametryKomunikacji" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="utZapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utZapytaniePoprz">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utOdpowiedz">
              <type>
                <derived name="typMbResponse" />
              </type>
            </variable>
            <variable name="xStatusPolaczenia">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBladKomunikacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="typStatusKomunikacji">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="tCzasPonowienia">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#15s0ms0us0ns" />
              </initialValue>
            </variable>
            <variable name="tCzasStabilnosciKomunikacji">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#30s0ms0us0ns" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas po jakim driver raportuje poprawną komunikację po jej faktycznym odzyskaniu - czas powinien być większy niż czas tCzasPonawiania</xhtml>
              </documentation>
            </variable>
            <variable name="xDriverWykonajKomunikacje">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienna sygnalizujaca konicznosc wykonania zapisu/odczytu do Modbus RTU </xhtml>
              </documentation>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniaProba">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniBlad">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="negWykonaj">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="intZnacznikDriveraOdczytuCyklicznego">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="intZnacznikDriveraOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoPoczatek">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanieReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikPomocniczy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytZadanieTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablicaIlosc">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoopOverflow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="statusbledu">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="jakiezapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="intDebugZnacznik">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> debug</xhtml>
              </documentation>
            </variable>
            <variable name="arDebugZapytanie">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typMBQuery" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugOdpowiedz">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typMbResponse" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="typDebugOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugCzas">
              <type>
                <array>
                  <dimension lower="0" upper="5000" />
                  <baseType>
                    <DT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="inttest">
              <type>
                <DINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">// obsługa odczytu/zapisu danych na żądanie

IF intZnacznikDriveraOdczytuZapisuZadanie &lt;&gt; intZnacznikOdczytuZapisuZadanie AND NOT xDriverWykonajKomunikacje THEN
	fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := intOdczytZapisZadanieRozmiarBufora, intWskaznik := intZnacznikDriveraOdczytuZapisuZadanie);
	IF arStatusKomunikacji[arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia] = enumModbusStatus.KomunikacjaPrawidlowa THEN
		xDriverWykonajKomunikacje := TRUE;
		utZapytanie.bUnitId := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bFunkcja;
		utZapytanie.uiReadQuantity := 1;
		utZapytanie.uiReadAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.uiWriteAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.awWriteData[0] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].wWartoscDoZapisania;
		utZapytanie.uiWriteQuantity := 1;
		intOdczytZadanieTablica := intZnacznikDriveraOdczytuZapisuZadanie;
	END_IF
END_IF

// obsługa odczytu cyklicznego zmiennych zapisanych w tabeli

IF NOT xDriverWykonajKomunikacje THEN 
	
	intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
	intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
	IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
		intZnacznikDriveraOdczytuCyklicznego := 1;
	END_IF

	WHILE intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego AND _GetLongTime() - arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] &lt; tCzasPonowienia AND
			_GetLongTime() - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltZnacznikCzasuWyslania &lt; arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltCzestotliwosc DO
		intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
			intZnacznikDriveraOdczytuCyklicznego := 1;
		END_IF
	END_WHILE

// zapis adresu startowego rejestrów do zapisu

	IF intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego THEN
		xDriverWykonajKomunikacje := TRUE;
		arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] := _GetLongTime();
		utZapytanie.bUnitId := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja;
		utZapytanie.uiReadAddress := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru;
		utZapytanie.uiReadQuantity := 1;
		intOdczytCyklicznyTablica := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
			intZnacznikPomocniczy := 1;
		END_IF

// sprawdzenie czy następne żądanie nie jest w kolejności do bieżącego jeśli tak to grupuje je w jedno zapytanie

		WHILE (arOdczytCykliczny[intZnacznikPomocniczy].uiAdresRejestru - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru = 1 AND
				arOdczytCykliczny[intZnacznikPomocniczy].bFunkcja = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja AND
				arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia) DO
				
			utZapytanie.uiReadQuantity := utZapytanie.uiReadQuantity + 1;
			intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
				intZnacznikDriveraOdczytuCyklicznego := 1;
			END_IF
			intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
				intZnacznikPomocniczy := 1;
			END_IF
		END_WHILE
		intOdczytCyklicznyTablicaIlosc := UINT_TO_INT(utZapytanie.uiReadQuantity);
	END_IF
END_IF

// driver komunikacyjny MODBUS RTU

ModbusMasterRTU(xConnect := 		TRUE , 
				I_Port := 			arRTUParametryKomunikacji[utZapytanie.bUnitId].typNazwaPortuKomunikacyjnego , 
				eFrameType := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eTypRamki , 
				udiBaudrate := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].udiPredkosc , 
				usiDataBits := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].usiBityDanych , 
				eParity := 			arRTUParametryKomunikacji[utZapytanie.bUnitId].eParzystosc , 
				eStopBits := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eBityStopu , 
				eHandshake :=		arRTUParametryKomunikacji[utZapytanie.bUnitId].eHandshake , 
				ePhysical := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].eDuplex , 
				tTimeOut := 		arRTUParametryKomunikacji[utZapytanie.bUnitId].tTimeout , 

				xTrigger := 		xDriverWykonajKomunikacje , 
				utQuery := 			utZapytanie , 
				utResponse := 		utOdpowiedz ,
 
				xError =&gt; 			xBladKomunikacji);

// obługa akcji po zakończeniu zadania komunikacji (zapis wartości , zapis błędu itd)
	
negWykonaj(CLK := xDriverWykonajKomunikacje);

IF negWykonaj.Q THEN
// jeżeli był błąd komunikacji wpisz go do tablicy błędów

	IF xBladKomunikacji THEN
		arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.BrakKomunikacji;
		statusbledu := ModbusMasterRTU.oStatus;
		jakiezapytanie := utZapytanie;
		arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] := _GetLongTime();
		IF utZapytaniePoprz.bFunctionCode = 0 THEN
			utZapytaniePoprz := utZapytanie;
		END_IF
		IF arRTUParametryKomunikacjiPoprz[3].udiPredkosc = 0 THEN
			arRTUParametryKomunikacjiPoprz := arRTUParametryKomunikacji;
		END_IF
	ELSE
		IF _GetLongTime() - arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] &gt; tCzasStabilnosciKomunikacji AND arStatusKomunikacji[utZapytanie.bUnitId] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa THEN	
			arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.KomunikacjaPrawidlowa;
		END_IF

// jeżeli zapytanie było żądaniem  wysłania danych

		IF utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWejscBitowych OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWyjscBitowych OR
			utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrow OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych THEN
			intZnacznikOdczytuCyklicznegoPoczatek := 0;
		
// jeżeli był wykonany rozkaz odczytu danych z cyklu "na żądanie" - DOŁOŻONO KAWAŁEK KODU DEBUGUJĄCEGO - ZATRZYMYWANIE SIĘ STEROWNIKA NA ZAREMOWANEJ LINII

			IF intOdczytZadanieTablica &lt;&gt; 0 THEN
				arDebugZapytanie[intDebugZnacznik] := utZapytanie;
				arDebugOdpowiedz[intDebugZnacznik] := utOdpowiedz;
				typDebugOdczytZapisZadanie[intDebugZnacznik] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie];				
				arDebugCzas[intDebugZnacznik] := FuGetDateAndTime();
				fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := 900, intWskaznik := intDebugZnacznik);
//				arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].pZmiennaDoOdczytu^ := utOdpowiedz.awData[0];
			END_IF

// jeżeli był wykonany rozkaz odczytu danych z cyklu "cykliczny"

			IF intOdczytCyklicznyTablica &lt;&gt; 0 THEN
				intLoopOverflow:=1;
				FOR intLoop := 1 TO intOdczytCyklicznyTablicaIlosc DO
					IF arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna &lt;&gt; null THEN
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].ltZnacznikCzasuWyslania := _GetLongTime();
					ELSE
					arOdczytCykliczny[intLoopOverflow].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intLoopOverflow].ltZnacznikCzasuWyslania := _GetLongTime();
					intLoopOverflow:=intLoopOverflow+1;
					END_IF
				END_FOR
			END_IF
		END_IF
	END_IF
	intOdczytZadanieTablica := 0;
	intOdczytCyklicznyTablica := 0;
	intOdczytCyklicznyTablicaIlosc := 0;
END_IF

</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbModbusDriverTCP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="intOdczytZapisZadanieRozmiarBufora">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTCPParametryKomunikacji">
              <type>
                <derived name="typModbusTCPParametryKomunikacji" />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="ModbusMasterTCP">
              <type>
                <derived name="FbMbMasterTcp" />
              </type>
            </variable>
            <variable name="utZapytanie">
              <type>
                <derived name="typMBQuery" />
              </type>
            </variable>
            <variable name="utOdpowiedz">
              <type>
                <derived name="typMbResponse" />
              </type>
            </variable>
            <variable name="xStatusPolaczenia">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBladKomunikacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="typStatusKomunikacji">
              <type>
                <derived name="WagoSysErrorBase.FbResult" />
              </type>
            </variable>
            <variable name="fbTimerRestartuPolaczenia">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasRestartuPolaczenia">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#15s0ms" />
              </initialValue>
            </variable>
            <variable name="tCzasPonowienia">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#15s0ms0us0ns" />
              </initialValue>
            </variable>
            <variable name="tCzasStabilnosciKomunikacji">
              <type>
                <derived name="LTIME" />
              </type>
              <initialValue>
                <simpleValue value="LTIME#30s0ms0us0ns" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas po jakim driver raportuje poprawną komunikację po jej faktycznym odzyskaniu - czas powinien być większy niż czas tCzasPonawiania</xhtml>
              </documentation>
            </variable>
            <variable name="xDriverWykonajKomunikacje">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniaProba">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arStatusKomunikacjiTimestampOstatniBlad">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <derived name="LTIME" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="negWykonaj">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="intZnacznikDriveraOdczytuCyklicznego">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="intZnacznikDriveraOdczytuZapisuZadanie">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuCyklicznegoPoczatek">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikOdczytuZapisuZadanieReferencja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intZnacznikPomocniczy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytZadanieTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablica">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intOdczytCyklicznyTablicaIlosc">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intLoop">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intDebugZnacznik">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> debug</xhtml>
              </documentation>
            </variable>
            <variable name="arDebugZapytanie">
              <type>
                <array>
                  <dimension lower="0" upper="1000" />
                  <baseType>
                    <derived name="typMBQuery" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugOdpowiedz">
              <type>
                <array>
                  <dimension lower="0" upper="1000" />
                  <baseType>
                    <derived name="typMbResponse" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="typDebugOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="0" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arDebugCzas">
              <type>
                <array>
                  <dimension lower="0" upper="1000" />
                  <baseType>
                    <DT />
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">// obsługa odczytu zapisu danych na żądanie

IF intZnacznikDriveraOdczytuZapisuZadanie &lt;&gt; intZnacznikOdczytuZapisuZadanie AND NOT xDriverWykonajKomunikacje THEN
	fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := intOdczytZapisZadanieRozmiarBufora, intWskaznik := intZnacznikDriveraOdczytuZapisuZadanie);
	IF arStatusKomunikacji[arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia] = enumModbusStatus.KomunikacjaPrawidlowa  AND xStatusPolaczenia THEN
		xDriverWykonajKomunikacje := TRUE;
		utZapytanie.bUnitId := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].bFunkcja;
		utZapytanie.uiReadQuantity := 1;
		utZapytanie.uiReadAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.uiWriteAddress := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].uiAdresRejestru;
		utZapytanie.awWriteData[0] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].wWartoscDoZapisania;
		utZapytanie.uiWriteQuantity := 1;
		intOdczytZadanieTablica := intZnacznikDriveraOdczytuZapisuZadanie;
	END_IF
END_IF

// obsługa odczytu zmiennych zapisanych w tabeli

IF NOT xDriverWykonajKomunikacje AND xStatusPolaczenia AND NOT xBladKomunikacji THEN

	intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
	intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
	IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
		intZnacznikDriveraOdczytuCyklicznego := 1;
	END_IF

	WHILE intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego AND _GetLongTime() - arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] &lt; tCzasPonowienia AND
			_GetLongTime() - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltZnacznikCzasuWyslania &lt; arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].ltCzestotliwosc DO
		intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
			intZnacznikDriveraOdczytuCyklicznego := 1;
		END_IF
	END_WHILE

// zapis adresu startowego rejestrów do zapisu

	IF intZnacznikOdczytuCyklicznegoReferencja &lt;&gt; intZnacznikDriveraOdczytuCyklicznego THEN
		xDriverWykonajKomunikacje := TRUE;
		arStatusKomunikacjiTimestampOstatniaProba[arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia] := _GetLongTime();
		utZapytanie.bUnitId := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia;
		utZapytanie.bFunctionCode := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja;
		utZapytanie.uiReadAddress := arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru;
		utZapytanie.uiReadQuantity := 1;
		intOdczytCyklicznyTablica := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikOdczytuCyklicznegoReferencja := intZnacznikDriveraOdczytuCyklicznego;
		intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
		IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
			intZnacznikPomocniczy := 1;
		END_IF

// sprawdzenie czy następne żądanie nie jest w kolejności do bieżącego jeśli tak to grupuje je w jedno zapytanie

		WHILE (arOdczytCykliczny[intZnacznikPomocniczy].uiAdresRejestru - arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].uiAdresRejestru = 1 AND
				arOdczytCykliczny[intZnacznikPomocniczy].bFunkcja = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bFunkcja AND
				arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia) DO
				
			utZapytanie.uiReadQuantity := utZapytanie.uiReadQuantity + 1;
			intZnacznikDriveraOdczytuCyklicznego := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikDriveraOdczytuCyklicznego].bAdresUrzadzenia = 0 THEN
				intZnacznikDriveraOdczytuCyklicznego := 1;
			END_IF
			intZnacznikPomocniczy := intZnacznikDriveraOdczytuCyklicznego + 1;
			IF arOdczytCykliczny[intZnacznikPomocniczy].bAdresUrzadzenia = 0 THEN
				intZnacznikPomocniczy := 1;
			END_IF
		END_WHILE
		intOdczytCyklicznyTablicaIlosc := UINT_TO_INT(utZapytanie.uiReadQuantity);
	END_IF
END_IF

// restart połączenia jeśli brak komunikacji

fbTimerRestartuPolaczenia(IN := (NOT xStatusPolaczenia OR xBladKomunikacji) AND NOT fbTimerRestartuPolaczenia.Q, PT := tCzasRestartuPolaczenia);

// driver komunikacyjny MODBUS TCP

ModbusMasterTCP(xConnect :=			NOT fbTimerRestartuPolaczenia.Q ,
				sHost :=			arTCPParametryKomunikacji.sAdresTCP ,
				wPort := 			arTCPParametryKomunikacji.wPortTCP ,
				utKeepAlive := 		arTCPParametryKomunikacji.utPodtrzymajWtyczkeTCP ,
				eFrameType := 		arTCPParametryKomunikacji.eTypRamki ,
				tTimeOut := 		arTCPParametryKomunikacji.tTimeOut ,
					
				xIsOpen =&gt; 			xStatusPolaczenia ,
				xError =&gt; 			xBladKomunikacji ,
				oStatus =&gt; 			typStatusKomunikacji ,
					
				xTrigger := 		xDriverWykonajKomunikacje , 
				utQuery := 			utZapytanie , 
				utResponse := 		utOdpowiedz);

// obługa akcji po zakończeniu zadania komunikacji (zapis wartości , zapis błędu itd)
	
negWykonaj(CLK := xDriverWykonajKomunikacje);

IF negWykonaj.Q THEN
// jeżeli był błąd komunikacji wpisz go do tablicy błędów

	IF xBladKomunikacji THEN
		arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.BrakKomunikacji;
		arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] := _GetLongTime();
		ELSE
		IF _GetLongTime() - arStatusKomunikacjiTimestampOstatniBlad[utZapytanie.bUnitId] &gt; tCzasStabilnosciKomunikacji AND arStatusKomunikacji[utZapytanie.bUnitId] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa THEN	
			arStatusKomunikacji[utZapytanie.bUnitId] := enumModbusStatus.KomunikacjaPrawidlowa;
		END_IF

// jeżeli zapytanie było żądaniem  wysłania danych

		IF utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWejscBitowych OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytWyjscBitowych OR
			utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrow OR utZapytanie.bFunctionCode = enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych THEN
			intZnacznikOdczytuCyklicznegoPoczatek := 0;
		
// jeżeli był wykonany rozkaz odczytu danych z cyklu "na żądanie"

			IF intOdczytZadanieTablica &lt;&gt; 0 THEN
				arDebugZapytanie[intDebugZnacznik] := utZapytanie;
				arDebugOdpowiedz[intDebugZnacznik] := utOdpowiedz;
				typDebugOdczytZapisZadanie[intDebugZnacznik] := arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie];				
				arDebugCzas[intDebugZnacznik] := FuGetDateAndTime();
				fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := 900, intWskaznik := intDebugZnacznik);
//				arOdczytZapisZadanie[intZnacznikDriveraOdczytuZapisuZadanie].pZmiennaDoOdczytu^ := utOdpowiedz.awData[0];
			END_IF

// jeżeli był wykonany rozkaz odczytu danych z cyklu "cykliczny"

			IF intOdczytCyklicznyTablica &lt;&gt; 0 THEN
				FOR intLoop := 1 TO intOdczytCyklicznyTablicaIlosc DO
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].pZmiennaReferencyjna^ := utOdpowiedz.awData[intLoop - 1];
					arOdczytCykliczny[intOdczytCyklicznyTablica + intLoop - 1].ltZnacznikCzasuWyslania := _GetLongTime();
				END_FOR
			END_IF
		END_IF
	END_IF
	intOdczytZadanieTablica := 0;
	intOdczytCyklicznyTablica := 0;
	intOdczytCyklicznyTablicaIlosc := 0;
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbModbusOdczytZapis" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xOdczytajRejestr">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Żądanie odczytania rejestru</xhtml>
              </documentation>
            </variable>
            <variable name="bAdresOdczyt">
              <type>
                <BYTE />
              </type>
              <initialValue>
                <simpleValue value="2#101000" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Adres urządzenia, z którego ma zostać dokonany odczyt</xhtml>
              </documentation>
            </variable>
            <variable name="uiAdresRejestruOdczyt">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="2010" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Adres rejestru, z którego ma zostać dokonany odczyt</xhtml>
              </documentation>
            </variable>
            <variable name="xZapiszRejestr">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Żądanie zapisania rejestru</xhtml>
              </documentation>
            </variable>
            <variable name="bAdresZapis">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Adres urządzenia, na który ma zostać dokonany zapis</xhtml>
              </documentation>
            </variable>
            <variable name="uiAdresRejestruZapis">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Adres rejestru, na który ma zostać dokonany zapis</xhtml>
              </documentation>
            </variable>
            <variable name="wZawartoscRejestruZapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Dane do zapisu</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#15s0ms" />
              </initialValue>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="wZawartoscRejestruOdczyt">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zawartość odczytanego rejestru</xhtml>
              </documentation>
            </variable>
            <variable name="xPierwszyCykl">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pierwszy cykl programu</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Artur Wyszomirski, 2019-10-11 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-10-22: - dodanie wyszukiwania wolnego miejsca w tablicy arModbusOdczytCykliczny
									- wprowadzenie domyślnych wartości dla bAdresOdczyt i uiAdresRejestruOdczyt
									- przypisywanie wartości ltCzestotliwosc i pZmiennaReferencyjna w pierwszym cyklu programu

Opis:					Odczyt i zapis dowolnego rejestru Modbus				
*)

// Pierwszy cykl programu
IF xPierwszyCykl THEN
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
END_IF

// Odczyt
IF xPierwszyCykl THEN
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wZawartoscRejestruOdczyt);
END_IF
IF xOdczytajRejestr OR xPierwszyCykl THEN
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdresOdczyt;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uiAdresRejestruOdczyt;

END_IF

// Zapis
IF xZapiszRejestr THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdresZapis,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uiAdresRejestruZapis,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wZawartoscRejestruZapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
END_IF
	
xPierwszyCykl := FALSE;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSAnalizatorDirisA40" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="rDeadband">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Napięcia fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wNapiecieL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNapiecieL1Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyNapiecieL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyNapiecieL1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyNapiecieL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNapiecieL2Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyNapiecieL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyNapiecieL2Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyNapiecieL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rNapiecieL3Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyNapiecieL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyNapiecieL3Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyNapiecieL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wNapiecieL1L2Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Napięcia przewodowe</xhtml>
              </documentation>
            </variable>
            <variable name="wNapiecieL1L2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL1L2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL1L2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL1L2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wNapiecieL2L3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL2L3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL2L3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL2L3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL2L3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wNapiecieL3L1Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wNapiecieL3L1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rNapiecieL3L1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbNapiecieL3L1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rNapiecieL3L1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wCzestotliwoscHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Częstotliwość</xhtml>
              </documentation>
            </variable>
            <variable name="wCzestotliwoscLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rCzestotliwosc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbCzestotliwosc">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rCzestotliwoscZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wCzasPracyAnalizatoraHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Czas pracy</xhtml>
              </documentation>
            </variable>
            <variable name="wCzasPracyAnalizatoraLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rCzasPracyAnalizatora">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbCzasPracyAnalizatora">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rCzasPracyAnalizatoraZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Prądy fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wPradL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradL1Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyPradL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyPradL1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPradL1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wPradL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradL2Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyPradL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyPradL2Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPradL2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wPradL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradL3Pamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyPradL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyPradL3Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPradL3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wPradNHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradNLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradN">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradN">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradNZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradSredniL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Prądy średnie fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wPradSredniL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradSredniL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradSredniL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradSredniL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradSredniL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradSredniL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradSredniL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPradSredniL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPradSredniL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPradSredniL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPradSredniL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPradSredni">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Prąd średni (I1+I2+I3)/3</xhtml>
              </documentation>
            </variable>
            <variable name="fbPradSredni">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPradSredniZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaCalkowitaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc 3-fazowa czynna</xhtml>
              </documentation>
            </variable>
            <variable name="wMocCzynnaCalkowitaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaCalkowita">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaCalkowita">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaCalkowitaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaCalkowitaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc 3-fazowa bierna</xhtml>
              </documentation>
            </variable>
            <variable name="wMocBiernaCalkowitaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaCalkowita">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaCalkowita">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaCalkowitaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaCalkowitaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc 3-fazowa pozorna</xhtml>
              </documentation>
            </variable>
            <variable name="wMocPozornaCalkowitaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaCalkowita">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaCalkowita">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaCalkowitaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyCalkowityHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Całkowity współczynnik mocy</xhtml>
              </documentation>
            </variable>
            <variable name="wWspolczynnikMocyCalkowityLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyCalkowity">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyCalkowity">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyCalkowityZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc Czynna fazowa</xhtml>
              </documentation>
            </variable>
            <variable name="wMocCzynnaL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocCzynnaL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocCzynnaL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc Bierna fazowa</xhtml>
              </documentation>
            </variable>
            <variable name="wMocBiernaL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocBiernaL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocBiernaL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc Pozorna fazowa</xhtml>
              </documentation>
            </variable>
            <variable name="wMocPozornaL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocPozornaL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocPozornaL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Fazowe współczynniki mocy</xhtml>
              </documentation>
            </variable>
            <variable name="wWspolczynnikMocyL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wWspolczynnikMocyL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWspolczynnikMocyL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rWspolczynnikMocyL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaCzynnaPobranaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Energia pobrana</xhtml>
              </documentation>
            </variable>
            <variable name="wEnergiaCzynnaPobranaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaCzynnaPobrana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaCzynnaPobrana">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaCzynnaPobranaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaBiernaPobranaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnergiaBiernaPobranaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaBiernaPobrana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaBiernaPobrana">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaBiernaPobranaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaPozornaPobranaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnergiaPozornaPobranaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaPozornaPobrana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaPozornaPobrana">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaPozornaPobranaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocCzynnaSredniaHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Moc średnia</xhtml>
              </documentation>
            </variable>
            <variable name="wMocCzynnaSredniaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocCzynnaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocCzynnaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocCzynnaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocBiernaSredniaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocBiernaSredniaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocBiernaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocBiernaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocBiernaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocPozornaSredniaHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMocPozornaSredniaLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMocPozornaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMocPozornaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocPozornaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL1Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Maksymalne napięcia fazowe</xhtml>
              </documentation>
            </variable>
            <variable name="wMaksymalneNapiecieL1Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMaksymalneNapiecieL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL2Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL2Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMaksymalneNapiecieL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL3Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMaksymalneNapiecieL3Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMaksymalneNapiecieL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMaksymalneNapiecieL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDNapieciaL1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">THD napięcia</xhtml>
              </documentation>
            </variable>
            <variable name="rTHDNapieciaL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDNapieciaL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDNapieciaL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDNapieciaL2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDNapieciaL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDNapieciaL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDNapieciaL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDNapieciaL3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDNapieciaL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDNapieciaL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDNapieciaL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDPraduL1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">THD prądu</xhtml>
              </documentation>
            </variable>
            <variable name="rTHDPraduL1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDPraduL1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDPraduL1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDPraduL2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDPraduL2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDPraduL2">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDPraduL2Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTHDPraduL3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTHDPraduL3">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTHDPraduL3">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTHDPraduL3Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="intStatus">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="enumPPPSUrzadenieStatus.Prawidlowy" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> status urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="intStatusZaraportowana">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> status urządzenia zaraportowany</xhtml>
              </documentation>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-09-04-PK
Prawa majątkowe: 		Solwena Sp. z o.o., 
Opis:					fb służy do komunikacji po Modbus RTU z analizatorem sieci ECA0 na budynkach PPP Sopot
						Analizator Diris A40
						
Aktualizacje:			2018-11-20-JB: Poprawienie adresów Modbusowych
						2019-01-21-JC: Przeliczanie charakteru mocy biernej oraz współczynnika mocy (czynna/indukcyjna)
						2019-03-26-AWy: Wyłączenie (wykomentowanie) eneregii oddanej czynnej i biernej
						2019-04-01-AWy: Przeliczenie pomocnicze dla mocy czynnej całkowitej
						2019-05-05-AWy: Dodanie bloków włączania autonomizacji i kontroli komunikacji (analogicznie do pozostałych fb). Usunięcie zmiennej xBrakKomunikacji
						2019-08-14-AWy: Przeniesienie xAutonomizacja do VAR_INPUT
						2019-09-04-AWy: Usunięcie bugów z obliczania współczynnika mocy i mocy biernej.
						2019-09-05-Awy: Zmiana sposobu przeliczania wartości odczytanych po modbusie (sklejenie w DINT i konwersja na REAL). Usunięcie energii oddanej czynnej i biernej.
										Zmiana nazwy atrybutu FACTOR na FACTOR3PH.
						2019-10-18-JB: Zmiana dead-bandów.
						2019-10-24-AWy: Zmiana wartości tCzasMinimalny dla czasu pracy analizatora.
	
*)

//inicjalizacja sterownika

fbInicjalizacyjnyTimer(IN := NOT xPoInicjalizacji , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rNapiecieL1Zaraportowana := rNapiecieL1;
	rNapiecieL2Zaraportowana := rNapiecieL2;
	rNapiecieL3Zaraportowana :=sdfsdgsdf rNapiecieL3;
	rNapiecieL1L2Zaraportowana := rNapiecieL1L2;
	rNapiecieL2L3Zaraportowana := rNapiecieL2L3;
	rNapiecieL3L1Zaraportowana := rNapiecieL3L1;
	rCzestotliwoscZaraportowana := rCzestotliwosc;
	rCzasPracyAnalizatoraZaraportowana := rCzasPracyAnalizatora;
	rPradL1Zaraportowana := rPradL1;
	rPradL2Zaraportowana := rPradL2;
	rPradL3Zaraportowana := rPradL3;
	rPradNZaraportowana := rPradN;
	rPradSredniL1Zaraportowana := rPradSredniL1;
	rPradSredniL2Zaraportowana := rPradSredniL2;
	rPradSredniL3Zaraportowana := rPradSredniL3;
	rPradSredniZaraportowana := rPradSredni;
	rMocCzynnaCalkowitaZaraportowana := rMocCzynnaCalkowita;
	rMocBiernaCalkowitaZaraportowana := rMocBiernaCalkowita;
	rMocPozornaCalkowitaZaraportowana := rMocPozornaCalkowita;
	rWspolczynnikMocyCalkowityZaraportowana := rWspolczynnikMocyCalkowity;
	rMocCzynnaL1Zaraportowana := rMocCzynnaL1;
	rMocCzynnaL2Zaraportowana := rMocCzynnaL2;
	rMocCzynnaL3Zaraportowana := rMocCzynnaL3;
	rMocBiernaL1Zaraportowana := rMocBiernaL1;
	rMocBiernaL2Zaraportowana := rMocBiernaL2;
	rMocBiernaL3Zaraportowana := rMocBiernaL3;
	rMocPozornaL1Zaraportowana := rMocPozornaL1;
	rMocPozornaL2Zaraportowana := rMocPozornaL2;
	rMocPozornaL3Zaraportowana := rMocPozornaL3;
	rWspolczynnikMocyL1Zaraportowana := rWspolczynnikMocyL1;
	rWspolczynnikMocyL2Zaraportowana := rWspolczynnikMocyL2;
	rWspolczynnikMocyL3Zaraportowana := rWspolczynnikMocyL3;
	rEnergiaCzynnaPobranaZaraportowana := rEnergiaCzynnaPobrana;
	rEnergiaBiernaPobranaZaraportowana := rEnergiaBiernaPobrana;
	rEnergiaPozornaPobranaZaraportowana := rEnergiaPozornaPobrana;
	rMocCzynnaSredniaZaraportowana := rMocCzynnaSrednia;
	rMocBiernaSredniaZaraportowana := rMocBiernaSrednia;
	rMocPozornaSredniaZaraportowana := rMocPozornaSrednia;
	rMaksymalneNapiecieL1Zaraportowana := rMaksymalneNapiecieL1;
	rMaksymalneNapiecieL2Zaraportowana := rMaksymalneNapiecieL2;
	rMaksymalneNapiecieL3Zaraportowana := rMaksymalneNapiecieL3;
	rTHDNapieciaL1Zaraportowana := rTHDNapieciaL1;
	rTHDNapieciaL2Zaraportowana := rTHDNapieciaL2;
	rTHDNapieciaL3Zaraportowana := rTHDNapieciaL3;
	rTHDPraduL1Zaraportowana := rTHDPraduL1;
	rTHDPraduL2Zaraportowana := rTHDPraduL2;
	rTHDPraduL3Zaraportowana := rTHDPraduL3;
	intStatusZaraportowana := intStatus;
	xPoInicjalizacji := TRUE;
	dupa dupa dupa
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE

//deklaracja rejestrow do odczytu
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50512;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasPracyAnalizatoraHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50513;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasPracyAnalizatoraLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50514;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1L2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50515;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1L2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50516;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2L3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50517;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2L3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50518;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3L1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50519;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3L1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50520;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50521;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50522;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50523;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50524;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50525;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNapiecieL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50526;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzestotliwoscHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50527;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzestotliwoscLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50528;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50529;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50530;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50531;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50532;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50533;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50534;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradNHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50535;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradNLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50536;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaCalkowitaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50537;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaCalkowitaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50538;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaCalkowitaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50539;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaCalkowitaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50540;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaCalkowitaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50541;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaCalkowitaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50542;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyCalkowityHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50543;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyCalkowityLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50554;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50555;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50552;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50553;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50550;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50551;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	


	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50544;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50545;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50546;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50547;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50548;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50549;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50556;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50557;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50558;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50559;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50560;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50561;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50562;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50563;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50564;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50565;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50566;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50567;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wWspolczynnikMocyL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 856;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCzynnaPobranaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 857;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCzynnaPobranaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 858;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaBiernaPobranaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 859;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaBiernaPobranaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 860;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaPozornaPobranaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 861;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaPozornaPobranaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51038;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51039;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51040;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51041;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51042;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51043;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPradSredniL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51046;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaSredniaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51047;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocCzynnaSredniaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51052;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaSredniaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51053;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocBiernaSredniaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51054;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaSredniaHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51055;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocPozornaSredniaLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51062;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL1Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51063;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL1Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51064;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL2Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51065;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL2Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51066;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL3Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51067;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalneNapiecieL3Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51539;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDNapieciaL1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51540;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDNapieciaL2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51541;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDNapieciaL3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51542;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDPraduL1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51543;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDPraduL2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51544;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTHDPraduL3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
END_IF

//obsluga komunikatu przychodzacego z IZE

IF 	sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			//Napięcia fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1=' , sWartosc := REAL_TO_STRING(rNapiecieL1) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2=' , sWartosc := REAL_TO_STRING(rNapiecieL2) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3=' , sWartosc := REAL_TO_STRING(rNapiecieL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Napięcia przewodowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL1L2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1L2=' , sWartosc := REAL_TO_STRING(rNapiecieL1L2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL2L3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2L3=' , sWartosc := REAL_TO_STRING(rNapiecieL2L3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTL3L1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3L1=' , sWartosc := REAL_TO_STRING(rNapiecieL3L1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Częstotliwość 
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'CZEST=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZEST=' , sWartosc := REAL_TO_STRING(rCzestotliwosc) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Czas pracy 
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'CZAS=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZAS=' , sWartosc := REAL_TO_STRING(rCzasPracyAnalizatora) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Prądy fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL1=' , sWartosc := REAL_TO_STRING(rPradL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL2=' , sWartosc := REAL_TO_STRING(rPradL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL3=' , sWartosc := REAL_TO_STRING(rPradL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERN=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERN=' , sWartosc := REAL_TO_STRING(rPradN) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Prądy średnie fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVGL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL1=' , sWartosc := REAL_TO_STRING(rPradSredniL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVGL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL2=' , sWartosc := REAL_TO_STRING(rPradSredniL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVGL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL3=' , sWartosc := REAL_TO_STRING(rPradSredniL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Prąd średni
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERAVG=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVG=' , sWartosc := REAL_TO_STRING(rPradSredni) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Moce 3-fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := '=' , sWartosc := REAL_TO_STRING(rMocCzynnaCalkowita) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWBE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWBE=' , sWartosc := REAL_TO_STRING(rMocBiernaCalkowita) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWPE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWPE=' , sWartosc := REAL_TO_STRING(rMocPozornaCalkowita) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Współczynnik mocy 3-fazowy
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTOR3PH=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTOR3PH=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyCalkowity) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			//Moce czynne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCECL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CL1=' , sWartosc := REAL_TO_STRING(rMocCzynnaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCECL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CL2=' , sWartosc := REAL_TO_STRING(rMocCzynnaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCECL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CL3=' , sWartosc := REAL_TO_STRING(rMocCzynnaL3) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			//Moce bierne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEBL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BL1=' , sWartosc := REAL_TO_STRING(rMocBiernaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEBL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL2=' , sWartosc := REAL_TO_STRING(rMocBiernaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEBL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL3=' , sWartosc := REAL_TO_STRING(rMocBiernaL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Moce pozorne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEPL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL1=' , sWartosc := REAL_TO_STRING(rMocPozornaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEPL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL2=' , sWartosc := REAL_TO_STRING(rMocPozornaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCEPL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL3=' , sWartosc := REAL_TO_STRING(rMocPozornaL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Współczynniki mocy fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTORL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL1=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTORL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL2=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL2) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FACTORL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL3=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Energia pobrana
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENCE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCE=' , sWartosc := REAL_TO_STRING(rEnergiaCzynnaPobrana) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENBE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENBE=' , sWartosc := REAL_TO_STRING(rEnergiaBiernaPobrana) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENPE=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENPE=' , sWartosc := REAL_TO_STRING(rEnergiaPozornaPobrana) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Moce średnie
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWAVGEC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEC=' , sWartosc := REAL_TO_STRING(rMocCzynnaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWAVGEB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEB=' , sWartosc := REAL_TO_STRING(rMocBiernaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWAVGEP=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGCEP=' , sWartosc := REAL_TO_STRING(rMocPozornaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//Napięcia maksymalne fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTMAXL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL1=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTMAXL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL2=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTMAXL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL3=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			//THD napięcia, fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTTHDL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL1=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTTHDL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL2=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLTTHDL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL3=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL3) , xOverFlow := xOverFlow);
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF		
			END_IF
			//THD prądu, fazowe
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERTHDL1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL1=' , sWartosc := REAL_TO_STRING(rTHDPraduL1) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERTHDL2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL2=' , sWartosc := REAL_TO_STRING(rTHDPraduL2) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF	
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'AMPERTHDL3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL3=' , sWartosc := REAL_TO_STRING(rTHDPraduL3) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 20 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// dokonywanie obliczeń
	// Napięcia fazowe
fbNapiecieL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL1Hi, 16) OR wNapiecieL1Lo), 
				rWartoscWejsciowaZaraportowana := rNapiecieL1Zaraportowana,
				rDeadband := 5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL1);

fbNapiecieL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL2Hi, 16) OR wNapiecieL2Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL2Zaraportowana,
				rDeadband := 5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL2);

fbNapiecieL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL3Hi, 16) OR wNapiecieL3Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL3Zaraportowana,
				rDeadband := 5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL3);
				
	// Napięcia przewodowe
fbNapiecieL1L2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL1L2Hi, 16) OR wNapiecieL1L2Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL1L2Zaraportowana,
				rDeadband := 3,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL1L2);

fbNapiecieL2L3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL2L3Hi, 16) OR wNapiecieL2L3Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL2L3Zaraportowana,
				rDeadband := 3,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL2L3);

fbNapiecieL3L1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wNapiecieL3L1Hi, 16) OR wNapiecieL3L1Lo),
				rWartoscWejsciowaZaraportowana := rNapiecieL3L1Zaraportowana,
				rDeadband := 3,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rNapiecieL3L1);
				
	// Częstotliwość
fbCzestotliwosc(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wCzestotliwoscHi, 16) OR wCzestotliwoscLo),
					rWartoscWejsciowaZaraportowana := rCzestotliwoscZaraportowana,
					rDeadband := 0.05,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.01,
					rWartoscWyjsciowa =&gt; rCzestotliwosc);
				
	// Czas pracy
fbCzasPracyAnalizatora(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wCzasPracyAnalizatoraHi, 16) OR wCzasPracyAnalizatoraLo),
						rWartoscWejsciowaZaraportowana := rCzasPracyAnalizatoraZaraportowana,
						rDeadband := 1,
						tCzasMinimalny := tMaksymalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 36,
						rWartoscWyjsciowa =&gt; rCzasPracyAnalizatora);
				
	// Prądy fazowe
fbPradL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradL1Hi, 16) OR wPradL1Lo),
			rWartoscWejsciowaZaraportowana := rPradL1Zaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradL1);

fbPradL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradL2Hi, 16) OR wPradL2Lo),
			rWartoscWejsciowaZaraportowana := rPradL2Zaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradL2);

fbPradL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradL3Hi, 16) OR wPradL3Lo),
			rWartoscWejsciowaZaraportowana := rPradL3Zaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradL3);

fbPradN(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradNHi, 16) OR wPradNLo),
			rWartoscWejsciowaZaraportowana := rPradNZaraportowana,
			rDeadband := 3,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.001,
			rWartoscWyjsciowa =&gt; rPradN);
				
	// Prądy średnie fazowe
fbPradSredniL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradSredniL1Hi, 16) OR wPradSredniL1Lo),
				rWartoscWejsciowaZaraportowana := rPradSredniL1Zaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rPradSredniL1);

fbPradSredniL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradSredniL2Hi, 16) OR wPradSredniL2Lo),
				rWartoscWejsciowaZaraportowana := rPradSredniL2Zaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rPradSredniL2);

fbPradSredniL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wPradSredniL3Hi, 16) OR wPradSredniL3Lo),
				rWartoscWejsciowaZaraportowana := rPradSredniL3Zaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rPradSredniL3);
				
	// Prąd średni (I1+I2+I3)/3
fbPradSredni(	rWartoscWejsciowa := (rPradSredniL1 + rPradSredniL2 + rPradSredniL3) / 3,
				rWartoscWejsciowaZaraportowana := rPradSredniZaraportowana,
				rDeadband := 1.5,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 1,
				rWartoscWyjsciowa =&gt; rPradSredni);
				
	// Moce 3-fazowe
fbMocCzynnaCalkowita(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaCalkowitaHi, 16) OR wMocCzynnaCalkowitaLo),
						rWartoscWejsciowaZaraportowana := rMocCzynnaCalkowitaZaraportowana,
						rDeadband := 1000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocCzynnaCalkowita);
	
fbMocBiernaCalkowita(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaCalkowitaHi, 16) OR wMocBiernaCalkowitaLo),
						rWartoscWejsciowaZaraportowana := rMocBiernaCalkowitaZaraportowana,
						rDeadband := 100,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocBiernaCalkowita);

fbMocPozornaCalkowita(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaCalkowitaHi, 16) OR wMocPozornaCalkowitaLo),
						rWartoscWejsciowaZaraportowana := rMocPozornaCalkowitaZaraportowana,
						rDeadband := 1000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocPozornaCalkowita);
		
	// Całkowity współczynnik mocy
fbWspolczynnikMocyCalkowity(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyCalkowityHi, 16) OR wWspolczynnikMocyCalkowityLo),
								rWartoscWejsciowaZaraportowana := rWspolczynnikMocyCalkowityZaraportowana,
								rDeadband := 0.05,
								tCzasMinimalny := tMinimalnyCzasRaportowania,
								tCzasMaksymalny := tMaksymalnyCzasRaportowania,
								rWynikMnoznik := 0.001,
								rWartoscWyjsciowa =&gt; rWspolczynnikMocyCalkowity);
				
	// Moce czynne fazowe
fbMocCzynnaL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaL1Hi, 16) OR wMocCzynnaL1Lo),
				rWartoscWejsciowaZaraportowana := rMocCzynnaL1Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocCzynnaL1);
				
fbMocCzynnaL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaL2Hi, 16) OR wMocCzynnaL2Lo),
				rWartoscWejsciowaZaraportowana := rMocCzynnaL2Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocCzynnaL2);
				
fbMocCzynnaL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaL3Hi, 16) OR wMocCzynnaL3Lo),
				rWartoscWejsciowaZaraportowana := rMocCzynnaL3Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocCzynnaL3);

	// Moce bierne fazowe
fbMocBiernaL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaL1Hi, 16) OR wMocBiernaL1Lo),
				rWartoscWejsciowaZaraportowana := rMocBiernaL1Zaraportowana,
				rDeadband := 50,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocBiernaL1);
				
fbMocBiernaL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaL2Hi, 16) OR wMocBiernaL2Lo),
				rWartoscWejsciowaZaraportowana := rMocBiernaL2Zaraportowana,
				rDeadband := 50,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocBiernaL2);
				
fbMocBiernaL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaL3Hi, 16) OR wMocBiernaL3Lo),
				rWartoscWejsciowaZaraportowana := rMocBiernaL3Zaraportowana,
				rDeadband := 50,sdfgsdfg
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocBiernaL3);
				
	// Moce pozorne fazowe
fbMocPozornaL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaL1Hi, 16) OR wMocPozornaL1Lo),
				rWartoscWejsciowaZaraportowana := rMocPozornaL1Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocPozornaL1);
				
fbMocPozornaL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaL2Hi, 16) OR wMocPozornaL2Lo),
				rWartoscWejsciowaZaraportowana := rMocPozornaL2Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocPozornaL2);
				
fbMocPozornaL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaL3Hi, 16) OR wMocPozornaL3Lo),
				rWartoscWejsciowaZaraportowana := rMocPozornaL3Zaraportowana,
				rDeadband := 500,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 10,
				rWartoscWyjsciowa =&gt; rMocPozornaL3);
				
	// Współczynniki mocy fazowe
fbWspolczynnikMocyL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyL1Hi, 16) OR wWspolczynnikMocyL1Lo),
						rWartoscWejsciowaZaraportowana := rWspolczynnikMocyL1Zaraportowana,
						rDeadband := 0.05,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.001,
						rWartoscWyjsciowa =&gt; rWspolczynnikMocyL1);
				
fbWspolczynnikMocyL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyL2Hi, 16) OR wWspolczynnikMocyL2Lo),
						rWartoscWejsciowaZaraportowana := rWspolczynnikMocyL2Zaraportowana,
						rDeadband := 0.05,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.001,
						rWartoscWyjsciowa =&gt; rWspolczynnikMocyL2);
				
fbWspolczynnikMocyL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wWspolczynnikMocyL3Hi, 16) OR wWspolczynnikMocyL3Lo),
						rWartoscWejsciowaZaraportowana := rWspolczynnikMocyL3Zaraportowana,
						rDeadband := 0.05,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.001,
						rWartoscWyjsciowa =&gt; rWspolczynnikMocyL3);
				
	// Energia pobrana
fbEnergiaCzynnaPobrana(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wEnergiaCzynnaPobranaHi, 16) OR wEnergiaCzynnaPobranaLo),
						rWartoscWejsciowaZaraportowana := rEnergiaCzynnaPobranaZaraportowana,
						rDeadband := 3600000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 3600000,
						rWartoscWyjsciowa =&gt; rEnergiaCzynnaPobrana);
				
fbEnergiaBiernaPobrana(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wEnergiaBiernaPobranaHi, 16) OR wEnergiaBiernaPobranaLo),
						rWartoscWejsciowaZaraportowana := rEnergiaBiernaPobranaZaraportowana,
						rDeadband := 1800000,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 3600000,
						rWartoscWyjsciowa =&gt; rEnergiaBiernaPobrana);
				
fbEnergiaPozornaPobrana(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wEnergiaPozornaPobranaHi, 16) OR wEnergiaPozornaPobranaLo),
							rWartoscWejsciowaZaraportowana := rEnergiaPozornaPobranaZaraportowana,
							rDeadband := 3600000,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 3600000,
							rWartoscWyjsciowa =&gt; rEnergiaPozornaPobrana);

	// Moce średnie
fbMocCzynnaSrednia(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocCzynnaSredniaHi, 16) OR wMocCzynnaSredniaLo),
					rWartoscWejsciowaZaraportowana := rMocCzynnaSredniaZaraportowana,
					rDeadband := 500,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 10,
					rWartoscWyjsciowa =&gt; rMocCzynnaSrednia);
				
fbMocBiernaSrednia(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocBiernaSredniaHi, 16) OR wMocBiernaSredniaLo),
					rWartoscWejsciowaZaraportowana := rMocBiernaSredniaZaraportowana,
					rDeadband := 500,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 10,
					rWartoscWyjsciowa =&gt; rMocBiernaSrednia);
				
fbMocPozornaSrednia(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMocPozornaSredniaHi, 16) OR wMocPozornaSredniaLo),
						rWartoscWejsciowaZaraportowana := rMocPozornaSredniaZaraportowana,
						rDeadband := 500,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 10,
						rWartoscWyjsciowa =&gt; rMocPozornaSrednia);
				
	//Maksymalne napięcia fazowe
fbMaksymalneNapiecieL1(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMaksymalneNapiecieL1Hi, 16) OR wMaksymalneNapiecieL1Lo),
				rWartoscWejsciowaZaraportowana := rMaksymalneNapiecieL1Zaraportowana,
				rDeadband := 20,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rMaksymalneNapiecieL1);
				
fbMaksymalneNapiecieL2(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMaksymalneNapiecieL2Hi, 16) OR wMaksymalneNapiecieL2Lo),
				rWartoscWejsciowaZaraportowana := rMaksymalneNapiecieL2Zaraportowana,
				rDeadband := 20,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rMaksymalneNapiecieL2);
				
fbMaksymalneNapiecieL3(	rWartoscWejsciowa := DINT_TO_REAL(SHL(wMaksymalneNapiecieL3Hi, 16) OR wMaksymalneNapiecieL3Lo),
				rWartoscWejsciowaZaraportowana := rMaksymalneNapiecieL3Zaraportowana,
				rDeadband := 20,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.01,
				rWartoscWyjsciowa =&gt; rMaksymalneNapiecieL3);
			
	// THD napięcia
fbTHDNapieciaL1(	rWartoscWejsciowa := WORD_TO_REAL(wTHDNapieciaL1),
					rWartoscWejsciowaZaraportowana := rTHDNapieciaL1Zaraportowana,
					rDeadband := 0.08,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.001,
					rWartoscWyjsciowa =&gt; rTHDNapieciaL1);
				
fbTHDNapieciaL2(	rWartoscWejsciowa := WORD_TO_REAL(wTHDNapieciaL2),
					rWartoscWejsciowaZaraportowana := rTHDNapieciaL2Zaraportowana,
					rDeadband := 0.08,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.001,
					rWartoscWyjsciowa =&gt; rTHDNapieciaL2);
				
fbTHDNapieciaL3(	rWartoscWejsciowa := WORD_TO_REAL(wTHDNapieciaL3),
					rWartoscWejsciowaZaraportowana := rTHDNapieciaL3Zaraportowana,
					rDeadband := 0.08,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 0.001,
					rWartoscWyjsciowa =&gt; rTHDNapieciaL3);
				
	// THD prądu
fbTHDPraduL1(	rWartoscWejsciowa := WORD_TO_REAL(wTHDPraduL1),
				rWartoscWejsciowaZaraportowana := rTHDPraduL1Zaraportowana,
				rDeadband := 0.08,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rTHDPraduL1);
				
fbTHDPraduL2(	rWartoscWejsciowa := WORD_TO_REAL(wTHDPraduL2),
				rWartoscWejsciowaZaraportowana := rTHDPraduL2Zaraportowana,
				rDeadband := 0.08,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rTHDPraduL2);
				
fbTHDPraduL3(	rWartoscWejsciowa := WORD_TO_REAL(wTHDPraduL3),
				rWartoscWejsciowaZaraportowana := rTHDPraduL3Zaraportowana,
				rDeadband := 0.08,
				tCzasMinimalny := tMinimalnyCzasRaportowania,
				tCzasMaksymalny := tMaksymalnyCzasRaportowania,
				rWynikMnoznik := 0.001,
				rWartoscWyjsciowa =&gt; rTHDPraduL3);
				
	
//Raportowanie typu M do IZE wartosci odczytanych z Modbusa			
IF (rNapiecieL1 &lt;&gt; rNapiecieL1Zaraportowana OR rNapiecieL2 &lt;&gt; rNapiecieL2Zaraportowana OR rNapiecieL3 &lt;&gt; rNapiecieL3Zaraportowana OR rNapiecieL1L2 &lt;&gt; rNapiecieL1L2Zaraportowana 
OR rNapiecieL2L3 &lt;&gt; rNapiecieL2L3Zaraportowana OR rNapiecieL3L1 &lt;&gt; rNapiecieL3L1Zaraportowana OR rCzestotliwosc &lt;&gt; rCzestotliwoscZaraportowana OR rCzasPracyAnalizatora &lt;&gt; rCzasPracyAnalizatoraZaraportowana 
OR rPradL1 &lt;&gt; rPradL1Zaraportowana OR rPradL2 &lt;&gt; rPradL2Zaraportowana OR rPradL3 &lt;&gt; rPradL3Zaraportowana OR rPradN &lt;&gt; rPradNZaraportowana OR rPradSredniL1 &lt;&gt; rPradSredniL1Zaraportowana 
OR rPradSredniL2 &lt;&gt; rPradSredniL2Zaraportowana OR rPradSredniL3 &lt;&gt; rPradSredniL3Zaraportowana OR rPradSredni &lt;&gt; rPradSredniZaraportowana OR rMocCzynnaCalkowita &lt;&gt; rMocCzynnaCalkowitaZaraportowana 
OR rMocBiernaCalkowita &lt;&gt; rMocBiernaCalkowitaZaraportowana OR rMocPozornaCalkowita &lt;&gt; rMocPozornaCalkowitaZaraportowana OR rWspolczynnikMocyCalkowity &lt;&gt; rWspolczynnikMocyCalkowityZaraportowana 
OR rMocCzynnaL1 &lt;&gt; rMocCzynnaL1Zaraportowana OR rMocCzynnaL2 &lt;&gt; rMocCzynnaL2Zaraportowana OR rMocCzynnaL3 &lt;&gt; rMocCzynnaL3Zaraportowana OR rMocBiernaL1 &lt;&gt; rMocBiernaL1Zaraportowana 
OR rMocBiernaL2 &lt;&gt; rMocBiernaL2Zaraportowana OR rMocBiernaL3 &lt;&gt; rMocBiernaL3Zaraportowana OR rMocPozornaL1 &lt;&gt; rMocPozornaL1Zaraportowana OR rMocPozornaL2 &lt;&gt; rMocPozornaL2Zaraportowana 
OR rMocPozornaL3 &lt;&gt; rMocPozornaL3Zaraportowana OR rWspolczynnikMocyL1 &lt;&gt; rWspolczynnikMocyL1Zaraportowana OR rWspolczynnikMocyL2 &lt;&gt; rWspolczynnikMocyL2Zaraportowana 
OR rWspolczynnikMocyL3 &lt;&gt; rWspolczynnikMocyL3Zaraportowana OR rEnergiaCzynnaPobrana &lt;&gt; rEnergiaCzynnaPobranaZaraportowana OR rEnergiaBiernaPobrana &lt;&gt; rEnergiaBiernaPobranaZaraportowana 
OR rEnergiaPozornaPobrana &lt;&gt; rEnergiaPozornaPobranaZaraportowana OR rMocCzynnaSrednia &lt;&gt; rMocCzynnaSredniaZaraportowana OR rMocBiernaSrednia &lt;&gt; rMocBiernaSredniaZaraportowana 
OR rMocPozornaSrednia &lt;&gt; rMocPozornaSredniaZaraportowana OR rMaksymalneNapiecieL1 &lt;&gt; rMaksymalneNapiecieL1Zaraportowana OR rMaksymalneNapiecieL2 &lt;&gt; rMaksymalneNapiecieL2Zaraportowana 
OR rMaksymalneNapiecieL3 &lt;&gt; rMaksymalneNapiecieL3Zaraportowana OR rTHDNapieciaL1 &lt;&gt; rTHDNapieciaL1Zaraportowana OR rTHDNapieciaL2 &lt;&gt; rTHDNapieciaL2Zaraportowana OR rTHDNapieciaL3 &lt;&gt; rTHDNapieciaL3Zaraportowana 
OR rTHDPraduL1 &lt;&gt; rTHDPraduL1Zaraportowana OR rTHDPraduL2 &lt;&gt; rTHDPraduL2Zaraportowana OR rTHDPraduL3 &lt;&gt; rTHDPraduL3Zaraportowana) AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa 
AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF 
				
IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intStatus &lt;&gt; intStatusZaraportowana THEN
		intStatusZaraportowana := intStatus;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STATUS=' , sWartosc := INT_TO_STRING(intStatus) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	//Napięcia fazowe
	IF rNapiecieL1 &lt;&gt; rNapiecieL1Zaraportowana THEN
		rNapiecieL1Zaraportowana := rNapiecieL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1=' , sWartosc := REAL_TO_STRING(rNapiecieL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rNapiecieL2 &lt;&gt; rNapiecieL2Zaraportowana THEN
		rNapiecieL2Zaraportowana := rNapiecieL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2=' , sWartosc := REAL_TO_STRING(rNapiecieL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rNapiecieL3 &lt;&gt; rNapiecieL3Zaraportowana THEN
		rNapiecieL3Zaraportowana := rNapiecieL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3=' , sWartosc := REAL_TO_STRING(rNapiecieL3) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	//Napięcia przewodowe		
	IF rNapiecieL1L2 &lt;&gt; rNapiecieL1L2Zaraportowana THEN
		rNapiecieL1L2Zaraportowana := rNapiecieL1L2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL1L2=' , sWartosc := REAL_TO_STRING(rNapiecieL1L2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rNapiecieL2L3 &lt;&gt; rNapiecieL2L3Zaraportowana THEN
		rNapiecieL2L3Zaraportowana := rNapiecieL2L3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL2L3=' , sWartosc := REAL_TO_STRING(rNapiecieL2L3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rNapiecieL3L1 &lt;&gt; rNapiecieL3L1Zaraportowana THEN
		rNapiecieL3L1Zaraportowana := rNapiecieL3L1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTL3L1=' , sWartosc := REAL_TO_STRING(rNapiecieL3L1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Częstotliwość 
	IF rCzestotliwosc &lt;&gt; rCzestotliwoscZaraportowana THEN
		rCzestotliwoscZaraportowana := rCzestotliwosc;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZEST=' , sWartosc := REAL_TO_STRING(rCzestotliwosc) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Czas pracy 
	IF rCzasPracyAnalizatora &lt;&gt; rCzasPracyAnalizatoraZaraportowana THEN
		rCzasPracyAnalizatoraZaraportowana := rCzasPracyAnalizatora;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'CZAS=' , sWartosc := REAL_TO_STRING(rCzasPracyAnalizatora) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Prądy fazowe	
	IF rPradL1 &lt;&gt; rPradL1Zaraportowana THEN
		rPradL1Zaraportowana := rPradL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL1=' , sWartosc := REAL_TO_STRING(rPradL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rPradL2 &lt;&gt; rPradL2Zaraportowana THEN
		rPradL2Zaraportowana := rPradL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL2=' , sWartosc := REAL_TO_STRING(rPradL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rPradL3 &lt;&gt; rPradL3Zaraportowana THEN
		rPradL3Zaraportowana := rPradL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERL3=' , sWartosc := REAL_TO_STRING(rPradL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rPradN &lt;&gt; rPradNZaraportowana THEN
		rPradNZaraportowana := rPradN;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERN=' , sWartosc := REAL_TO_STRING(rPradN) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Prądy średnie fazowe
	IF rPradSredniL1 &lt;&gt; rPradSredniL1Zaraportowana THEN
		rPradSredniL1Zaraportowana := rPradSredniL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL1=' , sWartosc := REAL_TO_STRING(rPradSredniL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rPradSredniL2 &lt;&gt; rPradSredniL2Zaraportowana THEN
		rPradSredniL2Zaraportowana := rPradSredniL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL2=' , sWartosc := REAL_TO_STRING(rPradSredniL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rPradSredniL3 &lt;&gt; rPradSredniL3Zaraportowana THEN
		rPradSredniL3Zaraportowana := rPradSredniL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVGL3=' , sWartosc := REAL_TO_STRING(rPradSredniL3) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Prąd średni
	IF rPradSredni &lt;&gt; rPradSredniZaraportowana THEN
		rPradSredniZaraportowana := rPradSredni;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERAVG=' , sWartosc := REAL_TO_STRING(rPradSredni) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce 3-fazowe		 
	IF rMocCzynnaCalkowita &lt;&gt; rMocCzynnaCalkowitaZaraportowana THEN
		rMocCzynnaCalkowitaZaraportowana := rMocCzynnaCalkowita;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCE=' , sWartosc := REAL_TO_STRING(rMocCzynnaCalkowita) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaCalkowita &lt;&gt; rMocBiernaCalkowitaZaraportowana THEN
		rMocBiernaCalkowitaZaraportowana := rMocBiernaCalkowita;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWBE=' , sWartosc := REAL_TO_STRING(rMocBiernaCalkowita) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rMocPozornaCalkowita &lt;&gt; rMocPozornaCalkowitaZaraportowana THEN
		rMocPozornaCalkowitaZaraportowana := rMocPozornaCalkowita;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWPE=' , sWartosc := REAL_TO_STRING(rMocPozornaCalkowita) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Współczynnik mocy 3-fazowy
	IF rWspolczynnikMocyCalkowity &lt;&gt; rWspolczynnikMocyCalkowityZaraportowana THEN
		rWspolczynnikMocyCalkowityZaraportowana := rWspolczynnikMocyCalkowity;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTOR3PH=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyCalkowity) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce czynne fazowe
	IF rMocCzynnaL1 &lt;&gt; rMocCzynnaL1Zaraportowana THEN
		rMocCzynnaL1Zaraportowana := rMocCzynnaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCECL1=' , sWartosc := REAL_TO_STRING(rMocCzynnaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocCzynnaL2 &lt;&gt; rMocCzynnaL2Zaraportowana THEN
		rMocCzynnaL2Zaraportowana := rMocCzynnaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCECL2=' , sWartosc := REAL_TO_STRING(rMocCzynnaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocCzynnaL3 &lt;&gt; rMocCzynnaL3Zaraportowana THEN
		rMocCzynnaL3Zaraportowana := rMocCzynnaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCECL3=' , sWartosc := REAL_TO_STRING(rMocCzynnaL3) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	//Moce bierne fazowe	
	IF rMocBiernaL1 &lt;&gt; rMocBiernaL1Zaraportowana THEN
		rMocBiernaL1Zaraportowana := rMocBiernaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL1=' , sWartosc := REAL_TO_STRING(rMocBiernaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaL2 &lt;&gt; rMocBiernaL2Zaraportowana THEN
		rMocBiernaL2Zaraportowana := rMocBiernaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL2=' , sWartosc := REAL_TO_STRING(rMocBiernaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaL3 &lt;&gt; rMocBiernaL3Zaraportowana THEN
		rMocBiernaL3Zaraportowana := rMocBiernaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEBL3=' , sWartosc := REAL_TO_STRING(rMocBiernaL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce pozorne fazowe
	IF rMocPozornaL1 &lt;&gt; rMocPozornaL1Zaraportowana THEN
		rMocPozornaL1Zaraportowana := rMocPozornaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL1=' , sWartosc := REAL_TO_STRING(rMocPozornaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocPozornaL2 &lt;&gt; rMocPozornaL2Zaraportowana THEN
		rMocPozornaL2Zaraportowana := rMocPozornaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL2=' , sWartosc := REAL_TO_STRING(rMocPozornaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocPozornaL3 &lt;&gt; rMocPozornaL3Zaraportowana THEN
		rMocPozornaL3Zaraportowana := rMocPozornaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCEPL3=' , sWartosc := REAL_TO_STRING(rMocPozornaL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Współczynniki mocy fazowe
	IF rWspolczynnikMocyL1 &lt;&gt; rWspolczynnikMocyL1Zaraportowana THEN
		rWspolczynnikMocyL1Zaraportowana := rWspolczynnikMocyL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL1=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL1) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	IF rWspolczynnikMocyL2 &lt;&gt; rWspolczynnikMocyL2Zaraportowana THEN
		rWspolczynnikMocyL2Zaraportowana := rWspolczynnikMocyL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL2=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rWspolczynnikMocyL3 &lt;&gt; rWspolczynnikMocyL3Zaraportowana THEN
		rWspolczynnikMocyL3Zaraportowana := rWspolczynnikMocyL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FACTORL3=' , sWartosc := REAL_TO_STRING(rWspolczynnikMocyL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Energia pobrana
	IF rEnergiaCzynnaPobrana &lt;&gt; rEnergiaCzynnaPobranaZaraportowana THEN
		rEnergiaCzynnaPobranaZaraportowana := rEnergiaCzynnaPobrana;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCE=' , sWartosc := REAL_TO_STRING(rEnergiaCzynnaPobrana) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rEnergiaBiernaPobrana &lt;&gt; rEnergiaBiernaPobranaZaraportowana THEN
		rEnergiaBiernaPobranaZaraportowana := rEnergiaBiernaPobrana;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENBE=' , sWartosc := REAL_TO_STRING(rEnergiaBiernaPobrana) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rEnergiaPozornaPobrana &lt;&gt; rEnergiaPozornaPobranaZaraportowana THEN
		rEnergiaPozornaPobranaZaraportowana := rEnergiaPozornaPobrana;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENPE=' , sWartosc := REAL_TO_STRING(rEnergiaPozornaPobrana) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Moce średnie	
	IF rMocCzynnaSrednia &lt;&gt; rMocCzynnaSredniaZaraportowana THEN
		rMocCzynnaSredniaZaraportowana := rMocCzynnaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEC=' , sWartosc := REAL_TO_STRING(rMocCzynnaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocBiernaSrednia &lt;&gt; rMocBiernaSredniaZaraportowana THEN
		rMocBiernaSredniaZaraportowana := rMocBiernaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEB=' , sWartosc := REAL_TO_STRING(rMocBiernaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMocPozornaSrednia &lt;&gt; rMocPozornaSredniaZaraportowana THEN
		rMocPozornaSredniaZaraportowana := rMocPozornaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWAVGEP=' , sWartosc := REAL_TO_STRING(rMocPozornaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//Napięcia maksymalne fazowe
	IF rMaksymalneNapiecieL1 &lt;&gt; rMaksymalneNapiecieL1Zaraportowana THEN
		rMaksymalneNapiecieL1Zaraportowana := rMaksymalneNapiecieL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL1=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rMaksymalneNapiecieL2 &lt;&gt; rMaksymalneNapiecieL2Zaraportowana THEN
		rMaksymalneNapiecieL2Zaraportowana := rMaksymalneNapiecieL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL2=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rMaksymalneNapiecieL3 &lt;&gt; rMaksymalneNapiecieL3Zaraportowana THEN
		rMaksymalneNapiecieL3Zaraportowana := rMaksymalneNapiecieL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTMAXL3=' , sWartosc := REAL_TO_STRING(rMaksymalneNapiecieL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//THD napięcia, fazowe
	IF rTHDNapieciaL1 &lt;&gt; rTHDNapieciaL1Zaraportowana THEN
		rTHDNapieciaL1Zaraportowana := rTHDNapieciaL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL1=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rTHDNapieciaL2 &lt;&gt; rTHDNapieciaL2Zaraportowana THEN
		rTHDNapieciaL2Zaraportowana := rTHDNapieciaL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL2=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rTHDNapieciaL3 &lt;&gt; rTHDNapieciaL3Zaraportowana THEN
		rTHDNapieciaL3Zaraportowana := rTHDNapieciaL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLTTHDL3=' , sWartosc := REAL_TO_STRING(rTHDNapieciaL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	//THD prądu, fazowe
	IF rTHDPraduL1 &lt;&gt; rTHDPraduL1Zaraportowana THEN
		rTHDPraduL1Zaraportowana := rTHDPraduL1;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL1=' , sWartosc := REAL_TO_STRING(rTHDPraduL1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF rTHDPraduL2 &lt;&gt; rTHDPraduL2Zaraportowana THEN
		rTHDPraduL2Zaraportowana := rTHDPraduL2;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL2=' , sWartosc := REAL_TO_STRING(rTHDPraduL2) , xOverFlow := xOverFlow);
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF		
	END_IF
	IF rTHDPraduL3 &lt;&gt; rTHDPraduL3Zaraportowana THEN
		rTHDPraduL3Zaraportowana := rTHDPraduL3;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'AMPERTHDL3=' , sWartosc := REAL_TO_STRING(rTHDPraduL3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// Sprawdzanie stanu komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);

// Sprawdzanie czy pomiar napięcia L1 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rNapiecieL1Pamiec = rNapiecieL1 THEN
	xBrakZmianyNapiecieL1 := TRUE;
ELSE
	xBrakZmianyNapiecieL1 := FALSE;	
END_IF
fbBrakZmianyNapiecieL1Timer(IN := xBrakZmianyNapiecieL1, PT := T#12H);
rNapiecieL1Pamiec := rNapiecieL1;
IF fbBrakZmianyNapiecieL1Timer.Q THEN
	xBladBrakZmianyNapiecieL1 := TRUE;
ELSE
	xBladBrakZmianyNapiecieL1 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L2 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rNapiecieL2Pamiec = rNapiecieL2 THEN
	xBrakZmianyNapiecieL2 := TRUE;
ELSE
	xBrakZmianyNapiecieL2 := FALSE;	
END_IF
fbBrakZmianyNapiecieL2Timer(IN := xBrakZmianyNapiecieL2, PT := T#12H);
rNapiecieL2Pamiec := rNapiecieL2;
IF fbBrakZmianyNapiecieL2Timer.Q THEN
	xBladBrakZmianyNapiecieL2 := TRUE;
ELSE
	xBladBrakZmianyNapiecieL2 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L3 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rNapiecieL3Pamiec = rNapiecieL3 THEN
	xBrakZmianyNapiecieL3 := TRUE;
ELSE
	xBrakZmianyNapiecieL3 := FALSE;	
END_IF
fbBrakZmianyNapiecieL3Timer(IN := xBrakZmianyNapiecieL3, PT := T#12H);
rNapiecieL3Pamiec := rNapiecieL3;
IF fbBrakZmianyNapiecieL3Timer.Q THEN
	xBladBrakZmianyNapiecieL3 := TRUE;
ELSE
	xBladBrakZmianyNapiecieL3 := FALSE;
END_IF

// Sprawdzanie czy pomiar prądu L1 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rPradL1Pamiec = rPradL1 THEN
	xBrakZmianyPradL1 := TRUE;
ELSE
	xBrakZmianyPradL1 := FALSE;	
END_IF
fbBrakZmianyPradL1Timer(IN := xBrakZmianyPradL1, PT := T#12H);
rPradL1Pamiec := rPradL1;
IF fbBrakZmianyPradL1Timer.Q THEN
	xBladBrakZmianyPradL1 := TRUE;
ELSE
	xBladBrakZmianyPradL1 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L2 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rPradL2Pamiec = rPradL2 THEN
	xBrakZmianyPradL2 := TRUE;
ELSE
	xBrakZmianyPradL2 := FALSE;	
END_IF
fbBrakZmianyPradL2Timer(IN := xBrakZmianyPradL2, PT := T#12H);
rPradL2Pamiec := rPradL2;
IF fbBrakZmianyPradL2Timer.Q THEN
	xBladBrakZmianyPradL2 := TRUE;
ELSE
	xBladBrakZmianyPradL2 := FALSE;
END_IF

// Sprawdzanie czy pomiar napięcia L3 działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rPradL3Pamiec = rPradL3 THEN
	xBrakZmianyPradL3 := TRUE;
ELSE
	xBrakZmianyPradL3 := FALSE;	
END_IF
fbBrakZmianyPradL3Timer(IN := xBrakZmianyPradL3, PT := T#12H);
rPradL3Pamiec := rPradL3;
IF fbBrakZmianyPradL3Timer.Q THEN
	xBladBrakZmianyPradL3 := TRUE;
ELSE
	xBladBrakZmianyPradL3 := FALSE;
END_IF

// obsługa alarmów do analizatora
	//brak komunikacji z analizatorem
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbTimerBrakuKomunikacji.Q THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji , intNumer := enumPPPSAnalizatorDirisA40Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbTimerBrakuKomunikacji.Q THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakKomunikacji] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakKomunikacji , intNumer := enumPPPSAnalizatorDirisA40Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	// Brak zmiany parametrów przez 24h
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyNapiecieL1 AND xBladBrakZmianyNapiecieL2 AND xBladBrakZmianyNapiecieL3 AND
   xBladBrakZmianyPradL1 AND xBladBrakZmianyPradL2 AND xBladBrakZmianyPradL3 THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow , intNumer := enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT (xBladBrakZmianyNapiecieL1 AND xBladBrakZmianyNapiecieL2 AND xBladBrakZmianyNapiecieL3 AND
   xBladBrakZmianyPradL1 AND xBladBrakZmianyPradL2 AND xBladBrakZmianyPradL3) THEN
	arErrorStan[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow] := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSAnalizatorDirisA40ErrorKlasa.BrakZmianyParametrow , intNumer := enumPPPSAnalizatorDirisA40Error.BrakZmianyParametrow),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSBramkaSTC65RS485Modbus" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tCzasTimeoutEnOcean">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars constant="true">
            <variable name="wCzasDzialaniaOdResetuAlarm">
              <type>
                <WORD />
              </type>
              <initialValue>
                <simpleValue value="120" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="uintFirmwareVersion">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">definicja adresów i zmiennych modbusowych	</xhtml>
              </documentation>
            </variable>
            <variable name="wFirmwareVersion">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintOperatingTimeSinceLastResetHi">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="wOperatingTimeSinceLastResetHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintOperatingTimeSinceLastResetLo">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="3" />
              </initialValue>
            </variable>
            <variable name="wOperatingTimeSinceLastResetLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintReceivingChannelsTelegramCounterAllIDsHi">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="wReceivingChannelsTelegramCounterAllIDsHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintReceivingChannelsTelegramCounterAllIDsLo">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="5" />
              </initialValue>
            </variable>
            <variable name="wReceivingChannelsTelegramCounterAllIDsLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintReceivingChannelsTelegramCounterStoredIDsHi">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="6" />
              </initialValue>
            </variable>
            <variable name="wReceivingChannelsTelegramCounterStoredIDsHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintReceivingChannelsTelegramCounterStoredIDsLo">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="7" />
              </initialValue>
            </variable>
            <variable name="wReceivingChannelsTelegramCounterStoredIDsLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintEnOceanBaseIdByte3">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="8" />
              </initialValue>
            </variable>
            <variable name="wEnOceanBaseIdByte3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintEnOceanBaseIdByte2">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="9" />
              </initialValue>
            </variable>
            <variable name="wEnOceanBaseIdByte2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintEnOceanBaseIdByte1">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
            </variable>
            <variable name="wEnOceanBaseIdByte1">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintEnOceanBaseIdByte0">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="11" />
              </initialValue>
            </variable>
            <variable name="wEnOceanBaseIdByte0">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintRepeaterFunction">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="15" />
              </initialValue>
            </variable>
            <variable name="wRepeaterFunction">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintMinResponseTime">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="16" />
              </initialValue>
            </variable>
            <variable name="wMinResponseTime">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintResetRxCoil">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="17" />
              </initialValue>
            </variable>
            <variable name="wResetRxCoil">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintTransmittingChannelsTelegramCounterAll">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="18" />
              </initialValue>
            </variable>
            <variable name="wTransmittingChannelsTelegramCounterAll">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintTransmittingChannelsTelegramCounterByCoilTriggered">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="19" />
              </initialValue>
            </variable>
            <variable name="wTransmittingChannelsTelegramCounterByCoilTriggered">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wCzasDzialaniaOdResetuHi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienne operacyjne	
Zmienne Modbusowe</xhtml>
              </documentation>
            </variable>
            <variable name="wCzasDzialaniaOdResetuLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="dwCzasDzialaniaOdResetu">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="xAlarmResetu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wLicznikTelegramowUrzadzenHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wLicznikTelegramowUrzadzenLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="dwLicznikTelegramowUrzadzen">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="dwLicznikTelegramowUrzadzenPamiec">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="fbTimeoutEnOcean">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="wFunkcjaPowtarzanaia">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wMinimalnyCzasOdpowiedzi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="5" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="5" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakKomunikacjiTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wystawianie alarmu o braku komunikacji. Alarm zostanie aktywowany po minutach od momentu stwierdzenia braku komunikacji.</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-08-13, Jan Bartczak
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			
						
Opis:					fb służy obsługi bramek (STC65-RS485) GTW0 na budynkach PPP Sopot (ENGIE) 
		
UWAGA:					2018-08-13-PK-Stworzenie FB
						2018-10-05-JB Przygotowanie odczytu rejestrów Modbusowych z bramki STC
						2018-12-11-JB Poprawienie obsługi alarmów od resetu bramki i braku ruchu telegramów (do tego momentu wysyłane były błędne alarmy)		
						2019-02-18-AWy: Filtrowanie alarmu braku komunikacji (5 minut zwłoki od momentu stwierdzenia braku komunikacji)			
*)

//inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := NOT xPoInicjalizacji , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	xPoInicjalizacji := TRUE;
	dwLicznikTelegramasdfsfdowUrzadzenPamiec := dwLicznikTelegramowUrzadzen;
END_IF


IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	
//deklaracja rejestrow do odczytu

	//wyznaczenie adresów rejestrów modbusowych

	//holding register
	//  #Firmware Version e.g.: 0x3300 = Version 3.3.0.0
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintFirmwareVersion;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wFirmwareVersion);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	//R/W Operating Time since last reset [seconds] HIGH
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintOperatingTimeSinceLastResetHi;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wOperatingTimeSinceLastResetHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	//R/W Operating Time since last reset [seconds] LOW
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintOperatingTimeSinceLastResetLo;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wOperatingTimeSinceLastResetLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	//R/W Receiving Channels Telegram Counter (all IDs) HIGH
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintReceivingChannelsTelegramCounterAllIDsHi;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wReceivingChannelsTelegramCounterAllIDsHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		

	//R/W Receiving Channels Telegram Counter (all IDs) LOW	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintReceivingChannelsTelegramCounterAllIDsLo;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wReceivingChannelsTelegramCounterAllIDsLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	//R/W Receiving Channels Telegram Counter (stored IDs only) HIGH
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintReceivingChannelsTelegramCounterStoredIDsHi;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wReceivingChannelsTelegramCounterStoredIDsHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	//R/W Receiving Channels Telegram Counter (stored IDs only) LOW
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintReceivingChannelsTelegramCounterStoredIDsLo;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wReceivingChannelsTelegramCounterStoredIDsLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	//R/W* #EnOcean Base-ID-Byte-3
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanBaseIdByte3;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanBaseIdByte3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	//R/W* #EnOcean Base-ID-Byte-2
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanBaseIdByte2;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanBaseIdByte2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		

	//R/W* #EnOcean Base-ID-Byte-1
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanBaseIdByte1;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanBaseIdByte1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		

	//R/W* #EnOcean Base-ID-Byte-0
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanBaseIdByte0;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanBaseIdByte0);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	//#Repeater function (0=OFF, 1=1-Level, 2=2-Level) ; Sets the integrated EnOcean repeater to off, 1-level or 2-level
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintRepeaterFunction;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wRepeaterFunction);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;			
	
	//R/W #Min. Response Time 
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintMinResponseTime;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMinResponseTime);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	//R/W #Reset RX Coil necessary (factory setting: 0)
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintResetRxCoil;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wResetRxCoil);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	//R/W Transmitting Channels Telegram Counter (all telegrams)
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintTransmittingChannelsTelegramCounterAll;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTransmittingChannelsTelegramCounterAll);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	//R/W Transmitting Channels Telegram Counter (by coil triggered telegrams only)
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintTransmittingChannelsTelegramCounterByCoilTriggered;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTransmittingChannelsTelegramCounterByCoilTriggered);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
END_IF

//obsluga komunikatu przychodzacego z IZE

IF 	sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' THEN
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 5 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

//obliczenia
dwCzasDzialaniaOdResetu := wOperatingTimeSinceLastResetHi * 256 * 256 + wOperatingTimeSinceLastResetLo;
IF dwCzasDzialaniaOdResetu &gt; 0 THEN
	IF dwCzasDzialaniaOdResetu &lt; WORD_TO_DWORD(wCzasDzialaniaOdResetuAlarm) THEN
		xAlarmResetu := TRUE;
	ELSE
		IF dwCzasDzialaniaOdResetu &gt; WORD_TO_DWORD(wCzasDzialaniaOdResetuAlarm) THEN
			xAlarmResetu := FALSE;
		END_IF
	END_IF
END_IF

dwLicznikTelegramowUrzadzen := wReceivingChannelsTelegramCounterAllIDsHi * 256 * 256 + wReceivingChannelsTelegramCounterAllIDsLo;
IF xPoInicjalizacji THEN
	fbTimeoutEnOcean(IN := (dwLicznikTelegramowUrzadzen = dwLicznikTelegramowUrzadzenPamiec) , PT := tCzasTimeoutEnOcean);
END_IF

IF dwLicznikTelegramowUrzadzen &lt;&gt; dwLicznikTelegramowUrzadzenPamiec THEN
	dwLicznikTelegramowUrzadzenPamiec := dwLicznikTelegramowUrzadzen;
END_IF

// Filtrowanie alarmu o braku komunikacji. Alarm wystąpi po 5 minutach od momentu wystąpienia arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji
fbBrakKomunikacjiTimer(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#5M);

// obsługa alarmów konwertera
	//brak komunikacji
IF arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbBrakKomunikacjiTimer.Q THEN
	arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji] :=enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakKomunikacji , intNumer := enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbBrakKomunikacjiTimer.Q  THEN
	arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji] := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakKomunikacji , intNumer := enumPPPSBramkaSTC65RS485ModbusError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

	//reset konwertera
IF arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xAlarmResetu AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera] :=enumPPPSBramkaSTC65RS485ModbusErrorKlasa.ResetKonwertera;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.ResetKonwertera , intNumer := enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xAlarmResetu AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera] := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.ResetKonwertera;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.ResetKonwertera , intNumer := enumPPPSBramkaSTC65RS485ModbusError.ResetKonwertera),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

	//brak telegramów
IF arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbTimeoutEnOcean.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean] :=enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakTelegramowEnOcean;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakTelegramowEnOcean , intNumer := enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbTimeoutEnOcean.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean] := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakTelegramowEnOcean;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSBramkaSTC65RS485ModbusErrorKlasa.BrakTelegramowEnOcean , intNumer := enumPPPSBramkaSTC65RS485ModbusError.BrakTelegramowEnOcean),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSDestratyfikatorTBOX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje zmiennych do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje do komunikacji z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Parametry	</xhtml>
              </documentation>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wSoftwareVersion">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTrybPracy">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 - wyłączony; 2 - auto (depend), 3 - auto (independ), 4 - manual</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracy">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTrybPracyZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPredkoscWentylatora">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 - wyłączony; 1..33 - I bieg; 34..66 - drugi bieg; 67..100 - trzeci bieg</xhtml>
              </documentation>
            </variable>
            <variable name="rPredkoscWentylatora">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPredkoscWentylatoraZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPredkoscWentylatora">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="wTemperaturaReferencyjna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 50..450 (10 = 1 st. C)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaReferencyjna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaReferencyjnaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaRzeczywista">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> -600..600 (10 = 1 st. C)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaRzeczywista">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaRzeczywistaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaRzeczywista">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaRzeczywistaPamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTemperaturaReferencyjnaTrybManualny">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 50..450 (10 = 1 st. C)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaReferencyjnaTrybManualny">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaReferencyjnaTrybManualnyZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Jan Bartczak, 2019-01-10 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-01-28-AWy: Odczyt rejestrów temperatury ref., zadanej, prędkości wentylatora etc. Komunikacja z IZE.
						2019-02-06-AWy: Alarm braku komunikacji
						2019-05-16-AWy: Modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji 
						
Opis:					fb służy do komunikacji z zadajnikiem destratyfikatorów - T-BOX'em
				
*)


// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rTrybPracyZaraportowana := rTrybPracy;
	rPredkoscWentylatoraZaraportowana := rPredkoscWentylatora;
	rTemperaturaReferencyjnaZaraportowana := rTemperaturaReferencyjna;
	rTemperaturaRzeczywistaZaraportowana := rTemperaturaRzeczywista;
	rTemperaturaReferencyjnaTrybManualnyZaraportowana := rTemperaturaReferencyjnaTrybManualny;
	xPoInicjalizacji := TRUE;
END_IF
//

IF xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF
//

IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 3;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wSoftwareVersion);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 5;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaRzeczywista);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1004;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracy);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1005;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPredkoscWentylatora);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1006;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaReferencyjna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 16#1007;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaReferencyjnaTrybManualny);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;					
END_IF

// Przeliczenie zmiennych
rTrybPracy := WORD_TO_REAL(wTrybPracy);

fbPredkoscWentylatora(	rWartoscWejsciowa := WORD_TO_REAL(wPredkoscWentylatora),
						rDeadband := 5,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 1,
						rWynikOffset := 0,
						rWartoscWejsciowaZaraportowana := rPredkoscWentylatoraZaraportowana,
						rWartoscWyjsciowa =&gt; rPredkoscWentylatora);
						
rTemperaturaReferencyjna := WORD_TO_REAL(wTemperaturaReferencyjna)*0.1 + 273.15;

fbTemperaturaRzeczywista(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaRzeczywista),
							rDeadband := 0.5,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 0.1,
							rWynikOffset := 273.15,
							rWartoscWejsciowaZaraportowana := rTemperaturaRzeczywistaZaraportowana,
							rWartoscWyjsciowa =&gt; rTemperaturaRzeczywista);
							
rTemperaturaReferencyjnaTrybManualny := WORD_TO_REAL(wTemperaturaReferencyjnaTrybManualny)*0.1 + 273.15;
//					
						
						
// Obsluga komunikatu przychodzacego z IZE
IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		// Rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
		END_IF
				
		// Zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBPRACY=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBPRACY=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'PREDKOSCWENT=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PREDKOSCWENT=' , sWartosc := REAL_TO_STRING(rPredkoscWentylatora) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPREF=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREF=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPRZECZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPRZECZ=' , sWartosc := REAL_TO_STRING(rTemperaturaRzeczywista) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPREFTRYBMAN=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREFTRYBMAN=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjnaTrybManualny) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			// Pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 10 BY 1 DO
					// Raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF		
		// Raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Raportowanie typu M do IZE wartosci odczytanych z Modbusa	
IF 	(intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR rTrybPracy &lt;&gt; rTrybPracyZaraportowana OR rPredkoscWentylatora &lt;&gt; rPredkoscWentylatoraZaraportowana OR
	rTemperaturaReferencyjna &lt;&gt; rTemperaturaReferencyjnaZaraportowana OR rTemperaturaRzeczywista &lt;&gt; rTemperaturaRzeczywistaZaraportowana OR 
	rTemperaturaReferencyjnaTrybManualny &lt;&gt; rTemperaturaReferencyjnaTrybManualnyZaraportowana)AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN 
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
	END_IF	
	IF xOverFlow = TRUE THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
					sTypKomunikatu := 'M' ,
					sMnemonik := sMnemonik ,
					sMACAdres := sMACAdres ,
					sIDNadawcy := sIdInstancji ,
					sIDOdbiorcy := sIdAplikacji ,
					sDaneZapasowe := sDaneZapasowe ,
					sDane := sDane ,
					arTablicaKomunikatow := arTablicaKomunikatow ,
					intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
					intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
					sWyslanyKomunikat := sWyslanyKomunikatDummy);
		sDane := '';
	END_IF
	// Tryb pracy
	IF rTrybPracy &lt;&gt; rTrybPracyZaraportowana THEN
		rTrybPracyZaraportowana := rTrybPracy;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBPRACY=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Prędkość wentylatora
	IF rPredkoscWentylatora &lt;&gt; rPredkoscWentylatoraZaraportowana THEN
		rPredkoscWentylatoraZaraportowana := rPredkoscWentylatora;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PREDKOSCWENT=' , sWartosc := REAL_TO_STRING(rPredkoscWentylatora) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura referencyjna
	IF rTemperaturaReferencyjna &lt;&gt; rTemperaturaReferencyjnaZaraportowana THEN
		rTemperaturaReferencyjnaZaraportowana := rTemperaturaReferencyjna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREF=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura rzeczywista
	IF rTemperaturaRzeczywista &lt;&gt; rTemperaturaRzeczywistaZaraportowana THEN
		rTemperaturaRzeczywistaZaraportowana := rTemperaturaRzeczywista;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPRZECZ=' , sWartosc := REAL_TO_STRING(rTemperaturaRzeczywista) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura referencyjna trybu manulnego
	IF rTemperaturaReferencyjnaTrybManualny &lt;&gt; rTemperaturaReferencyjnaTrybManualnyZaraportowana THEN
		rTemperaturaReferencyjnaTrybManualnyZaraportowana := rTemperaturaReferencyjnaTrybManualny;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREFTRYBMAN=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjnaTrybManualny) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rTemperaturaRzeczywistaPamiec = rTemperaturaRzeczywista THEN
	xBrakZmianyTemperatury := TRUE;
ELSE
	xBrakZmianyTemperatury := FALSE;	
END_IF
fbBrakZmianyTemperaturyTimer(IN := xBrakZmianyTemperatury, PT := T#12H);
rTemperaturaRzeczywistaPamiec := rTemperaturaRzeczywista;
IF fbBrakZmianyTemperaturyTimer.Q THEN
	xBladBrakZmianyTemperatury := TRUE;
ELSE
	xBladBrakZmianyTemperatury := FALSE;
END_IF

// Alarm braku komunikacji MODBUS 
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji , intNumer := enumPPPSDestratyfikatorTBOXError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.BrakKomunikacji] := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.BrakKomunikacji , intNumer := enumPPPSDestratyfikatorTBOXError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Alarm czujnika temperatury
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika , intNumer := enumPPPSDestratyfikatorTBOXError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSDestratyfikatorTBOXError.AlarmCzujnika] := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSDestratyfikatorTBOXErrorKlasa.AlarmCzujnika , intNumer := enumPPPSDestratyfikatorTBOXError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSFriskoATTOM1S" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xSezonGrzewczyCalyRok">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOKomfortAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślna wartość nastawy temperatury obiegu c.o. w trybie komfortowym</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOEkonomicznaAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślna wartość nastawy temperatury obiegu c.o. w trybie ekonomicznym</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="aTemperatury">
              <type>
                <array>
                  <dimension lower="0" upper="96" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tablica pomiarów temperatur bieżącego dnia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia1Dzien">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia dzienna temperatura</xhtml>
              </documentation>
            </variable>
            <variable name="iTemperaturyIndex">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index tablicy </xhtml>
              </documentation>
            </variable>
            <variable name="aTemperaturySrednie">
              <type>
                <array>
                  <dimension lower="0" upper="2" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tablica zawierająca średnie temperatury z trzech ostatnich dni</xhtml>
              </documentation>
            </variable>
            <variable name="iTemperaturySrednieIndex">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index tablicy śrenich temperatur</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia3Dni">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia temperatura z trzech dni</xhtml>
              </documentation>
            </variable>
            <variable name="xTemperaturaSrednia3DniObliczona">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Prawda, jeśli obliczona została średnia temperatura z trzech dni</xhtml>
              </documentation>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje zmiennych do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje do komunikacji z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rtrigPrzywrocDomyslne">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywracanie domyślnych wartości nastaw</xhtml>
              </documentation>
            </variable>
            <variable name="rtrigZapisModbus">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger zapisu danych po Modbusie</xhtml>
              </documentation>
            </variable>
            <variable name="fbTaktowanieZapisywaniaModbus">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cykliczne żądanie zapisu danych do urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Parametry</xhtml>
              </documentation>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaObieguCO">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zmierzona temperatura wody instalacyjnej w obwodzie CO.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaObieguCO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaObieguCO">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObieguCOZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObieguCOPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zasilania obwodu CO.</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilaniaObieguCO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaObieguCOTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilaniaObieguCO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTemperaturaZadanaObieguCO">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wyliczona zadana temperatura wody instalacyjnej w obwodzie CO.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZadanaObieguCO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZadanaObieguCOZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakOsiagnieciaTemperauryZadanejCO">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu CO.</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakOsiagnieciaTemperauryZadanejCOTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakOsiagnieciaTemperauryZadanejCO">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTemperaturaZasilania">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zmierzona temperatura zasilania w punkcie Tzas.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilania">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilania">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaZewnetrzna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zmierzona temperatura zewnętrzna.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZewnetrzna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZewnetrzna">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zewnętrznej.</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZewnetrznej">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZewnetrznejTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZewnetrznej">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTemperaturaZewnetrznaSrednia">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia krótkoterminowa temperatury zewnętrznej z ostatnich 2 godzin.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZewnetrznaSrednia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZewnetrznaSrednia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaSredniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wProgram">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aktywny program pracy regulatora. 0-Tygodni., 1-Ferie, 2-Party.</xhtml>
              </documentation>
            </variable>
            <variable name="wProgramZaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTemperaturaWewnetrznaZadanaKomfort">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zadana temperatura wewnętrzna komfortowa.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaWewnetrznaZadanaKomfort">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaWewnetrznaZadanaEkonomiczna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zadana temperatura wewnętrzna ekonomiczna.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaWewnetrznaZadanaEkonomiczna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaZadanaObieguCOKomfort">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zadana komfortowa temperatura wody instalacyjnej w trybie regulacji stałowartościowej.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOKomfort">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOKomfortZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xTemperaturaZasilaniaZadanaObieguCOKomfortZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOKomfortZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZasilaniaZadanaObieguCOEkonomiczna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zadana ekonomiczna temperatura wody instalacyjnej w trybie regulacji stałowartościowej.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOEkonomiczna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wAktualnyDzien">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Bieżący dzień tygodnia. 0 - Poniedziałek, 1 - Wtorek, ... 6 - Niedziela.</xhtml>
              </documentation>
            </variable>
            <variable name="wCzasGodzina">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Bieżący czas - godziny.</xhtml>
              </documentation>
            </variable>
            <variable name="wCzasMinuta">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Bieżący czas - minuty.</xhtml>
              </documentation>
            </variable>
            <variable name="wTrybPracy">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy regulatora. 0 - Zima, 1 - Lato, 2 - Auto.</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracy">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTrybPracyZaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTrybPracyAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślny tryb pracy</xhtml>
              </documentation>
            </variable>
            <variable name="xTrybPracyZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaProguZimaLato">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperatura progu Zima/Lato.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaProguZimaLato">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaProguZimaLatoZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMinimalnaTemperaturaZasilaniaObieguCO">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimalna temperatura zasilania obwodu CO.</xhtml>
              </documentation>
            </variable>
            <variable name="rMinimalnaTemperaturaZasilaniaObieguCO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rMinimalnaTemperaturaZasilaniaObieguCOZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wKrzywaGrzewcza">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Numer krzywej grzewczej.</xhtml>
              </documentation>
            </variable>
            <variable name="wPzesuniecieKrzywejGrzewczej">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pionowe przesunięcie krzywej grzania.</xhtml>
              </documentation>
            </variable>
            <variable name="wKontrolaTemperaturyZasilania">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola temperatury zasilania w punkcie Tzas. 0-Nie, 1-Tak. </xhtml>
              </documentation>
            </variable>
            <variable name="wMaksymalnaTemperaturaZasilaniaObieguCO">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maksymalna temperatura wody instalacyjnej w punkcie Tco.</xhtml>
              </documentation>
            </variable>
            <variable name="rMaksymalnaTemperaturaZasilaniaObieguCO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rMaksymalnaTemperaturaZasilaniaObieguCOZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wKpRegulatoraZaworu">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wzmocnienie regulatora PI sterującego siłownikiem zaworu mieszającego.</xhtml>
              </documentation>
            </variable>
            <variable name="wTiRegulatoraZaworu">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Czas całkowania regulatora PI sterującego siłownikiem zaworu mieszającego wyrażony w sekundach.</xhtml>
              </documentation>
            </variable>
            <variable name="wTpsRegulatoraZaworu">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Czas przejścia siłownika zaworu mieszającego, od pełnego otwarcia do całkowitego zamknięcia wyrażony w sekundach.</xhtml>
              </documentation>
            </variable>
            <variable name="wStatusCO">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Parametr określa status obwodu CO. Parametr ma znaczenie, gdy regulator współpracuje z regulatorem MASTER sterującym źródłem ciepła. 0-Norm, 1-Prior </xhtml>
              </documentation>
            </variable>
            <variable name="wZdalneSterowanie">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wykorzystanie zadajnika z czujnika temperatury wewnętrznej. 0 - Komfort, 1 - Ekonomiczny, 2 - Komfort + Ekonomiczny.</xhtml>
              </documentation>
            </variable>
            <variable name="wTypRegulacji">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Typ regulacji temperatury wody instalacyjnej. 0 - Pogodowa, 1 - Stałowartościowa.</xhtml>
              </documentation>
            </variable>
            <variable name="wTypRegulacjiZaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPompaCO">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stan wyjścia sterującego pompą obiegową CO.</xhtml>
              </documentation>
            </variable>
            <variable name="rPompaCO">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPompaCOZaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wZaworCOZamkniecie">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stan wyjść sterujących siłownikiem zaworu mieszającego CO.</xhtml>
              </documentation>
            </variable>
            <variable name="rZaworCOZamkniecie">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wZaworCOZamkniecieZaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wZaworCOOtwarcie">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stan wyjść sterujących siłownikiem zaworu mieszającego CO.</xhtml>
              </documentation>
            </variable>
            <variable name="rZaworCOOtwarcie">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wZaworCOOtwarcieZaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="fbWschodZachod">
              <type>
                <derived name="FbCalculateSunriseSunset" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Obliczanie wschodu i zachodu słońca</xhtml>
              </documentation>
            </variable>
            <variable name="fbZegar15M">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer taktujący zapisywanie temperatury</xhtml>
              </documentation>
            </variable>
            <variable name="xObliczSrednia3Dni">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger obliczania średniej dziennej temperatury z 3 ostatnich dni</xhtml>
              </documentation>
            </variable>
            <variable name="iIloscPomiarow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ilość pomiarów dokonanych w ciągu dnia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia1DzienZaraportowana">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia dzienna temperatura zaraporotawana</xhtml>
              </documentation>
            </variable>
            <variable name="xSezonGrzewczy">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie ogrzewania</xhtml>
              </documentation>
            </variable>
            <variable name="xSezonGrzewczyZaraportowana">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie ogrzewania zaraportowane</xhtml>
              </documentation>
            </variable>
            <variable name="xBladIloscPomiarowTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zbyt mała ilość pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Jan Bartczak, 2019-01-08 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-01-25-AWy: usunięcie buga: błędny odczyt wTemperaturaZadanaObieguCO
						2019-01-31-AWy: powiększenie liczby odzcytywanych rejestrów, wysyłanie atrybutów do IZE, konwersja danych dla dataloggera
						2019-02-05-AWy: kontrola komunikacji
						2019-02-18-AWy: generowanie alarmów od czujnika temp. zew., zasilania CO oraz braku osiągnięcia temperatury zadanej.
						2019-04-15-AWy: obsługa trybu pracy (zima/lato) z IZE
						2019-04-18-AWy: - usunięcie buga z warunku na wysłanie ramki z deaktywacją alarmu o braku osiągnięcia temperatury zadanej. 
										- dopisanie warunku pracy węzła w trybie ZIMA lub AUTO na gerenowanie w/w alarmu 
						2019-05-14-AWy: - zmiana obsługi ramki C z nastawą temperatury komfortowej i ekonomicznej.
										- zmiana adresu rejestrów temperatury zadanej CO komfort i ekonomicznej oraz tempearatury wewnętrznej komfort i ekonomicznej.
						2019-05-16-AWy: modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji 
						2019-05-17-AWy: usunięcie mnożenia *10 atrybutów TEMPNASCOKMF i TEMPNASCOEKO po otrzymaniu ramki C z tymi atrybutami.
						2019-05-22-AWy: zapisywanie po MODBUSie trybu pracy na urządzenie.
						2019-06-04-AWy: załadowanie domyślnych trybów pracy i nastaw po przejściu w tryb autonomizacji.
						2019-08-05-AWy: wyznaczanie okresu grzewczego. Wysyłanie xSezonGrzewczy i rTemperaturaSrednia1Dzien do IZE. Przeniesie xTrybPracyAutonomizacja z VAR_INPUT do VAR.
						2019-09-16-AWy: wysyłanie ramki z trybem pracy.
						2019-10-11-AWy: wprowadzenie zabezpieczenia przed przekroczeniem rozmiaru tablicy w przypadku utrary zasilania przez sterownik na całą noc.
						2019-10-22-AWy: - wydłużenie czasu fbTaktowanieZapisywaniaModbus oraz wprowadzenie trigera zapisu po Modbusie
										- zmiana trigera fbTimerBrakuKomunikacji
						
Opis:					fb służy do komunikacji z sterownikami węzłów FRISKO ATTO-M1
						W tej chwili możliwość sterowania (zapisu) rejestrów wTemperaturaZasilaniaZadanaObieguCOKomfort i wTemperaturaZasilaniaZadanaObieguCOEkonomiczna. Pozostałe tylko do odczytu.
				
*)

// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rTemperaturaZasilaniaObieguCOZaraportowana := rTemperaturaZasilaniaObieguCO;
	rTemperaturaZadanaObieguCOZaraportowana := rTemperaturaZadanaObieguCO;
	rTemperaturaZasilaniaZaraportowana := rTemperaturaZasilania;
	rTemperalaniaZadanaObieguCOEkonomiczna;
	rTemperaturaProguZimaLatoZaraportowana := rTemperaturaProguZimaLato;
	rMinimalnaTemperaturaZasilaniaObieguCOZaraportowana := rMinimalnaTemperaturaZasilaniaObieguCO;
	rMaksymalnaTemperaturaZasilaniaObieguCOZaraportowana := rMaksymalnaTemperaturaZasilaniaObieguCO;
	wTypRegulacjiZaraportowana := wTypRegulacji;
	wPompaCOZaraportowana := wPompaCO;
	wZaworCOZamkniecieZaraportowana := wZaworCOZamkniecie;
	wZaworCOOtwarcieZaraportowana := wZaworCOOtwarcie;
	wTrybPracyZaraportowana := wTrybPracy;
	xSezonGrzewczyZaraportowana := xSezonGrzewczy;
	rTemperaturaSrednia1DzienZaraportowana := rTemperaturaSrednia1Dzien;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKoxxdf
END_IF

// Deklaracja rejestrów Modbusa
IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbudfgsdfntPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasMinuta);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCyklifdgdfgy[intPetlaPierwszySkan].uiAdresRejestru := 4003;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasGodzina);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModfPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAktualnyDzien);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4205;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intsdfYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4206;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaZadanaObieguCOEkonomiczna);
	intPetlaPierwszySkan := ffff + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4032;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaObieguCO);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4034;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZewnetrzna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4035;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilania);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4047;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPompaCO);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4048;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wZaworCOZamkniecie);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4049;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wZaworCOOtwarcie);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4088;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZadanaObieguCO);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
		
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4092;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZewnetrznaSrednia);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4124;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaWewnetrznaZadanaKomfort);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
		
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4125;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaWewnetrznaZadanaEkonomiczna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4173;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracy);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4170;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewcza);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4174;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaProguZimaLato);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4175;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKpRegulatoraZaworu);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
			
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4176;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTiRegulatoraZaworu);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4183;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTpsRegulatoraZaworu);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4188;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMinimalnaTemperaturaZasilaniaObieguCO);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
				
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4189;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMaksymalnaTemperaturaZasilaniaObieguCO);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
		
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4191;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKontrolaTemperaturyZasilania);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
		
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4194;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPzesuniecieKrzywejGrzewczej);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4197;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wProgram);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4201;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wZdalneSterowanie);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
		
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4202;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStatusCO);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;			
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4204;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTypRegulacji);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
END_IF

// Przeliczenie zmiennych
fbTemperaturaZasilaniaObieguCO(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaObieguCO),
								rDeadband := 0.5,
								tCzasMinimalny := tMinimalnyCzasRaportowania,
								tCzasMaksymalny := tMaksymalnyCzasRaportowania,
								rWynikMnoznik := 0.1,
								rWynikOffset := 273.15,
								rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaObieguCOZaraportowana,
								rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaObieguCO);
								
rTemperaturaZadanaObieguCO := WORD_TO_REAL(wTemperaturaZadanaObieguCO)*0.1 + 273.15;
fbTemperaturaZasilania( rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilania),
						rDeadband := 0.5,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 0.1,
						rWynikOffset := 273.15,
						rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaZaraportowana,
						rWartoscWyjsciowa =&gt; rTemperaturaZasilania);

			
fbTemperaturaZewnetrzna(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZewnetrzna),
							rDeadband := 0.5,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 0.1,
							rWynikOffset := 273.15,
							rWartoscWejsciowaZaraportowana := rTemperaturaZewnetrznaZaraportowana,
							rWartoscWyjsciowa =&gt; rTemperaturaZewnetrzna);


fbTemperaturaZewnetrznaSrednia(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZewnetrznaSrednia),
								rDeadband := 0.5,
								tCzasMinimalny := tMinimalnyCzasRaportowania,
								tCzasMaksymalny := tMaksymalnyCzasRaportowania,
								rWynikMnoznik := 0.1,
								rWynikOffset := 273.15,
								rWartoscWejsciowaZaraportowana := rTemperaturaZewnetrznaSredniaZaraportowana,
								rWartoscWyjsciowa =&gt; rTemperaturaZewnetrznaSrednia);

rTemperaturaWewnetrznaZadanaKomfort := WORD_TO_REAL(wTemperaturaWewnetrznaZadanaKomfort) + 273.15;
rTemperaturaWewnetrznaZadanaEkonomiczna := WORD_TO_REAL(wTemperaturaWewnetrznaZadanaEkonomiczna) + 273.15;
rTemperaturaZasilaniaZadanaObieguCOKomfort := WORD_TO_REAL(wTemperaturaZasilaniaZadanaObieguCOKomfort) + 273.15;
rTemperaturaZasilaniaZadanaObieguCOEkonomiczna := WORD_TO_REAL(wTemperaturaZasilaniaZadanaObieguCOEkonomiczna) + 273.15;
rTemperaturaProguZimaLato := WORD_TO_REAL(wTemperaturaProguZimaLato) + 273.15;
rMinimalnaTemperaturaZasilaniaObieguCO := WORD_TO_REAL(wMinimalnaTemperaturaZasilaniaObieguCO) + 273.15;
rMaksymalnaTemperaturaZasilaniaObieguCO := WORD_TO_REAL(wMaksymalnaTemperaturaZasilaniaObieguCO) + 273.15;
rPompaCO := WORD_TO_REAL(wPompaCO);
rZaworCOZamkniecie := WORD_TO_REAL(wZaworCOZamkniecie);
rZaworCOOtwarcie := WORD_TO_REAL(wZaworCOOtwarcie);
rTrybPracy := WORD_TO_REAL(wTrybPracy);

// Sprawdzanie czy pomiar temperatury zewnętrznej działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rTemperaturaZewnetrznaPamiec = rTemperaturaZewnetrzna THEN
	xBrakZmianyTemperaturyZewnetrznej := TRUE;
ELSE
	xBrakZmianyTemperaturyZewnetrznej := FALSE;	
END_IF
fbBrakZmianyTemperaturyZewnetrznejTimer(IN := xBrakZmianyTemperaturyZewnetrznej, PT := T#12H);
rTemperaturaZewnetrznaPamiec := rTemperaturaZewnetrzna;
IF fbBrakZmianyTemperaturyZewnetrznejTimer.Q THEN
	xBladBrakZmianyTemperaturyZewnetrznej := TRUE;
ELSE
	xBladBrakZmianyTemperaturyZewnetrznej := FALSE;
END_IF

// Sprawdzanie czy pomiar temperatury zasilania Obiegu CO działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rTemperaturaZasilaniaObieguCOPamiec = rTemperaturaZasilaniaObieguCO THEN
	xBrakZmianyTemperaturyZasilaniaObieguCO := TRUE;
ELSE
	xBrakZmianyTemperaturyZasilaniaObieguCO := FALSE;	
END_IF
fbBrakZmianyTemperaturyZasilaniaObieguCOTimer(IN := xBrakZmianyTemperaturyZasilaniaObieguCO, PT := T#12H);
rTemperaturaZasilaniaObieguCOPamiec := rTemperaturaZasilaniaObieguCO;
IF fbBrakZmianyTemperaturyZasilaniaObieguCOTimer.Q THEN
	xBladBrakZmianyTemperaturyZasilaniaObieguCO := TRUE;
ELSE
	xBladBrakZmianyTemperaturyZasilaniaObieguCO := FALSE;
END_IF

// Sprawdzanie czy została osiągnęta zadana temperatura zasilania Obiegu CO
IF rTemperaturaZasilaniaObieguCO &lt; rTemperaturaZadanaObieguCO AND wTrybPracy &lt;&gt; enumPPPSFriskoATTOM1STrybPracy.Lato THEN
	xBrakOsiagnieciaTemperauryZadanejCO := TRUE;
ELSE
	xBrakOsiagnieciaTemperauryZadanejCO := FALSE;	
END_IF
fbBrakOsiagnieciaTemperauryZadanejCOTimer(IN := xBrakOsiagnieciaTemperauryZadanejCO, PT := T#3H);
IF fbBrakOsiagnieciaTemperauryZadanejCOTimer.Q THEN
	xBladBrakOsiagnieciaTemperauryZadanejCO := TRUE;
ELSE
	xBladBrakOsiagnieciaTemperauryZadanejCO := FALSE;
END_IF

// Obsługa komunikatu przychodzacego z IZE
IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		// Rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			// Blokada wykonywania rozkazów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
				ELSE	
					IF sDane &lt;&gt; '' THEN
						sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
				ELSE
					IF sDane &lt;&gt; '' THEN
						sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
			
			IF intBlokadaWykonywaniaRozkazow = 0 THEN
				// Tryby pracy 
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYB=',
					rAtrybutWartosc := rTrybPracyZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyZapisz);		
				// Temperatura nastawiona w trybie komfortowym
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPNASCOKMF=',
					rAtrybutWartosc := rTemperaturaZasilaniaZadanaObieguCOKomfortZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTemperaturaZasilaniaZadanaObieguCOKomfortZapisz);
				// Temperatura nastawiona w trybie ekonomicznym
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPNASCOEKO=',
					rAtrybutWartosc := rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapisz);
			END_IF
		END_IF

		// Zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYB=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASCO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASCO=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaObieguCO) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZADCO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZADCO=' , sWartosc := REAL_TO_STRING(rTemperaturaZadanaObieguCO) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZAS=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZAS=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilania) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZEW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEW=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrzna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZEWSR=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEWSR=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrznaSrednia) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'PROGRAM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PROGRAM=' , sWartosc := WORD_TO_STRING(wProgram) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASCOZADKMF=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASCOZADKMF=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaZadanaObieguCOKomfort) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASCOZADEKO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASCOZADEKO=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaZadanaObieguCOEkonomiczna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZIMALATO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZIMALATO=' , sWartosc := REAL_TO_STRING(rTemperaturaProguZimaLato) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPMINZASCO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPMINZASCO=' , sWartosc := REAL_TO_STRING(rMinimalnaTemperaturaZasilaniaObieguCO) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPMAXZASCO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPMAXZASCO=' , sWartosc := REAL_TO_STRING(rMaksymalnaTemperaturaZasilaniaObieguCO) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TYPREG=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TYPREG=' , sWartosc := WORD_TO_STRING(wTypRegulacji) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POMPA=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POMPA=' , sWartosc := WORD_TO_STRING(wPompaCO) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ZAWORCOZAM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ZAWORCOZAM=' , sWartosc := WORD_TO_STRING(wZaworCOZamkniecie) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ZAWORCOOTW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ZAWORCOOTW=' , sWartosc := WORD_TO_STRING(wZaworCOOtwarcie) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'SEZONGRZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'SEZONGRZ=' , sWartosc := BOOL_TO_STRING(xSezonGrzewczy) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPSR1DZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPSR1DZ=' , sWartosc := REAL_TO_STRING(rTemperaturaSrednia1Dzien + 273.15) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			// Pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 10 BY 1 DO
					// Raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		
		// Raportowanie typu A
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji .
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Przywrócenie wartości domyślnych nastaw krzywej grzewczej i trybów pracy w przypadku restartu sterownika lub przejścia w stan autonomizacji (brak komunikacji z IZE)
rtrigPrzywrocDomyslne(CLK := xAutonomizacja);
IF rtrigPrzywrocDomyslne.Q THEN	
	IF rTrybPracy &lt;&gt; rTrybPracyAutonomizacja THEN
		rTrybPracyZapis := rTrybPracyAutonomizacja;
		xTrybPracyZapisz := TRUE;
	END_IF
	IF rTemperaturaZasilaniaZadanaObieguCOKomfort &lt;&gt; rTemperaturaZasilaniaZadanaObieguCOKomfortAutonomizacja THEN
		rTemperaturaZasilaniaZadanaObieguCOKomfortZapis := rTemperaturaZasilaniaZadanaObieguCOKomfortAutonomizacja;
		xTemperaturaZasilaniaZadanaObieguCOKomfortZapisz := TRUE;
	END_IF
	IF rTemperaturaZasilaniaZadanaObieguCOEkonomiczna &lt;&gt; rTemperaturaZasilaniaZadanaObieguCOEkonomicznaAutonomizacja THEN
		rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapis := rTemperaturaZasilaniaZadanaObieguCOEkonomicznaAutonomizacja;
		xTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapisz := TRUE;
	END_IF
END_IF	

// Trigger zapisu po Modbusie
rtrigZapisModbus (CLK := xTrybPracyZapisz OR xTemperaturaZasilaniaZadanaObieguCOKomfortZapisz OR xTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapisz);

// Taktowanie zapisywania po Modbusie
fbTaktowanieZapisywaniaModbus(IN := NOT fbTaktowanieZapisywaniaModbus.Q, PT := T#180S);
				
// Zapisywanie trybu pracy do pamięci urządzenia
IF xTrybPracyZapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := 4173,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTrybPracyZapis),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rTrybPracy = rTrybPracyZapis THEN					
		xTrybPracyZapisz := FALSE;
	END_IF
END_IF
// Zapisywanie temperatury zasilania obiegu c.o. w trybie komfortowym do pamięci urządzenia
IF xTemperaturaZasilaniaZadanaObieguCOKomfortZapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := 4205,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTemperaturaZasilaniaZadanaObieguCOKomfortZapis - 273.15),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rTemperaturaZasilaniaZadanaObieguCOKomfort = rTemperaturaZasilaniaZadanaObieguCOKomfortZapis THEN 						
		xTemperaturaZasilaniaZadanaObieguCOKomfortZapisz := FALSE;
	END_IF
END_IF
// Zapisywanie temperatury zasilania obiegu c.o. w trybie ekonomicznym do pamięci urządzenia
IF xTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := 4206,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapis - 273.15),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rTemperaturaZasilaniaZadanaObieguCOEkonomiczna = rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapis THEN
		xTemperaturaZasilaniaZadanaObieguCOEkonomicznaZapisz := FALSE;
	END_IF
END_IF

// Wyznaczanie okresu grzewczego
fbZegar15M(IN := NOT fbZegar15M.Q AND NOT xBladBrakZmianyTemperaturyZewnetrznej, PT := T#15M);

	// Obliczenie wschodu i zachodu słońca
fbWschodZachod(dtUTC_Time := WagoAppTime.FuGetDateAndTime(),
	rTimeZone := 0,
	xDST := FALSE,
	rLatitude := 54.441944,
	rLongitude := 18.559722);

	// Zapisywanie tempratury z 15-minutowym okresem, oraz obliczanie średniej
IF fbWschodZachod.dtUTC_Time &gt; fbWschodZachod.dtSunrise AND fbWschodZachod.dtUTC_Time &lt; fbWschodZachod.dtSunset THEN
	IF fbZegar15M.Q OR xPierwszySkan THEN
		aTemperatury[iTemperaturyIndex] := WORD_TO_REAL(wTemperaturaZewnetrzna) / 10;
		iTemperaturyIndex := iTemperaturyIndex + 1;
	END_IF	
	xObliczSrednia3Dni := TRUE;
ELSE 
	// Obliczanie średniej temperatury dziennej
	IF iTemperaturyIndex &gt;= 40 THEN		// Oblicz średnią temperaturę tylko, jeśli zebranych zostało przynajmniej 40 próbek
		rTemperaturaSrednia1Dzien := 0;
		iIloscPomiarow := iTemperaturyIndex;
		FOR iTemperaturyIndex := 0 TO iIloscPomiarow BY 1 DO  
			rTemperaturaSrednia1Dzien := rTemperaturaSrednia1Dzien + aTemperatury[iTemperaturyIndex];
		END_FOR
		rTemperaturaSrednia1Dzien := rTemperaturaSrednia1Dzien / iTemperaturyIndex;
		xBladIloscPomiarowTemperatury := FALSE;
	ELSE
		rTemperaturaSrednia1Dzien := 15;
		xBladIloscPomiarowTemperatury := TRUE;
	END_IF
	// Obliczanie średniej z trzech dni
	IF xObliczSrednia3Dni THEN
		aTemperaturySrednie[iTemperaturySrednieIndex] := rTemperaturaSrednia1Dzien;
		iTemperaturySrednieIndex := iTemperaturySrednieIndex + 1;
		IF iTemperaturySrednieIndex = 3 THEN 
			iTemperaturySrednieIndex := 0;
			xTemperaturaSrednia3DniObliczona := TRUE;
		END_IF
		rTemperaturaSrednia3Dni := (aTemperaturySrednie[0] + aTemperaturySrednie[1] + aTemperaturySrednie[2]) / 3; 
		xObliczSrednia3Dni := FALSE;	
	END_IF
	iTemperaturyIndex := 0;
END_IF

IF iTemperaturyIndex &gt;= 96 THEN	// Zabezpieczenie przed przekroczeniem rozmiaru tablicy w przypadku utrary zasilania przez sterownik na całą noc
	iTemperaturyIndex := 0;
END_IF

	// Sprawdzenie warunku na włączenie ogrzewania (pomiędzy 15 września a 15 maja i/lub średnia temperatura jest poniżej 15 stopni)
IF  ((fbWschodZachod._rDay &gt;= 15 AND fbWschodZachod._rMonth = 9) OR (fbWschodZachod._rMonth &gt; 9 OR fbWschodZachod._rMonth &lt; 5) OR (fbWschodZachod._rDay &lt;= 15 AND fbWschodZachod._rMonth = 5)) OR 
	(rTemperaturaSrednia3Dni &lt; 15 AND xTemperaturaSrednia3DniObliczona) OR xSezonGrzewczyCalyRok THEN
	xSezonGrzewczy := TRUE;
	rTrybPracyAutonomizacja := enumPPPSFriskoATTOM1STrybPracy.Zima;
ELSE
	xSezonGrzewczy := FALSE;
	rTrybPracyAutonomizacja := enumPPPSFriskoATTOM1STrybPracy.Lato;
END_IF

// Raportowanie typu M do IZE wartosci odczytanych z Modbusa	
IF (intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR rTemperaturaZasilaniaObieguCO &lt;&gt; rTemperaturaZasilaniaObieguCOZaraportowana OR 
	rTemperaturaZadanaObieguCO &lt;&gt; rTemperaturaZadanaObieguCOZaraportowana OR rTemperaturaZasilania &lt;&gt; rTemperaturaZasilaniaZaraportowana OR rTemperaturaZewnetrzna &lt;&gt; rTemperaturaZewnetrznaZaraportowana OR
	rTemperaturaZewnetrznaSrednia &lt;&gt; rTemperaturaZewnetrznaSredniaZaraportowana OR wProgram &lt;&gt; wProgramZaraportowana OR 
	rTemperaturaZasilaniaZadanaObieguCOKomfort &lt;&gt; rTemperaturaZasilaniaZadanaObieguCOKomfortZaraportowana OR 
	rTemperaturaZasilaniaZadanaObieguCOEkonomiczna &lt;&gt; rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZaraportowana OR rTemperaturaProguZimaLato &lt;&gt; rTemperaturaProguZimaLatoZaraportowana OR
	rMinimalnaTemperaturaZasilaniaObieguCO &lt;&gt; rMinimalnaTemperaturaZasilaniaObieguCOZaraportowana OR rMaksymalnaTemperaturaZasilaniaObieguCO &lt;&gt; rMaksymalnaTemperaturaZasilaniaObieguCOZaraportowana OR
	wTypRegulacji &lt;&gt; wTypRegulacjiZaraportowana OR wPompaCO &lt;&gt; wPompaCOZaraportowana OR wZaworCOZamkniecie &lt;&gt; wZaworCOZamkniecieZaraportowana OR wZaworCOOtwarcie &lt;&gt; wZaworCOOtwarcieZaraportowana OR 
	wTrybPracy &lt;&gt; wTrybPracyZaraportowana OR xSezonGrzewczy &lt;&gt; xSezonGrzewczyZaraportowana OR rTemperaturaSrednia1Dzien &lt;&gt; rTemperaturaSrednia1DzienZaraportowana) AND 
	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN 
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF
	END_IF			
	// Tryb pracy
	IF wTrybPracy &lt;&gt; wTrybPracyZaraportowana THEN
		wTrybPracyZaraportowana := wTrybPracy;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYB=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF		
	// Temperatura zasilania obwodu c. o.
	IF rTemperaturaZasilaniaObieguCO &lt;&gt; rTemperaturaZasilaniaObieguCOZaraportowana THEN
		rTemperaturaZasilaniaObieguCOZaraportowana := rTemperaturaZasilaniaObieguCO;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASCO=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaObieguCO) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura zadana obwodu c. o.
	IF rTemperaturaZadanaObieguCO &lt;&gt; rTemperaturaZadanaObieguCOZaraportowana THEN
		rTemperaturaZadanaObieguCOZaraportowana := rTemperaturaZadanaObieguCO;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZADCO=' , sWartosc := REAL_TO_STRING(rTemperaturaZadanaObieguCO) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura zasilania budynku
	IF rTemperaturaZasilania &lt;&gt; rTemperaturaZasilaniaZaraportowana THEN
		rTemperaturaZasilaniaZaraportowana := rTemperaturaZasilania;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZAS=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilania) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura zewnętrzna
	IF rTemperaturaZewnetrzna &lt;&gt; rTemperaturaZewnetrznaZaraportowana THEN
		rTemperaturaZewnetrznaZaraportowana := rTemperaturaZewnetrzna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEW=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrzna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura zewnętrzna średnia (2 godz.)
	IF rTemperaturaZewnetrznaSrednia &lt;&gt; rTemperaturaZewnetrznaSredniaZaraportowana THEN
		rTemperaturaZewnetrznaSredniaZaraportowana := rTemperaturaZewnetrznaSrednia;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEWSR=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrznaSrednia) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Program pracy regulatora
	IF wProgram &lt;&gt; wProgramZaraportowana THEN
		wProgramZaraportowana := wProgram;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PROGRAM=' , sWartosc := WORD_TO_STRING(wProgram) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Zadana komfortowa temperatura wody instalacyjnej w trybie regulacji stałowartościowej
	IF rTemperaturaZasilaniaZadanaObieguCOKomfort &lt;&gt; rTemperaturaZasilaniaZadanaObieguCOKomfortZaraportowana THEN
		rTemperaturaZasilaniaZadanaObieguCOKomfortZaraportowana := rTemperaturaZasilaniaZadanaObieguCOKomfort;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASCOKMF=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaZadanaObieguCOKomfort) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Zadana ekonomiczna temperatura wody instalacyjnej w trybie regulacji stałowartościowej
	IF rTemperaturaZasilaniaZadanaObieguCOEkonomiczna &lt;&gt; rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZaraportowana THEN
		rTemperaturaZasilaniaZadanaObieguCOEkonomicznaZaraportowana := rTemperaturaZasilaniaZadanaObieguCOEkonomiczna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASCOEKO=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaZadanaObieguCOEkonomiczna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura zasilania
	IF rTemperaturaProguZimaLato &lt;&gt; rTemperaturaProguZimaLatoZaraportowana THEN
		rTemperaturaProguZimaLatoZaraportowana := rTemperaturaProguZimaLato;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZIMALATO=' , sWartosc := REAL_TO_STRING(rTemperaturaProguZimaLato) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Minimalna temperatura zasilania obwodu CO
	IF rMinimalnaTemperaturaZasilaniaObieguCO &lt;&gt; rMinimalnaTemperaturaZasilaniaObieguCOZaraportowana THEN
		rMinimalnaTemperaturaZasilaniaObieguCOZaraportowana := rMinimalnaTemperaturaZasilaniaObieguCO;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPMINZASCO=' , sWartosc := REAL_TO_STRING(rMinimalnaTemperaturaZasilaniaObieguCO) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Maksymalna temperatura wody instalacyjnej w punkcie Tco
	IF rMaksymalnaTemperaturaZasilaniaObieguCO &lt;&gt; rMaksymalnaTemperaturaZasilaniaObieguCOZaraportowana THEN
		rMaksymalnaTemperaturaZasilaniaObieguCOZaraportowana := rMaksymalnaTemperaturaZasilaniaObieguCO;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPMAXZASCO=' , sWartosc := REAL_TO_STRING(rMaksymalnaTemperaturaZasilaniaObieguCO) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Typ regulacji temperatury wody instalacyjnej
	IF wTypRegulacji &lt;&gt; wTypRegulacjiZaraportowana THEN
		wTypRegulacjiZaraportowana := wTypRegulacji;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TYPREG=' , sWartosc := WORD_TO_STRING(wTypRegulacji) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Stan wyjścia sterującego pompą obiegową CO
	IF wPompaCO &lt;&gt; wPompaCOZaraportowana THEN
		wPompaCOZaraportowana := wPompaCO;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POMPA=' , sWartosc := WORD_TO_STRING(wPompaCO) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Stan wyjść sterujących siłownikiem zaworu mieszającego CO
	IF wZaworCOZamkniecie &lt;&gt; wZaworCOZamkniecieZaraportowana THEN
		wZaworCOZamkniecieZaraportowana := wZaworCOZamkniecie;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ZAWORCOZAM=' , sWartosc := WORD_TO_STRING(wZaworCOZamkniecie) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Stan wyjść sterujących siłownikiem zaworu mieszającego CO
	IF wZaworCOOtwarcie &lt;&gt; wZaworCOOtwarcieZaraportowana THEN
		wZaworCOOtwarcieZaraportowana := wZaworCOOtwarcie;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ZAWORCOOTW=' , sWartosc := WORD_TO_STRING(wZaworCOOtwarcie) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF xSezonGrzewczy &lt;&gt; xSezonGrzewczyZaraportowana THEN
		xSezonGrzewczyZaraportowana := xSezonGrzewczy;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'SEZONGRZ=' , sWartosc := BOOL_TO_STRING(xSezonGrzewczy) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF rTemperaturaSrednia1Dzien &lt;&gt; rTemperaturaSrednia1DzienZaraportowana THEN
		rTemperaturaSrednia1DzienZaraportowana := rTemperaturaSrednia1Dzien;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPSR1DZ=' , sWartosc := REAL_TO_STRING(rTemperaturaSrednia1Dzien + 273.15) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF
	
// Alarm braku komunikacji MODBUS 
IF arErrorStan[enumPPPSFriskoATTOM1SError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.BrakKomunikacji] := enumPPPSFriskoATTOM1SErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.BrakKomunikacji , intNumer := enumPPPSFriskoATTOM1SError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSFriskoATTOM1SError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.BrakKomunikacji] := enumPPPSFriskoATTOM1SErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.BrakKomunikacji , intNumer := enumPPPSFriskoATTOM1SError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm czujnika temperatury zewnętrznej 
IF arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego] := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZewnetrznego;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZewnetrznego , intNumer := enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego] := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZewnetrznego;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZewnetrznego , intNumer := enumPPPSFriskoATTOM1SError.AlarmCzujnikaZewnetrznego),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm czujnika temperatury zasilania
IF arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZasilaniaObieguCO THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO] := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZasilaniaObwoduCO;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZasilaniaObwoduCO , intNumer := enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZasilaniaObieguCO THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO] := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZasilaniaObwoduCO;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.AlarmCzujnikaZasilaniaObwoduCO , intNumer := enumPPPSFriskoATTOM1SError.AlarmCzujnikaZasilaniaObwoduCO),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm braku osiągnięcia temperatury zadanej
IF arErrorStan[enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakOsiagnieciaTemperauryZadanejCO THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO] := enumPPPSFriskoATTOM1SErrorKlasa.BrakOsiagnieciaTemperaturyCO;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.BrakOsiagnieciaTemperaturyCO , intNumer := enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakOsiagnieciaTemperauryZadanejCO THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO] := enumPPPSFriskoATTOM1SErrorKlasa.BrakOsiagnieciaTemperaturyCO;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.BrakOsiagnieciaTemperaturyCO , intNumer := enumPPPSFriskoATTOM1SError.BrakOsiagnieciaTemperaturyCO),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Alarm braku wymaganej ilości pomiarów do obliczenia średniej temperatury
IF arErrorStan[enumPPPSFriskoATTOM1SError.BladIloscPomiarowTemperatury] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladIloscPomiarowTemperatury THEN
	arErrorStan[enumPPPSFriskoATTOM1SError.BladIloscPomiarowTemperatury] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSFriskoATTOM1SError.BladIloscPomiarowTemperatury] := enumPPPSFriskoATTOM1SErrorKlasa.BladIloscPomiarowTemperatury;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSFriskoATTOM1SErrorKlasa.BladIloscPomiarowTemperatury , intNumer := enumPPPSFriskoATTOM1SError.BladIloscPomiarowTemperatury),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSKlimatyzatorTroxSchoolairV" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje zmiennych do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje do komunikacji z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Parametry	</xhtml>
              </documentation>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTrybPracy">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 255 = Nul, 0 = Occupied, 1 = Unoccupied, 2 = Boost, 3 = Standby</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracy">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTrybPracyZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPredkoscWentylatora">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> High-Byte: Value, Low-Byte: 0 Auto, 1 Hand</xhtml>
              </documentation>
            </variable>
            <variable name="rPredkoscWentylatora">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPredkoscWentylatoraZaraportowana">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 40 = Level 1, 80 = Level 2, 120 = Level 3, 160 = Level 4, 200 = Level 5</xhtml>
              </documentation>
            </variable>
            <variable name="fbPredkoscWentylatora">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="wTrybOperacji">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 255 = HVAC_NUL, 0 = HVAC_AUTO, 1 = HVAC_HEAT, 2 = HVAC_MRNG_WRMUP, 3 = HVAC_COOL, 4 = HVAC_NIGHT_PURGE, 5 = HVAC_PRE_COOL, 6 = HVAC_OFF</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybOperacji">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 7 = HVAC_TEST, 8 = HVAC_EMERG_HEAT, 9 = HVAC_FAN_ONLY, 10 = HVAC_FREE_COOL, 12 = HVAC_MAXHEAT, 13 = HVAC_ECONOMY, 14 = HVAC_DEHUMID</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybOperacjiZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaReferencyjna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Unit 0.01°C</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaReferencyjna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaReferencyjnaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaRzeczywista">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Unit 0.01°C</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaRzeczywista">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaRzeczywistaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaRzeczywista">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaRzeczywistaPamiec">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Artur Wyszomirski, 2019-03-08 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-05-16-AWy: Modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji 
						
Opis:					fb służy do komunikacji z klimatyzatorem Trox Schoolair V
				
*)


// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rTrybPracyZaraportowana := rTrybPracy;
	rPredkoscWentylatoraZaraportowana := rPredkoscWentylatora;
	rTrybOperacji := rTrybOperacjiZaraportowana;
	rTemperaturaReferencyjnaZaraportowana := rTemperaturaReferencyjna;
	rTemperaturaRzeczywistaZaraportowana := rTemperaturaRzeczywista;
	xPoInicjalizacji := TRUE;
END_IF
//

IF xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF
//

IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 17;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracy);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 19;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaReferencyjna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 21;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPredkoscWentylatora);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 22;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybOperacji);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 25;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaRzeczywista);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;							
END_IF

// Przeliczenie zmiennych
rTrybPracy := WORD_TO_REAL(wTrybPracy);
rPredkoscWentylatora := WORD_TO_REAL(SHR((wPredkoscWentylatora AND 16#FF00),8));
rTrybOperacji := WORD_TO_REAL(wTrybOperacji);
rTemperaturaReferencyjna := WORD_TO_REAL(wTemperaturaReferencyjna)*0.01 + 273.15;

fbTemperaturaRzeczywista(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaRzeczywista),
							rDeadband := 0.5,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 0.01,
							rWynikOffset := 273.15,
							rWartoscWejsciowaZaraportowana := rTemperaturaRzeczywistaZaraportowana,
							rWartoscWyjsciowa =&gt; rTemperaturaRzeczywista);
//					
						
						
// Obsluga komunikatu przychodzacego z IZE
IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		// Rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
		END_IF
				
		// Zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBPRACY=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBPRACY=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'PREDKOSCWENT=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PREDKOSCWENT=' , sWartosc := REAL_TO_STRING(rPredkoscWentylatora) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPREF=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREF=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPRZECZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPRZECZ=' , sWartosc := REAL_TO_STRING(rTemperaturaRzeczywista) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBOP=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOP=' , sWartosc := REAL_TO_STRING(rTrybOperacji) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF		
			// Pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 10 BY 1 DO
					// Raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF		
		// Raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Raportowanie typu M do IZE wartosci odczytanych z Modbusa	
IF 	(intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR rTrybPracy &lt;&gt; rTrybPracyZaraportowana OR rPredkoscWentylatora &lt;&gt; rPredkoscWentylatoraZaraportowana OR
	rTemperaturaReferencyjna &lt;&gt; rTemperaturaReferencyjnaZaraportowana OR rTemperaturaRzeczywista &lt;&gt; rTemperaturaRzeczywistaZaraportowana OR rTrybOperacji &lt;&gt; rTrybOperacjiZaraportowana) AND 
	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN 
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
	END_IF	
	IF xOverFlow = TRUE THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
					sTypKomunikatu := 'M' ,
					sMnemonik := sMnemonik ,
					sMACAdres := sMACAdres ,
					sIDNadawcy := sIdInstancji ,
					sIDOdbiorcy := sIdAplikacji ,
					sDaneZapasowe := sDaneZapasowe ,
					sDane := sDane ,
					arTablicaKomunikatow := arTablicaKomunikatow ,
					intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
					intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
					sWyslanyKomunikat := sWyslanyKomunikatDummy);
		sDane := '';
	END_IF
	// Tryb pracy
	IF rTrybPracy &lt;&gt; rTrybPracyZaraportowana THEN
		rTrybPracyZaraportowana := rTrybPracy;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBPRACY=' , sWartosc := REAL_TO_STRING(rTrybPracy) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Prędkość wentylatora
	IF rPredkoscWentylatora &lt;&gt; rPredkoscWentylatoraZaraportowana THEN
		rPredkoscWentylatoraZaraportowana := rPredkoscWentylatora;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'PREDKOSCWENT=' , sWartosc := REAL_TO_STRING(rPredkoscWentylatora) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura referencyjna
	IF rTemperaturaReferencyjna &lt;&gt; rTemperaturaReferencyjnaZaraportowana THEN
		rTemperaturaReferencyjnaZaraportowana := rTemperaturaReferencyjna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPREF=' , sWartosc := REAL_TO_STRING(rTemperaturaReferencyjna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura rzeczywista
	IF rTemperaturaRzeczywista &lt;&gt; rTemperaturaRzeczywistaZaraportowana THEN
		rTemperaturaRzeczywistaZaraportowana := rTemperaturaRzeczywista;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPRZECZ=' , sWartosc := REAL_TO_STRING(rTemperaturaRzeczywista) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura referencyjna trybu manulnego
	IF rTrybOperacji &lt;&gt; rTrybOperacjiZaraportowana THEN
		rTrybOperacjiZaraportowana := rTrybOperacji;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOP=' , sWartosc := REAL_TO_STRING(rTrybOperacji) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rTemperaturaRzeczywistaPamiec = rTemperaturaRzeczywista THEN
	xBrakZmianyTemperatury := TRUE;
ELSE
	xBrakZmianyTemperatury := FALSE;	
END_IF
fbBrakZmianyTemperaturyTimer(IN := xBrakZmianyTemperatury, PT := T#12H);
rTemperaturaRzeczywistaPamiec := rTemperaturaRzeczywista;
IF fbBrakZmianyTemperaturyTimer.Q THEN
	xBladBrakZmianyTemperatury := TRUE;
ELSE
	xBladBrakZmianyTemperatury := FALSE;
END_IF

// Alarm braku komunikacji MODBUS 
IF arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji] := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.BrakKomunikacji , intNumer := enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji] := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.BrakKomunikacji , intNumer := enumPPPSKlimatyzatorTroxSchoolairVError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Alarm czujnika temperatury
IF arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika] := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.AlarmCzujnika , intNumer := enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika] := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSKlimatyzatorTroxSchoolairVErrorKlasa.AlarmCzujnika , intNumer := enumPPPSKlimatyzatorTroxSchoolairVError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSLicznikCieplaMultical403" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje zmiennych do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje do komunikacji z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wEnergiaCieplna_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Całkowita energia cieplna </xhtml>
              </documentation>
            </variable>
            <variable name="wEnergiaCieplna_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaCieplna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaCieplna">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaCieplnaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaCieplnaJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka energii cieplnej</xhtml>
              </documentation>
            </variable>
            <variable name="wPrzeplyw_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aktualna wartość przepływu</xhtml>
              </documentation>
            </variable>
            <variable name="wPrzeplyw_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPrzeplyw">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPrzeplyw">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPrzeplywZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPrzeplywJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka przepływu</xhtml>
              </documentation>
            </variable>
            <variable name="rPrzeplywPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartosc przechowywana w pamieci w celu porównania z wartością aktualną </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyPrzeplywu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku zmiany przepływu w czasie</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyPrzeplywuTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPrzeplywu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku przeplywu przez czas 12h - podstawa wygenerowania alarmu	</xhtml>
              </documentation>
            </variable>
            <variable name="wObjetosc_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Objętość medium, które przepłynęło przez licznik</xhtml>
              </documentation>
            </variable>
            <variable name="wObjetosc_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rObjetosc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbObjetosc">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rObjetoscZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wObjetoscJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka wolumenu</xhtml>
              </documentation>
            </variable>
            <variable name="wMoc_Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aktualna moc cieplna płynąca przez licznik</xhtml>
              </documentation>
            </variable>
            <variable name="wMoc_Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMoc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMoc">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka mocy</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZasilania_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temp czynnika na wejściu licznika</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZasilania_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTemperaturaZasilania">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilania">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartosc przechowywana w pamieci w celu porównania z wartością aktualną </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilania">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku zmiany przepływu w czasie</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilania">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku przeplywu przez czas 12h - podstawa wygenerowania alarmu	</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaPowrotu_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temp czynnika na wyjściu licznika</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaPowrotu_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotu">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotu">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartosc przechowywana w pamieci w celu porównania z wartością aktualną </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyPowrotu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku zmiany przepływu w czasie</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyTemperaturyPowrotuTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyPowrotu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku przeplywu przez czas 12h - podstawa wygenerowania alarmu	</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Artur Wyszomirski, 2019-08-07 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-08-28-AWy: Zmiana adresów rejestrów (przesunięcie -1). Zmiana poszczególnych parametrów przy przeliczaniu zmiennych.
						2019-08-29-AWy: Usunięcie buga z raporotwania mocy.
					
Opis:					Komunikacji z licznikami ciepła Multical 403
		
*)

// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa), PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rPrzeplywZaraportowana := rPrzeplyw;
	rMocZaraportowana := rMoc;
	rEnergiaCieplnaZaraportowana := rEnergiaCieplna;
	rObjetoscZaraportowana := rObjetosc;
	rTemperaturaZasilaniaZaraportowana := rTemperaturaZasilania;
	rTemperaturaPowrotuZaraportowana := rTemperaturaPowrotu;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

// Deklaracja rejestrów Modbusa
IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 20;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCieplna_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 21;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCieplna_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 0;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPrzeplyw_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 1;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPrzeplyw_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 52;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wObjetosc_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 53;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wObjetosc_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMoc_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 5;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMoc_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 6;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilania_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 7;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilania_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 8;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotu_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 9;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotu_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 92;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCieplnaJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 82;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPrzeplywJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 108;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wObjetoscJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 84;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
END_IF

// konwersja 2 odczytanych wordów na 32Float
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wEnergiaCieplna_Hi, wRejestrLSW := wEnergiaCieplna_Lo, rWartoscFloat32 := rEnergiaCieplna);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wPrzeplyw_Hi, wRejestrLSW := wPrzeplyw_Lo, rWartoscFloat32 := rPrzeplyw);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wObjetosc_Hi, wRejestrLSW := wObjetosc_Lo, rWartoscFloat32 := rObjetosc);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wMoc_Hi, wRejestrLSW := wMoc_Lo, rWartoscFloat32 := rMoc);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wTemperaturaZasilania_Hi, wRejestrLSW := wTemperaturaZasilania_Lo, rWartoscFloat32 := rTemperaturaZasilania);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wTemperaturaPowrotu_Hi, wRejestrLSW := wTemperaturaPowrotu_Lo, rWartoscFloat32 := rTemperaturaPowrotu);

// Przeliczenie zmiennych
fbEnergiaCieplna(	rWartoscWejsciowa := rEnergiaCieplna,
					rDeadband := 100,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 1000000000,
					rWynikOffset := 0,
					rWartoscWejsciowaZaraportowana := rEnergiaCieplnaZaraportowana,
					rWartoscWyjsciowa =&gt; rEnergiaCieplna);
					
fbPrzeplyw(	rWartoscWejsciowa := rPrzeplyw,
			rDeadband := 0.00000027778,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.00000027778,
			rWynikOffset := 0,
			rWartoscWejsciowaZaraportowana := rPrzeplywZaraportowana,
			rWartoscWyjsciowa =&gt; rPrzeplyw);
							
fbObjetosc(	rWartoscWejsciowa := rObjetosc,
			rDeadband := 0.001,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 1,
			rWynikOffset := 0,
			rWartoscWejsciowaZaraportowana := rObjetoscZaraportowana,
			rWartoscWyjsciowa =&gt; rObjetosc);								
								
fbMoc(	rWartoscWejsciowa := rMoc,
		rDeadband := 10,
		tCzasMinimalny := tMinimalnyCzasRaportowania,
		tCzasMaksymalny := tMaksymalnyCzasRaportowania,
		rWynikMnoznik := 1000,
		rWynikOffset := 0,
		rWartoscWejsciowaZaraportowana := rMocZaraportowana,
		rWartoscWyjsciowa =&gt; rMoc);
				
fbTemperaturaZasilania(	rWartoscWejsciowa := rTemperaturaZasilania,
						rDeadband := 0.1,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 1,
						rWynikOffset := 273.15,
						rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaZaraportowana,
						rWartoscWyjsciowa =&gt; rTemperaturaZasilania);
			
fbTemperaturaPowrotu(	rWartoscWejsciowa := rTemperaturaPowrotu,
						rDeadband := 0.1,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 1,
						rWynikOffset := 273.15,
						rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuZaraportowana,
						rWartoscWyjsciowa =&gt; rTemperaturaPowrotu);							

// Sprawdzanie czy pomiar aktualnego przeplywu działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rPrzeplywPamiec = rPrzeplyw THEN
	xBrakZmianyPrzeplywu := TRUE;
ELSE
	xBrakZmianyPrzeplywu := FALSE;	
END_IF
fbBrakZmianyPrzeplywuTimer(IN := xBrakZmianyPrzeplywu, PT := T#12H);
IF fbBrakZmianyPrzeplywuTimer.Q THEN
	xBladBrakZmianyPrzeplywu := TRUE;
ELSE
	xBladBrakZmianyPrzeplywu := FALSE;
END_IF
rPrzeplywPamiec := rPrzeplyw;

// Sprawdzanie czy pomiar temperatury zasilania działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rTemperaturaZasilaniaPamiec = rTemperaturaZasilania THEN
	xBrakZmianyTemperaturyZasilania := TRUE;
ELSE
	xBrakZmianyTemperaturyZasilania := FALSE;	
END_IF
fbBrakZmianyTemperaturyZasilaniaTimer(IN := xBrakZmianyTemperaturyZasilania, PT := T#12H);
IF fbBrakZmianyTemperaturyZasilaniaTimer.Q THEN
	xBladBrakZmianyTemperaturyZasilania := TRUE;
ELSE
	xBladBrakZmianyTemperaturyZasilania := FALSE;
END_IF
rTemperaturaZasilaniaPamiec := rTemperaturaZasilania;

// Sprawdzanie czy pomiar temperatury powrotu działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rTemperaturaPowrotuPamiec = rTemperaturaPowrotu THEN
	xBrakZmianyTemperaturyPowrotu := TRUE;
ELSE
	xBrakZmianyTemperaturyPowrotu := FALSE;	
END_IF
fbBrakZmianyTemperaturyPowrotuTimer(IN := xBrakZmianyTemperaturyPowrotu, PT := T#12H);
IF fbBrakZmianyTemperaturyPowrotuTimer.Q THEN
	xBladBrakZmianyTemperaturyPowrotu := TRUE;
ELSE
	xBladBrakZmianyTemperaturyPowrotu := FALSE;
END_IF
rTemperaturaPowrotuPamiec := rTemperaturaPowrotu;

// Obsluga komunikatu przychodzacego z IZE
IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCC=' , sWartosc := REAL_TO_STRING(rEnergiaCieplna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FLOWCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FLOWCC=' , sWartosc := REAL_TO_STRING(rPrzeplyw) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLCC=' , sWartosc := REAL_TO_STRING(rObjetosc) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCC=' , sWartosc := REAL_TO_STRING(rMoc) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPINCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPINCC=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilania) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPOUTCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPOUTCC=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotu) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			// Pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 10 BY 1 DO
					// Raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		// Raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Raportowanie typu M do IZE wartosci odczytanych z Modbusa	
IF 	(rPrzeplyw &lt;&gt; rPrzeplywZaraportowana OR rMoc &lt;&gt; rMocZaraportowana OR rEnergiaCieplna &lt;&gt; rEnergiaCieplnaZaraportowana OR rObjetosc &lt;&gt; rObjetoscZaraportowana OR 
	rTemperaturaZasilania &lt;&gt; rTemperaturaZasilaniaZaraportowana OR rTemperaturaPowrotu &lt;&gt; rTemperaturaPowrotuZaraportowana) AND 
	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	// Sumaryczna zużyta energia cieplna licznika
	IF rEnergiaCieplna &lt;&gt; rEnergiaCieplnaZaraportowana THEN
		rEnergiaCieplnaZaraportowana := rEnergiaCieplna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCC=' , sWartosc := REAL_TO_STRING(rEnergiaCieplna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Biezacy przeplyw licznika 
	IF rPrzeplyw &lt;&gt; rPrzeplywZaraportowana THEN
		rPrzeplywZaraportowana := rPrzeplyw;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FLOWCC=' , sWartosc := REAL_TO_STRING(rPrzeplyw) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Objętość medium, które przepłynęło przez licznik
	IF rObjetosc &lt;&gt; rObjetoscZaraportowana THEN
		rObjetoscZaraportowana := rObjetosc;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLCC=' , sWartosc := REAL_TO_STRING(rObjetosc) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Biezaca moc licznika
	IF rMoc &lt;&gt; rMocZaraportowana THEN
		rMocZaraportowana := rMoc;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCC=' , sWartosc := REAL_TO_STRING(rMoc) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura na wejsciu licznika
	IF rTemperaturaZasilania &lt;&gt; rTemperaturaZasilaniaZaraportowana THEN
		rTemperaturaZasilaniaZaraportowana := rTemperaturaZasilania;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPINCC=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilania) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
		// Temperatura na wyjsciu licznika
	IF rTemperaturaPowrotu &lt;&gt; rTemperaturaPowrotuZaraportowana THEN
		rTemperaturaPowrotuZaraportowana := rTemperaturaPowrotu;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPOUTCC=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotu) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF
	
// Alarm braku komunikacji MODBUS 
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji] := enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.BrakKomunikacji, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji] := enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.BrakKomunikacji, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm czujnika przepływu
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyPrzeplywu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu] := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.AlarmCzujnikaPrzeplywu, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyPrzeplywu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu] := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.AlarmCzujnikaPrzeplywu, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPrzeplywu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm czujnika temperatury zasilania
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZasilania THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania] := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
														  	intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.AlarmCzujnikaZasilania, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZasilania THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania] := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.AlarmCzujnikaZasilania, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaZasilania),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF	
	
// Alarm czujnika temperatury powrotu
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyPowrotu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu] := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.AlarmCzujnikaPowrotu, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyPowrotu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu] := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical403ErrorKlasa.AlarmCzujnikaPowrotu, 
															intNumer := enumPPPSLicznikCieplaMultical403Error.AlarmCzujnikaPowrotu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSLicznikCieplaMultical602" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje zmiennych do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Definicje do komunikacji z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="10" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wEnergiaCieplna_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Całkowita energia cieplna </xhtml>
              </documentation>
            </variable>
            <variable name="wEnergiaCieplna_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rEnergiaCieplna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbEnergiaCieplna">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rEnergiaCieplnaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wEnergiaCieplnaJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka energii cieplnej</xhtml>
              </documentation>
            </variable>
            <variable name="wPrzeplyw_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aktualna wartość przepływu</xhtml>
              </documentation>
            </variable>
            <variable name="wPrzeplyw_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rPrzeplyw">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbPrzeplyw">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPrzeplywZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wPrzeplywJednostka">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka przepływu</xhtml>
              </documentation>
            </variable>
            <variable name="rPrzeplywPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartosc przechowywana w pamieci w celu porównania z wartością aktualną </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyPrzeplywu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku zmiany przepływu w czasie</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyPrzeplywuTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyPrzeplywu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku przeplywu przez czas 12h - podstawa wygenerowania alarmu	</xhtml>
              </documentation>
            </variable>
            <variable name="wObjetosc_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Objętość medium, które przepłynęło przez licznik</xhtml>
              </documentation>
            </variable>
            <variable name="wObjetosc_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rObjetosc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbObjetosc">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rObjetoscZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wObjetoscJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka wolumenu</xhtml>
              </documentation>
            </variable>
            <variable name="wMoc_Hi">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Aktualna moc cieplna płynąca przez licznik</xhtml>
              </documentation>
            </variable>
            <variable name="wMoc_Lo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rMoc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbMoc">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rMocZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wMocJednostka">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Jednostka mocy</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZasilania_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temp czynnika na wejściu licznika</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZasilania_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTemperaturaZasilania">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilania">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartosc przechowywana w pamieci w celu porównania z wartością aktualną </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilania">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku zmiany przepływu w czasie</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilania">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku przeplywu przez czas 12h - podstawa wygenerowania alarmu	</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaPowrotu_Lo">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temp czynnika na wyjściu licznika</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaPowrotu_Hi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotu">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotu">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartosc przechowywana w pamieci w celu porównania z wartością aktualną </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyPowrotu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku zmiany przepływu w czasie</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyTemperaturyPowrotuTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyPowrotu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga informująca o braku przeplywu przez czas 12h - podstawa wygenerowania alarmu	</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Jan Cichosz, 2019-03-25 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2019-05-16-AWy: Modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji
						2019-05-16-JC: Poprawki w formatowaniu, zmiany nazw zmiennych 
						2019-08-08-AWy: Zmiana nazw zmiennych i usunięcie zbędnych. Poprawki przy przeliczaniu zmiennych. Poprwaki w nazwach atrybutów. Generowanie alarmów czujników temperatury.
										Wysyłanie alarmów. Usunięcie blokady wykonywania rozkazów.
						2019-08-29-AWy: Zmiana poszczególnych parametrów przy przeliczaniu zmiennych. Usunięcie buga z raporotwania mocy.
					
Opis:					Komunikacja z licznikami ciepła Multical 602							
*)

// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa), PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rPrzeplywZaraportowana := rPrzeplyw;
	rMocZaraportowana := rMoc;
	rEnergiaCieplnaZaraportowana := rEnergiaCieplna;
	rObjetoscZaraportowana := rObjetosc;
	rTemperaturaZasilaniaZaraportowana := rTemperaturaZasilania;
	rTemperaturaPowrotuZaraportowana := rTemperaturaPowrotu;
	xPoInicjalizacji := TRUE;
END_IF
mirek jest Słaby

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

// Deklaracja rejestrów Modbusa
IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 256;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCieplna_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 257;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCieplna_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 258;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPrzeplyw_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 259;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPrzeplyw_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 260;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wObjetosc_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 261;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wObjetosc_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 262;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMoc_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 263;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMoc_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 264;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilania_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 265;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilania_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 266;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotu_Hi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 267;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotu_Lo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
		
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 272;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnergiaCieplnaJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 273;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPrzeplywJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 274;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wObjetoscJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 275;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wMocJednostka);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
END_IF

// konwersja 2 odczytanych wordów na 32Float
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wEnergiaCieplna_Hi, wRejestrLSW := wEnergiaCieplna_Lo, rWartoscFloat32 := rEnergiaCieplna);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wPrzeplyw_Hi, wRejestrLSW := wPrzeplyw_Lo, rWartoscFloat32 := rPrzeplyw);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wObjetosc_Hi, wRejestrLSW := wObjetosc_Lo, rWartoscFloat32 := rObjetosc);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wMoc_Hi, wRejestrLSW := wMoc_Lo, rWartoscFloat32 := rMoc);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wTemperaturaZasilania_Hi, wRejestrLSW := wTemperaturaZasilania_Lo, rWartoscFloat32 := rTemperaturaZasilania);
fnKonwersja2x16naFloat32BySchneider(wRejestrMSW := wTemperaturaPowrotu_Hi, wRejestrLSW := wTemperaturaPowrotu_Lo, rWartoscFloat32 := rTemperaturaPowrotu);

// Przeliczenie zmiennych
fbEnergiaCieplna(	rWartoscWejsciowa := rEnergiaCieplna,
					rDeadband := 100,
					tCzasMinimalny := tMinimalnyCzasRaportowania,
					tCzasMaksymalny := tMaksymalnyCzasRaportowania,
					rWynikMnoznik := 1000000000,
					rWynikOffset := 0,
					rWartoscWejsciowaZaraportowana := rEnergiaCieplnaZaraportowana,
					rWartoscWyjsciowa =&gt; rEnergiaCieplna);
					
fbPrzeplyw(	rWartoscWejsciowa := rPrzeplyw,
			rDeadband := 0.00000027778,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 0.00000027778,
			rWynikOffset := 0,
			rWartoscWejsciowaZaraportowana := rPrzeplywZaraportowana,
			rWartoscWyjsciowa =&gt; rPrzeplyw);
							
fbObjetosc(	rWartoscWejsciowa := rObjetosc,
			rDeadband := 0.001,
			tCzasMinimalny := tMinimalnyCzasRaportowania,
			tCzasMaksymalny := tMaksymalnyCzasRaportowania,
			rWynikMnoznik := 1,
			rWynikOffset := 0,
			rWartoscWejsciowaZaraportowana := rObjetoscZaraportowana,
			rWartoscWyjsciowa =&gt; rObjetosc);								
								
fbMoc(	rWartoscWejsciowa := rMoc,
		rDeadband := 10,
		tCzasMinimalny := tMinimalnyCzasRaportowania,
		tCzasMaksymalny := tMaksymalnyCzasRaportowania,
		rWynikMnoznik := 1000,
		rWynikOffset := 0,
		rWartoscWejsciowaZaraportowana := rMocZaraportowana,
		rWartoscWyjsciowa =&gt; rMoc);
				
fbTemperaturaZasilania(	rWartoscWejsciowa := rTemperaturaZasilania,
						rDeadband := 0.1,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 1,
						rWynikOffset := 273.15,
						rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaZaraportowana,
						rWartoscWyjsciowa =&gt; rTemperaturaZasilania);
			
fbTemperaturaPowrotu(	rWartoscWejsciowa := rTemperaturaPowrotu,
						rDeadband := 0.1,
						tCzasMinimalny := tMinimalnyCzasRaportowania,
						tCzasMaksymalny := tMaksymalnyCzasRaportowania,
						rWynikMnoznik := 1,
						rWynikOffset := 273.15,
						rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuZaraportowana,
						rWartoscWyjsciowa =&gt; rTemperaturaPowrotu);							

// Sprawdzanie czy pomiar aktualnego przeplywu działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rPrzeplywPamiec = rPrzeplyw THEN
	xBrakZmianyPrzeplywu := TRUE;
ELSE
	xBrakZmianyPrzeplywu := FALSE;	
END_IF
fbBrakZmianyPrzeplywuTimer(IN := xBrakZmianyPrzeplywu, PT := T#12H);
IF fbBrakZmianyPrzeplywuTimer.Q THEN
	xBladBrakZmianyPrzeplywu := TRUE;
ELSE
	xBladBrakZmianyPrzeplywu := FALSE;
END_IF
rPrzeplywPamiec := rPrzeplyw;

// Sprawdzanie czy pomiar temperatury zasilania działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rTemperaturaZasilaniaPamiec = rTemperaturaZasilania THEN
	xBrakZmianyTemperaturyZasilania := TRUE;
ELSE
	xBrakZmianyTemperaturyZasilania := FALSE;	
END_IF
fbBrakZmianyTemperaturyZasilaniaTimer(IN := xBrakZmianyTemperaturyZasilania, PT := T#12H);
IF fbBrakZmianyTemperaturyZasilaniaTimer.Q THEN
	xBladBrakZmianyTemperaturyZasilania := TRUE;
ELSE
	xBladBrakZmianyTemperaturyZasilania := FALSE;
END_IF
rTemperaturaZasilaniaPamiec := rTemperaturaZasilania;

// Sprawdzanie czy pomiar temperatury powrotu działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF rTemperaturaPowrotuPamiec = rTemperaturaPowrotu THEN
	xBrakZmianyTemperaturyPowrotu := TRUE;
ELSE
	xBrakZmianyTemperaturyPowrotu := FALSE;	
END_IF
fbBrakZmianyTemperaturyPowrotuTimer(IN := xBrakZmianyTemperaturyPowrotu, PT := T#12H);
IF fbBrakZmianyTemperaturyPowrotuTimer.Q THEN
	xBladBrakZmianyTemperaturyPowrotu := TRUE;
ELSE
	xBladBrakZmianyTemperaturyPowrotu := FALSE;
END_IF
rTemperaturaPowrotuPamiec := rTemperaturaPowrotu;

// Obsluga komunikatu przychodzacego z IZE
IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ENCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCC=' , sWartosc := REAL_TO_STRING(rEnergiaCieplna) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'FLOWCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FLOWCC=' , sWartosc := REAL_TO_STRING(rPrzeplyw) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'VOLCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLCC=' , sWartosc := REAL_TO_STRING(rObjetosc) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POWCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCC=' , sWartosc := REAL_TO_STRING(rMoc) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPINCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPINCC=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilania) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPOUTCC=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPOUTCC=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotu) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
										sTypKomunikatu := 'A' ,
										sMnemonik := sMnemonik ,
										sMACAdres := sMACAdres ,
										sIDNadawcy := sIdInstancji ,
										sIDOdbiorcy := sIdAplikacji ,
										sDaneZapasowe := sDaneZapasowe ,
										sDane := sDane ,
										arTablicaKomunikatow := arTablicaKomunikatow ,
										intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
										intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
										sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF
			END_IF
			// Pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 10 BY 1 DO
					// Raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		// Raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Raportowanie typu M do IZE wartosci odczytanych z Modbusa	
IF 	(rPrzeplyw &lt;&gt; rPrzeplywZaraportowana OR rMoc &lt;&gt; rMocZaraportowana OR rEnergiaCieplna &lt;&gt; rEnergiaCieplnaZaraportowana OR rObjetosc &lt;&gt; rObjetoscZaraportowana OR 
	rTemperaturaZasilania &lt;&gt; rTemperaturaZasilaniaZaraportowana OR rTemperaturaPowrotu &lt;&gt; rTemperaturaPowrotuZaraportowana) AND 
	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	// Sumaryczna zużyta energia cieplna licznika
	IF rEnergiaCieplna &lt;&gt; rEnergiaCieplnaZaraportowana THEN
		rEnergiaCieplnaZaraportowana := rEnergiaCieplna;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ENCC=' , sWartosc := REAL_TO_STRING(rEnergiaCieplna) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Biezacy przeplyw licznika 
	IF rPrzeplyw &lt;&gt; rPrzeplywZaraportowana THEN
		rPrzeplywZaraportowana := rPrzeplyw;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'FLOWCC=' , sWartosc := REAL_TO_STRING(rPrzeplyw) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Objętość medium, które przepłynęło przez licznik
	IF rObjetosc &lt;&gt; rObjetoscZaraportowana THEN
		rObjetoscZaraportowana := rObjetosc;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'VOLCC=' , sWartosc := REAL_TO_STRING(rObjetosc) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Biezaca moc licznika
	IF rMoc &lt;&gt; rMocZaraportowana THEN
		rMocZaraportowana := rMoc;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'POWCC=' , sWartosc := REAL_TO_STRING(rMoc) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	// Temperatura na wejsciu licznika
	IF rTemperaturaZasilania &lt;&gt; rTemperaturaZasilaniaZaraportowana THEN
		rTemperaturaZasilaniaZaraportowana := rTemperaturaZasilania;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPINCC=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilania) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
		// Temperatura na wyjsciu licznika
	IF rTemperaturaPowrotu &lt;&gt; rTemperaturaPowrotuZaraportowana THEN
		rTemperaturaPowrotuZaraportowana := rTemperaturaPowrotu;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPOUTCC=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotu) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'M' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF
	
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF
	
// Alarm braku komunikacji MODBUS 
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji] := enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.BrakKomunikacji, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji] := enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.BrakKomunikacji, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm czujnika przepływu
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyPrzeplywu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu] := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.AlarmCzujnikaPrzeplywu, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyPrzeplywu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu] := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.AlarmCzujnikaPrzeplywu, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPrzeplywu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Alarm czujnika temperatury zasilania
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZasilania THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania] := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
														  	intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.AlarmCzujnikaZasilania, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZasilania THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania] := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.AlarmCzujnikaZasilania, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaZasilania),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF	
	
// Alarm czujnika temperatury powrotu
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyPowrotu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu] := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := TRUE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.AlarmCzujnikaPowrotu, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyPowrotu THEN
	arErrorStan[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu] := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '',
							sTypKomunikatu := 'E',
							sMnemonik := sMnemonik,
							sMACAdres := sMACAdres,
							sIDNadawcy := sIdInstancji,
							sIDOdbiorcy := sIdAplikacji,
							sDaneZapasowe := sDaneZapasowe,
							sDane := fnKomunikatDaneError(	xAktywny := FALSE, 
															intKlasa := enumPPPSLicznikCieplaMultical602ErrorKlasa.AlarmCzujnikaPowrotu, 
															intNumer := enumPPPSLicznikCieplaMultical602Error.AlarmCzujnikaPowrotu),
							arTablicaKomunikatow := arTablicaKomunikatow,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSSilownikSABp" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="bKanalEnOcean">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="sEnOceanID">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="rZadanePolozenieSilownika">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tCzasTimeoutEnOcean">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xGlobalnaAutomatycznaKonfiguracja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tCzestotliwoscAutomatycznejKonfiguracji">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="rTrybPracyAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślny tryb pracy</xhtml>
              </documentation>
            </variable>
            <variable name="rPozycjaSilownikaManAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślne położenie siłownika</xhtml>
              </documentation>
            </variable>
            <variable name="rFlagaSerwisowaAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślna flaga serwisowa</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasSpadkuTemperatury">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Okres detekcji</xhtml>
              </documentation>
            </variable>
            <variable name="rDeltaSpadkuTemperatury">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość o jaką musi spaść temp. w okresie intCzasSpadkuTemperatury, aby wyzwolić alarm</xhtml>
              </documentation>
            </variable>
            <variable name="rDeltaWzrostuTemperatury">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość o jaką musi wzrosnąć temp. w okresie intCzasSpadkuTemperatury, aby odwołać alarm</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyHMI">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> patrz enumPPPSZadajnikTrybPracy</xhtml>
              </documentation>
            </variable>
            <variable name="rZadanePolozenieSilownikaHMI">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pozycja siłownika z nastawy na webvisu	</xhtml>
              </documentation>
            </variable>
            <variable name="xPokazPanelHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 - widoczny; 1 - niewidoczny</xhtml>
              </documentation>
            </variable>
            <variable name="xUsuwaniePotwierdzenieHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wyświetlenie okienka potwierdzenia chęci usunięcia siłownika</xhtml>
              </documentation>
            </variable>
            <variable name="xUczenieWlaczHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie flagi uczenia siłownika</xhtml>
              </documentation>
            </variable>
            <variable name="xUczenieWlaczone">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Potwierdzenie włączenia uczenia</xhtml>
              </documentation>
            </variable>
            <variable name="xUsuwanieHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Usuwanie EnOcean ID z kanału bramki</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="rDiagnostykaTemperaturaPomieszczenia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDiagnostykaPozycjaSilownika">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intDiagnostykaFlagaSerwisowa">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intDiagnostykaTrybPracy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xDiagnostykaDetekcjaOtwarciaOkna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sDiagnostykaEnOceanIDodczytany">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="xDiagnostykaPoprawneParowanie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wDiagnostykaCzasOdOstatniegoKomunikatu">
              <type>
                <WORD />
              </type>
            </variable>
          </outputVars>
          <localVars constant="true">
            <variable name="uintLiczbaRejestrowNaKanal">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="20" />
              </initialValue>
            </variable>
            <variable name="uintPierwszyRejestr">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="2000" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="wLearnEnOceanOdczytany">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xLearnEnOceanOdczytany">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xLearnEnOceanWlacz">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xLearnEnOceanWylacz">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbWysylanieLearn">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="intTemp">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="xResetWysylanieLern">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xPoprawneParowanie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="uintORGModbusAdres">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">definicja adresów rejestrów modbusowych</xhtml>
              </documentation>
            </variable>
            <variable name="uintFunctionModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintTypeModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintManufacturerModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintEnOceanIDHiModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintEnOceanIDLoModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintCzasOdOstatniegoKomunikatuModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintZadanaPozycjaSilownikaModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintFlagaSerwisowaModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintStatusUrzadzeniaModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintTemperaturaPomieszczeniaOdczytanaModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintNastawaPotencjometraModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintUczenieSilownikaAdres">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="31" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">uintLiczbaTelegramowModbusAdres : UINT;</xhtml>
              </documentation>
            </variable>
            <variable name="uintLearnModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienne operacyjne</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="intRozkazTymczasowy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="rtrigPrzywrocDomyslne">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywracanie domyślnych wartości nastaw</xhtml>
              </documentation>
            </variable>
            <variable name="rtrigZapisModbus">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger zapisu danych po Modbusie</xhtml>
              </documentation>
            </variable>
            <variable name="fbTaktowanieZapisywaniaModbus">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cykliczne żądanie zapisu danych do urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="tonBrakKomunikacjiPLC">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbWyslanieKonfiguracji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> definicja zmiennych i FB do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xPozwolenieNaAutomatycznaKonfiguracje">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xResetTimerautomatycznejKonfiguracji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracy">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy regulatora.</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyPamiec">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xTrybPracyZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="wFunctionEnOceanOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTypeEnOceanOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wManufacturerEnOceanOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="sEnOceanIDodczytany">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="wEnOceanIDHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnOceanIDLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnOceanIDHiZapis">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnOceanIDLoZapis">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wCzasOdOstatniegoKomunikatu">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="fbTimeoutEnOcean">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="wStatusUrzadzenia">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xBladBaterii">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBladBaterii">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xAlarmOgolny">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbDecToBin">
              <type>
                <derived name="fbDecToBin" />
              </type>
            </variable>
            <variable name="wLiczbaTelegramow">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintLiczbaTelegramow">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="wTemperaturaPomieszczeniaOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="fbTemperaturaPomieszczenia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPomieszczenia">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="273.15" />
              </initialValue>
            </variable>
            <variable name="rTemperaturaPomieszczeniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaPomieszczeniaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperatura zapamiętana w celu porównania z aktualną</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga braku zmiany temperatury</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyTemperaturyTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer braku zmiany temperatury (24 godziny)</xhtml>
              </documentation>
            </variable>
            <variable name="xBladBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Błąd braku zmiany temperatury </xhtml>
              </documentation>
            </variable>
            <variable name="wPozycjaSilownikaOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wPozycjaSilownikaZadanie">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="fbPozycjaSilownika">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rPozycjaSilownika">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pozycja siłownika.</xhtml>
              </documentation>
            </variable>
            <variable name="rPozycjaSilownikaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPozycjaSilownikaAuto">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pozycja siłownika w trybie automatycznym.</xhtml>
              </documentation>
            </variable>
            <variable name="rPozycjaSilownikaAutoZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rPozycjaSilownikaMan">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pozycja siłownika w trybie manualnym</xhtml>
              </documentation>
            </variable>
            <variable name="rPozycjaSilownikaManZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xPozycjaSilownikaManZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rPozycjaSilownikaManZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="fbUtrzymaniaPolozeniaAutonomizacja">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xRestartTimeraUtrzymaniaPolozeniaAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xWykonanoZapisPolozeniaSilownika">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="tCzasWyslaniaKomunikatuZapisuPozycjiSilownika">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wFlagaSerwisowaOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wFlagaSerwisowaZadanie">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="intFlagaSerwisowa">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intFlagaSerwisowaZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xFlagaSerwisowaZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rFlagaSerwisowaZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.	</xhtml>
              </documentation>
            </variable>
            <variable name="xZmianaFlagiSerwisowejNaBrakDzialan">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZmianaFlagiSerwisowejNaTrybLetni">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZmianaFlagiSerwisowejNaZamkniecieZaworu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZmianaFlagiSerwisowejNaOtwarcieZaworu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZmianaFlagiSerwisowejNaPozycjaGorna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZmianaFlagiSerwisowejNaKalibracjeSilownika">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbTimerZmianyFlagiSerwisowej">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="5" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="5" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rNastawaPolozeniaSilownika">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xAlarmOtwarciaOkna">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm detekcji gwałtownego spadku temperatury siłownika (otwarcia okna nad grzejnikiem)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPomieszczeniaHistoryczna">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość temperatury zapisywana co intCzasSpadkuTemperatury w celu obliczenia różnicy</xhtml>
              </documentation>
            </variable>
            <variable name="fbDetekcjaOtwarciaOknaTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer detekcji otwarcia okna</xhtml>
              </documentation>
            </variable>
            <variable name="xDefrost">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Defrost</xhtml>
              </documentation>
            </variable>
            <variable name="fbDefrostTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="rtrigDefrostTimer">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="fbDefrostOdwolanie">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="fnUczenieTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer uczenia</xhtml>
              </documentation>
            </variable>
            <variable name="fnWlaczenieUczenia">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie uczenie na panelu HMI</xhtml>
              </documentation>
            </variable>
            <variable name="fnWylaczenieUczenia">
              <type>
                <derived name="F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wyłączenie uczenia na panelu HMI</xhtml>
              </documentation>
            </variable>
            <variable name="fnUczenieZakonczone">
              <type>
                <derived name="F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Uczenie zostało zakończone </xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiEnOcean">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Brak komunikacji z urządzeniem po enOcean</xhtml>
              </documentation>
            </variable>
            <variable name="xAwariaUrzadzenia">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alarm ogólny</xhtml>
              </documentation>
            </variable>
            <variable name="rTempWartoscAtrybutu">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intTempWartoscAtrybutu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xDetekcjaOtwarciaOkna">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-08-23-PK; Artur Wyszomirski; Jan Bartczak
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			
						2018-08-27-PK: dodanie algorytmu nadpisywania konfiguracji (uczenia) anteny
						2018-09-04-PK: dodanie rozkazu C, dodanie zapytań Q, dodanie raportowania M, dodanie alarmowania
						2018-09-10-PK: zmiana alarmowania braku komunikacji z Modbus RTU na alarmowanie timeout komunikacji EnOcean
						2018-09-12-PK: zaremowanie kodu uczącego bramkę, dodanie możliwości uczenia (LearnMode) ze zmiennej BOOL, sprawdzanie poprawności zainstalowania urządzenia (po EnOceanID)
						2018-09-25-AW: obsługa trybów manualnego i automatycznego
						2018-10-01-JB: dodanie ręcznej zmiany flagi serwisowej siłownika, zmiana sposobu zapisywania wartości wysterowania siłownika 
						2018-10-03-JB: poprawienie odczytywania kodów błędów
						2018-23-10-JB: przygotowanie atrybutów i alarmów do komunikacji z IZE
						2018-11-16-AW: inicjalizacja uczenia siłowników z programy
						2018-12-11-JB: zmiana sposobu działania alarmu z błędem baterii. Do momentu pierwszego odczytu wartości za pomocą ModbusRTU generowała się błędna informacja o błędzie baterii. 			
						2018-12-11-JB: skasowanie obsługi detekcji okna, ponieważ ten siłownik tego nie zawiera. 	
						2018-12-12-JB: napisanie od nowa obsługi ramek typu C i Q
						2019-01-04-AWy: detekcja otwarcia okna
						2019-01-28-JC: defrost
						2019-02-14-AWy: wysyłanie alarmu czujnika temperatury
						2019-02-27-JB: zmiana deadbandów w filtrach analogowych
						2019-03-20-AWy: uczenie siłownika z poziomu panelu HMI
						2019-03-21-AWy: usuwanie siłownika z poziomu panelu HMI
						2019-05-16-AWy: modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji 
						2019-05-20-AWy: - zmiana zachowania Defrostu. Po wykryciu spadku temperatury poniżej 8 stopni następuje przełączenie w tryb ręczny i odpalanie siłownika na 100%. 
										- alarm odwołany i powrót do normalnej pracy po osiągnięciu temperatury powyżej 10 stopni.
						2019-06-06-AWy: załadowanie domyślnych trybów pracy i nastaw po przejściu w tryb autonomizacji.
						2019-08-14-AWy: zmiana algorytmu defrostu ze względu na zmianę sposobu wybierania trybów pracy. Zmiana fbPrzywrocDomyslne z przerzutnika RS na R_TRIG.
						2019-09-17-AWy: usunięcie buga z defrostu.
						2019-09-23-AWy: modyfikacja generowania wartości zmiennej xBrakKomunikacjiPLC.
						2019-10-09-AWy: uzależnienie wystąpienia alarmu braku zmiany temperatury od stanu komunikacji.
						2019-10-18-AWy: dodanie atrybutu POZ.
						2019-10-22-AWy: - usunięcie uintLiczbaTelegramowModbusAdres z odczytu po Modbusie;
										- wydłużenie czasu fbTaktowanieZapisywaniaModbus oraz wprowadzenie trigera zapisu po Modbusie;
										- dodanie warunku poprawnej komunikacji przy generowaniu defrostu.
						2019-10-24-AWy: zmiana deadbandu fbPozycjaSilownika
												
Opis:					fb służy do komunikacji po Modbus RTU za pośrednictwem bramek (STC65-RS485) EnOcean z siłownikami HRU0 (SAB+) na budynkach PPP Sopot (ENGIE) 
*)

// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := NOT xPoInicjalizacji , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	rTemperaturaPomieszczeniaZaraportowana := rTemperaturaPomieszczenia;
	rPozycjaSilownikaZaraportowana := rPozycjaSilownika;
	rPozycjaSilownikaAutoZaraportowana := rPozycjaSilownikaAuto;
	rPozycjaSilownikaManZaraportowana := rPozycjaSilownikaMan;
	intFlagaSerwisowaZaraportowana := intFlagaSerwisowa;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
tonBrakKomunikacjiPLC(IN := (wCzasOdOstatniegoKomunikatu &gt; 180 OR arModbusStatusKomunikacji[bAdres] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa), PT := T#180S);
IF tonBrakKomunikacjiPLC.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

// Deklaracja rejestrów Modbusa
IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	
	//wyznaczenie adresów rejestrów modbusowych
	uintORGModbusAdres := uintPierwszyRejestr + (uintLiczbaRejestrowNaKanal * (BYTE_TO_UINT(bKanalEnOcean) - 1));
	uintFunctionModbusAdres := uintORGModbusAdres + 1;
	uintTypeModbusAdres := uintORGModbusAdres + 2;
	uintManufacturerModbusAdres := uintORGModbusAdres + 3;
	uintEnOceanIDHiModbusAdres := uintORGModbusAdres + 4;
	uintEnOceanIDLoModbusAdres := uintORGModbusAdres + 5;
	uintCzasOdOstatniegoKomunikatuModbusAdres := uintORGModbusAdres + 6;
	uintZadanaPozycjaSilownikaModbusAdres := uintORGModbusAdres + 7;
	uintFlagaSerwisowaModbusAdres := uintORGModbusAdres + 8;
	uintStatusUrzadzeniaModbusAdres := uintORGModbusAdres + 9;
	uintTemperaturaPomieszczeniaOdczytanaModbusAdres := uintORGModbusAdres + 10;
	//uintLiczbaTelegramowModbusAdres := uintORGModbusAdres + 19;
	
	uintLearnModbusAdres := 31 + BYTE_TO_UINT(bKanalEnOcean);
	
//deklaracja rejestrow do odczytu
	//coil
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintLearnModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#1S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wLearnEnOceanOdczytany);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	//rejestry
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintFunctionModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wFunctionEnOceanOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintTypeModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTypeEnOceanOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintManufacturerModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wManufacturerEnOceanOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanIDHiModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanIDHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanIDLoModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanIDLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintCzasOdOstatniegoKomunikatuModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasOdOstatniegoKomunikatu);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintZadanaPozycjaSilownikaModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPozycjaSilownikaOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintFlagaSerwisowaModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wFlagaSerwisowaOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintStatusUrzadzeniaModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStatusUrzadzenia);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintTemperaturaPomieszczeniaOdczytanaModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPomieszczeniaOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
(*	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintLiczbaTelegramowModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wLiczbaTelegramow);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
*)			
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintUczenieSilownikaAdres + BYTE_TO_UINT(bKanalEnOcean);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xUczenieWlaczone);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
END_IF

//obsluga komunikatu przychodzacego z IZE

IF 	sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
		//blokada
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
			
			IF intBlokadaWykonywaniaRozkazow = 0 THEN
				// Tryby pracy 
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYB=',
					rAtrybutWartosc := rTrybPracyZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyZapisz);		
				// Pozycja siłownika w trybie manualnym
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'POZMAN=',
					rAtrybutWartosc := rPozycjaSilownikaManZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xPozycjaSilownikaManZapisz);
				// Flaga serwisowa
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'SERWIS=',
					rAtrybutWartosc := rFlagaSerwisowaZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xFlagaSerwisowaZapisz);	
			END_IF	
		END_IF		

		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TRYB=' , sWartosc := INT_TO_STRING(intTrybPracy));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMP=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMP=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczenia));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'POZ=' , sWartosc := REAL_TO_STRING(rPozycjaSilownika));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POZAUTO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'POZAUTO=' , sWartosc := REAL_TO_STRING(rPozycjaSilownikaAuto));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'POZMAN=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'POZMAN=' , sWartosc := REAL_TO_STRING(rPozycjaSilownikaMan / 100));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'SERWIS=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'SERWIS=' , sWartosc := INT_TO_STRING(intFlagaSerwisowa));	
			END_IF
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 5 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Przywrócenie wartości domyślnych nastaw krzywej grzewczej i trybów pracy w przypadku restartu sterownika lub przejścia w stan autonomizacji (brak komunikacji z IZE)
rtrigPrzywrocDomyslne(CLK := xAutonomizacja);
IF rtrigPrzywrocDomyslne.Q THEN	
	IF intTrybPracy &lt;&gt; REAL_TO_INT(rTrybPracyAutonomizacja) THEN
		rTrybPracyZapis := rTrybPracyAutonomizacja;
		xTrybPracyZapisz := TRUE;
	END_IF
	IF rPozycjaSilownikaMan &lt;&gt; rPozycjaSilownikaManAutonomizacja THEN
		rPozycjaSilownikaManZapis := rPozycjaSilownikaManAutonomizacja / 100;
		xPozycjaSilownikaManZapisz := TRUE;
	END_IF
	IF intFlagaSerwisowa &lt;&gt; REAL_TO_INT(rFlagaSerwisowaAutonomizacja) THEN
		rFlagaSerwisowaZapis :=  rFlagaSerwisowaAutonomizacja;
		xFlagaSerwisowaZapisz := TRUE;
	END_IF
END_IF	

// Zapisanie nastaw domyślnych lub otrzymanych w ramce C
IF xTrybPracyZapisz THEN
	intTrybPracy := REAL_TO_INT(rTrybPracyZapis);
	intTrybPracyHMI := REAL_TO_INT(rTrybPracyZapis);
	xTrybPracyZapisz := FALSE;
END_IF	
IF xPozycjaSilownikaManZapisz THEN
	rPozycjaSilownikaMan := rPozycjaSilownikaManZapis * 100;
	xPozycjaSilownikaManZapisz := FALSE;
END_IF	

// Trigger zapisu po Modbusie
rtrigZapisModbus (CLK := xFlagaSerwisowaZapisz);

// Taktowanie zapisywania po Modbusie
fbTaktowanieZapisywaniaModbus(IN := NOT fbTaktowanieZapisywaniaModbus.Q, PT := T#180S);
				
// Zapisywanie trybu pracy do pamięci urządzenia
IF xFlagaSerwisowaZapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintFlagaSerwisowaModbusAdres,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rFlagaSerwisowaZapis),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF intFlagaSerwisowa = REAL_TO_INT(rFlagaSerwisowaZapis) THEN					
		xFlagaSerwisowaZapisz := FALSE;
	END_IF
END_IF

//Auto konfiguracja anteny - sprawdzenie czy EnOcean ID wpisany w EiG jest zgodny z tym odczytanym z kanalu bramki
sEnOceanIDodczytany := CONCAT(CONCAT(fnKonwersjaDEC_BYTE_TO_HEX_STRING(INT_TO_BYTE(WORD_TO_INT(wEnOceanIDHi / 256))), fnKonwersjaDEC_BYTE_TO_HEX_STRING(WORD_TO_BYTE(wEnOceanIDHi))), CONCAT(fnKonwersjaDEC_BYTE_TO_HEX_STRING(INT_TO_BYTE(WORD_TO_INT(wEnOceanIDLo / 256))), fnKonwersjaDEC_BYTE_TO_HEX_STRING(WORD_TO_BYTE(wEnOceanIDLo))));
IF sEnOceanIDodczytany = sEnOceanID THEN
	xPoprawneParowanie := TRUE;
ELSE
	xPoprawneParowanie := FALSE;
END_IF

//sprawdzanie Timeout komunikacji
fbTimeoutEnOcean(IN := ((wCzasOdOstatniegoKomunikatu &gt; 180 OR wCzasOdOstatniegoKomunikatu = 0) AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasTimeoutEnOcean);

// dokonywanie obliczeń
fbTemperaturaPomieszczenia(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPomieszczeniaOdczytana),
							rWartoscWejsciowaZaraportowana := rTemperaturaPomieszczeniaZaraportowana,
							rDeadband := 0.1,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 0.1,
							rWynikOffset := 273.15,
							rWartoscWyjsciowa =&gt; rTemperaturaPomieszczenia);
							
fbPozycjaSilownika(			rWartoscWejsciowa := WORD_TO_REAL(wPozycjaSilownikaOdczytana),
							rWartoscWejsciowaZaraportowana := rPozycjaSilownikaZaraportowana,
							rDeadband := 0.1,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := 0.01,
							rWynikOffset := 0.0,
							rWartoscWyjsciowa =&gt; rPozycjaSilownika);
							
CASE WORD_TO_INT(wFlagaSerwisowaOdczytana) OF
	0 : intFlagaSerwisowa := enumPPPSSilownikSABpServiceFlag.BrakDzialan;
	9 : intFlagaSerwisowa := enumPPPSSilownikSABpServiceFlag.TrybLetni;
	17 : intFlagaSerwisowa := enumPPPSSilownikSABpServiceFlag.ZamkniecieZaworu;
	33 : intFlagaSerwisowa := enumPPPSSilownikSABpServiceFlag.OtwarcieZaworu;
	65 : intFlagaSerwisowa := enumPPPSSilownikSABpServiceFlag.PozycjaGorna;
	129 : intFlagaSerwisowa := enumPPPSSilownikSABpServiceFlag.KalibracjaSilownika;
END_CASE
	
fbDecToBin(	wWordWejsciowy := wStatusUrzadzenia, 
			intIloscBitow := 8);
												
xAlarmOgolny := BYTE_TO_BOOL(fbDecToBin.arBity[0]);

// Defrost silownika. 
// Po spadku temperatury siłownika poniżej 8 stopni siłownik jest ustawiany w pozycję pełnego otwarcia (w trybie manualnym). Po wzroście temperatury powyżej 10 stopni siłownik powraca do trybu automatycznego.
fbDefrostTimer(IN := (rTemperaturaPomieszczenia &lt; 281.15) AND (arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa), PT := T#5M);	// Temperatura poniżej 8 stopni C przez okres 5 minut
rtrigDefrostTimer(CLK := fbDefrostTimer.Q);
IF rtrigDefrostTimer.Q THEN
	intTrybPracyPamiec := intTrybPracy;	
END_IF

IF fbDefrostTimer.Q THEN	// Ustaw tryb pracy na manualny i otwórz zawór na 100%. Uruchom alarm
	rTrybPracyZapis := enumPPPSSilownikTrybPracy.Manualny;
	xTrybPracyZapisz := TRUE;
	rPozycjaSilownikaManZapis := 1;
	xPozycjaSilownikaManZapisz := TRUE;
	rZadanePolozenieSilownikaHMI := 100;
	xDefrost := TRUE;	
END_IF

fbDefrostOdwolanie(IN := ((rTemperaturaPomieszczenia &gt; 283.15) AND xDefrost), PT := T#5M);	// Temperatura powyżej 10 stopni i uruchomiony Defrost przez okres 5 minut
IF fbDefrostOdwolanie.Q THEN	// Ustawa tryb pracy na automatyczny i odwołaj alarm
	rTrybPracyZapis := intTrybPracyPamiec;
	xTrybPracyZapisz := TRUE;
	xDefrost := FALSE;
END_IF
//
											
// Tryby pracy 
IF xAutonomizacja THEN	
	IF intTrybPracyHMI = enumPPPSSilownikTrybPracy.Manualny THEN								// tryb ręczny na HMI
		intTrybPracy := enumPPPSSilownikTrybPracy.Manualny;	
		rNastawaPolozeniaSilownika := rZadanePolozenieSilownikaHMI;
		rPozycjaSilownikaMan := rNastawaPolozeniaSilownika;
	ELSE																						// tryb automatyczny HMI
		intTrybPracy := enumPPPSSilownikTrybPracy.Automatyczny;	
		rNastawaPolozeniaSilownika := rZadanePolozenieSilownika;
		rZadanePolozenieSilownikaHMI := rZadanePolozenieSilownika;	
		rPozycjaSilownikaAuto := rPozycjaSilownika;											
	END_IF
ELSE
	rZadanePolozenieSilownikaHMI := rNastawaPolozeniaSilownika;
	IF intTrybPracy = enumPPPSSilownikTrybPracy.Manualny THEN
		rNastawaPolozeniaSilownika := rPozycjaSilownikaMan;
		intTrybPracyHMI := enumPPPSZadajnikTrybPracy.Manualny;
	ELSE
		rNastawaPolozeniaSilownika := rZadanePolozenieSilownika;
		intTrybPracyHMI := enumPPPSZadajnikTrybPracy.Automatyczny;
		rPozycjaSilownikaAuto := rPozycjaSilownika;		
	END_IF
END_IF
		
//utrzymanie położenia
fbUtrzymaniaPolozeniaAutonomizacja(IN := xRestartTimeraUtrzymaniaPolozeniaAutonomizacja = TRUE, PT := tCzasWyslaniaKomunikatuZapisuPozycjiSilownika);

IF (INT_TO_WORD(REAL_TO_INT(rNastawaPolozeniaSilownika)) &lt;&gt; wPozycjaSilownikaOdczytana) THEN
		xRestartTimeraUtrzymaniaPolozeniaAutonomizacja := TRUE;
		IF xWykonanoZapisPolozeniaSilownika = FALSE THEN
			tCzasWyslaniaKomunikatuZapisuPozycjiSilownika := T#5s;	
		END_IF	
ELSE
	xRestartTimeraUtrzymaniaPolozeniaAutonomizacja := FALSE;	
	xWykonanoZapisPolozeniaSilownika := FALSE;
END_IF

IF fbUtrzymaniaPolozeniaAutonomizacja.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintZadanaPozycjaSilownikaModbusAdres,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := (INT_TO_WORD(REAL_TO_INT(rNastawaPolozeniaSilownika))),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	xRestartTimeraUtrzymaniaPolozeniaAutonomizacja := FALSE;
	tCzasWyslaniaKomunikatuZapisuPozycjiSilownika := T#45s;
	xWykonanoZapisPolozeniaSilownika := TRUE;
END_IF

// Uczenie siłownika do bramki
fnWlaczenieUczenia(CLK := xUczenieWlaczHMI);
fnWylaczenieUczenia(CLK := xUczenieWlaczHMI);
fnUczenieZakonczone(CLK := xUczenieWlaczone);

IF fnUczenieZakonczone.Q OR fnUczenieTimer.Q THEN																		// Jeśli FALSE na coilu uczenia opuść toggla na HMI
	xUczenieWlaczHMI := FALSE;		
END_IF

IF fnWlaczenieUczenia.Q THEN						
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,																	// Wystawienie TRUE na coilu uczenia (patrz dok. STC65 rozdział 2.5.2)
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisBitu),
							uiAdresRejestru := 31 + BYTE_TO_UINT(bKanalEnOcean),
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := (BOOL_TO_WORD(TRUE)),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);	
END_IF

fnUczenieTimer(IN := xUczenieWlaczone, PT := T#1M);																		// Czas na uczenie - 1 minuta 

IF fnWylaczenieUczenia.Q THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,																	// Wystawienie FALSE na coilu uczenia (patrz dok. STC65 rozdział 2.5.2)
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisBitu),
							uiAdresRejestru := 31 + BYTE_TO_UINT(bKanalEnOcean),
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := (BOOL_TO_WORD(FALSE)),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);			
END_IF	
//

// Usuwanie siłownika z bramki
IF xUsuwanieHMI THEN	// Usuwanie EnOceanID z bramki
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,																	
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisNRejestrow),
							uiAdresRejestru := uintEnOceanIDHiModbusAdres,
							pZmiennaReferencyjna := ADR(wEnOceanIDHi),
							wWartoscDoZapisania := 0,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);	
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,																	
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisNRejestrow),
							uiAdresRejestru := uintEnOceanIDLoModbusAdres,
							pZmiennaReferencyjna := ADR(wEnOceanIDLo),
							wWartoscDoZapisania := 0,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);	
	xUsuwanieHMI := FALSE;					
END_IF
//
(*
// Zmiana koloru - po kliknięciu w symbol siłownika na HMI togglowana jest zmienna xZmienKolorHMI. xResetKoloruHMI resetuje kolor na symbolu, który był kliknięty wcześniej
IF xResetKoloruHMI THEN
	xKolorHMI := FALSE;
	xZmienKolorHMI := FALSE;
END_IF

IF xZmienKolorHMI THEN
	xKolorHMI := TRUE;
END_IF
//
*)
// Detekcja otwarcia okna (jeśli temperatura spadnie w czasie intCzasSpadkuTemperatury o rDeltaSpadkuTemperatury wystaw alarm. Zdejmij alarm, jeśli temp. wzrośnie o rDeltaWzrostuTemperatury
fbDetekcjaOtwarciaOknaTimer(IN := NOT(fbDetekcjaOtwarciaOknaTimer.Q), PT := tCzasSpadkuTemperatury);
IF fbDetekcjaOtwarciaOknaTimer.Q THEN
	rTemperaturaPomieszczeniaHistoryczna := rTemperaturaPomieszczenia;
END_IF
IF (rTemperaturaPomieszczeniaHistoryczna - rTemperaturaPomieszczenia) &gt; rDeltaSpadkuTemperatury THEN
	xAlarmOtwarciaOkna := TRUE;
END_IF
IF (rTemperaturaPomieszczenia - rTemperaturaPomieszczeniaHistoryczna) &gt; rDeltaWzrostuTemperatury THEN
	xAlarmOtwarciaOkna := FALSE;
END_IF
//
// Sprawdzanie czy pomiar temperatury działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rTemperaturaPomieszczeniaPamiec = rTemperaturaPomieszczenia THEN
	xBrakZmianyTemperatury := TRUE;
ELSE
	xBrakZmianyTemperatury := FALSE;	
END_IF
fbBrakZmianyTemperaturyTimer(IN := xBrakZmianyTemperatury, PT := T#12H);
rTemperaturaPomieszczeniaPamiec := rTemperaturaPomieszczenia;
IF fbBrakZmianyTemperaturyTimer.Q AND NOT xBrakKomunikacjiPLC THEN
	xBladBrakZmianyTemperatury := TRUE;
ELSE
	xBladBrakZmianyTemperatury := FALSE;
END_IF
//
///////Diagnostyka na czas uruchomień////////
	rDiagnostykaTemperaturaPomieszczenia := rTemperaturaPomieszczenia;
	rDiagnostykaPozycjaSilownika := rPozycjaSilownika;
	intDiagnostykaFlagaSerwisowa := intFlagaSerwisowa;
	intDiagnostykaTrybPracy := intTrybPracy;
	sDiagnostykaEnOceanIDodczytany := sEnOceanIDodczytany;
	xDiagnostykaPoprawneParowanie := xPoprawneParowanie;
	wDiagnostykaCzasOdOstatniegoKomunikatu := wCzasOdOstatniegoKomunikatu;
//////////////////////////////////////////////				
							
					
//raportowanie		
IF (intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR intTrybPracy &lt;&gt; intTrybPracyZaraportowana OR rTemperaturaPomieszczenia &lt;&gt; rTemperaturaPomieszczeniaZaraportowana OR 
	rPozycjaSilownika &lt;&gt; rPozycjaSilownikaZaraportowana OR intFlagaSerwisowa &lt;&gt; intFlagaSerwisowaZaraportowana OR rPozycjaSilownikaMan &lt;&gt; rPozycjaSilownikaManZaraportowana OR 
	rPozycjaSilownikaAuto &lt;&gt; rPozycjaSilownikaAutoZaraportowana) AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow));	
	END_IF
	IF intTrybPracy &lt;&gt; intTrybPracyZaraportowana THEN
		intTrybPracyZaraportowana := intTrybPracy;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TRYB=' , sWartosc := INT_TO_STRING(intTrybPracy));	
	END_IF
	IF rTemperaturaPomieszczenia &lt;&gt; rTemperaturaPomieszczeniaZaraportowana THEN
		rTemperaturaPomieszczeniaZaraportowana := rTemperaturaPomieszczenia;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMP=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczenia));	
	END_IF
	IF rPozycjaSilownika &lt;&gt; rPozycjaSilownikaZaraportowana THEN
		rPozycjaSilownikaZaraportowana := rPozycjaSilownika;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'POZ=' , sWartosc := REAL_TO_STRING(rPozycjaSilownika));	
	END_IF
	IF rPozycjaSilownikaMan &lt;&gt; rPozycjaSilownikaManZaraportowana THEN
		rPozycjaSilownikaManZaraportowana := rPozycjaSilownikaMan;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'POZMAN=' , sWartosc := REAL_TO_STRING(rPozycjaSilownikaMan / 100));	
	END_IF
	IF rPozycjaSilownikaAuto &lt;&gt; rPozycjaSilownikaAutoZaraportowana THEN
		rPozycjaSilownikaAutoZaraportowana := rPozycjaSilownikaAuto;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'POZAUTO=' , sWartosc := REAL_TO_STRING(rPozycjaSilownikaAuto));	
	END_IF
	IF intFlagaSerwisowa &lt;&gt; intFlagaSerwisowaZaraportowana THEN
		intFlagaSerwisowaZaraportowana := intFlagaSerwisowa;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'SERWIS=' , sWartosc := INT_TO_STRING(intFlagaSerwisowa));	
	END_IF

	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// obsługa alarmów do siłownika
	//brak komunikacji po EnOcean
IF arErrorStan[enumPPPSSilownikSABpError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbTimeoutEnOcean.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	xBrakKomunikacjiEnOcean := TRUE;
	arErrorKlasa[enumPPPSSilownikSABpError.BrakKomunikacji] := enumPPPSSilownikSABpErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSSilownikSABpErrorKlasa.BrakKomunikacji , intNumer := enumPPPSSilownikSABpError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSSilownikSABpError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbTimeoutEnOcean.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	xBrakKomunikacjiEnOcean := FALSE;
	arErrorKlasa[enumPPPSSilownikSABpError.BrakKomunikacji] := enumPPPSSilownikSABpErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSSilownikSABpErrorKlasa.BrakKomunikacji , intNumer := enumPPPSSilownikSABpError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	//Alarm ogólny
IF arErrorStan[enumPPPSSilownikSABpError.AlarmOgolny] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xAlarmOgolny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.AlarmOgolny] := enumAlarmWartosc.StanAlarmowy;
	xAwariaUrzadzenia := TRUE;
	arErrorKlasa[enumPPPSSilownikSABpError.AlarmOgolny] := enumPPPSSilownikSABpErrorKlasa.AlarmOgolny;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSSilownikSABpErrorKlasa.AlarmOgolny , intNumer := enumPPPSSilownikSABpError.AlarmOgolny),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSSilownikSABpError.AlarmOgolny] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xAlarmOgolny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.AlarmOgolny] := enumAlarmWartosc.StanNormalny;
	xAwariaUrzadzenia := FALSE;
	arErrorKlasa[enumPPPSSilownikSABpError.AlarmOgolny] := enumPPPSSilownikSABpErrorKlasa.AlarmOgolny;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSSilownikSABpErrorKlasa.AlarmOgolny , intNumer := enumPPPSSilownikSABpError.AlarmOgolny),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	// Detekcja otwarcia okna
IF arErrorStan[enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xDetekcjaOtwarciaOkna AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna] := enumPPPSSilownikSABpErrorKlasa.DetekcjaOtwarciaOkna;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSSilownikSABpErrorKlasa.DetekcjaOtwarciaOkna , intNumer := enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xDetekcjaOtwarciaOkna AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna] := enumPPPSSilownikSABpErrorKlasa.DetekcjaOtwarciaOkna;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSSilownikSABpErrorKlasa.DetekcjaOtwarciaOkna , intNumer := enumPPPSSilownikSABpError.DetekcjaOtwarciaOkna),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Defrost
IF arErrorStan[enumPPPSSilownikSABpError.Defrost] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xDefrost AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.Defrost] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSSilownikSABpError.Defrost] := enumPPPSSilownikSABpErrorKlasa.Defrost;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSSilownikSABpErrorKlasa.Defrost , intNumer := enumPPPSSilownikSABpError.Defrost),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSSilownikSABpError.Defrost] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xDefrost AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.Defrost] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSSilownikSABpError.Defrost] := enumPPPSSilownikSABpErrorKlasa.Defrost;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSSilownikSABpErrorKlasa.Defrost , intNumer := enumPPPSSilownikSABpError.Defrost),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika temperatury
IF arErrorStan[enumPPPSSilownikSABpError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.AlarmCzujnika] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSSilownikSABpError.AlarmCzujnika] := enumPPPSSilownikSABpErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSSilownikSABpErrorKlasa.AlarmCzujnika , intNumer := enumPPPSSilownikSABpError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSSilownikSABpError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSSilownikSABpError.AlarmCzujnika] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSSilownikSABpError.AlarmCzujnika] := enumPPPSSilownikSABpErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSSilownikSABpErrorKlasa.AlarmCzujnika , intNumer := enumPPPSSilownikSABpError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSSterownikLAC0" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="sIdSterownika">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">systemowe - HeartBeat itp.</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaWyslaniaIamAlive">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tCzasWysylaniaHeartbeatu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> co ile sekund ma być wysyłany heartbeat</xhtml>
              </documentation>
            </variable>
            <variable name="xEmergencyStopWejscie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZezwolenieHeartbeat">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> flaga zezwolenia na wysyłanie heartbeatu</xhtml>
              </documentation>
            </variable>
            <variable name="tUdpWejscieCzasHeartbeatTimeout">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="intAutonomizacja_PLC">
              <type>
                <array>
                  <dimension lower="1" upper="7" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">sterowniki</xhtml>
              </documentation>
            </variable>
            <variable name="dtAktualnaDataCzas">
              <type>
                <DT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zapis ramek do pliku</xhtml>
              </documentation>
            </variable>
            <variable name="sFrameLogPath">
              <type>
                <string />
              </type>
            </variable>
            <variable name="tCzasArchiwacjiRamek">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTransmitterLicznikKomunikatowWyslanych">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intReceiverLicznikKomunikatowOtrzymanych">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikWysylkiUDP">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikOdczytu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="xAutonomizacjaWyjscie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaWyjscieNVL">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="intEmergencyStopActive">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intEmergencyStopActiveZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intAutonomizacjaZewnetrzna">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intAutonomizacjaWewnetrzna">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="fbCzasOpoznieniaWyslaniaIamAlive">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xOpoznienieWyslaniaIamAlive">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienne systemowe</xhtml>
              </documentation>
            </variable>
            <variable name="fbCzasHeartbeat">
              <type>
                <derived name="fbTimer" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Czasowka do odliczania częstotliwości wysyłania HEARTBEAT</xhtml>
              </documentation>
            </variable>
            <variable name="sHeartbeatDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="fbCzasWejscieHeartbeatTimeout">
              <type>
                <derived name="fbTimer" />
              </type>
            </variable>
            <variable name="xWejscieHeartbeatOtrzymano">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intLokalnyLicznikKomunikatowWyslanych">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xPoprawnaWalidacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZgodnoscIDwHeartBeat">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="File">
              <type>
                <derived name="WagoSysFileDir.FbSysFile" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Zmienne obsługujące zapis i kasowanie plików logowania ramek</xhtml>
              </documentation>
            </variable>
            <variable name="Dir">
              <type>
                <derived name="FbSysDir" />
              </type>
            </variable>
            <variable name="Entry">
              <type>
                <derived name="typFileProperties" />
              </type>
            </variable>
            <variable name="sPlikName">
              <type>
                <string />
              </type>
            </variable>
            <variable name="Triger_Zapisu_1">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="Triger_Zapisu_2">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="xZapiszPlik_1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xZapiszPlik_2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy_A1">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy_A2">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy_B1">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy_1">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy_A">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy_B">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sCzasZapisuTablicy">
              <type>
                <string />
              </type>
            </variable>
            <variable name="iKomunikatIndex">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="iKoniecZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ProceduraKasowaniaTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="sPlikNameRemove">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xFlagaKasowaniaPlikow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sFullIdNadawcy">
              <type>
                <string length="255" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-03-12-PK - stworzenie
						2018-05-14-PK - przeniesienie z fbUDPComm wszystkich rzeczy związanych z LAC0, dodanie walidacji IdInstacji z IdSterownika
						2018-05-17-PK - dodanie przyjmowania HeartBeat'u bez względu na FullIdentifier, dodanie alarmowania takiego stanu
						2018-09-25-PK - dodanie sprawdzania nadawcy komunikatu Heartbeat (odczytaj tylko od przypisanej do mnie aplikacji IZE)
						2019-04-01-JC - dodanie zrzutu tablicy komunikatów do pliku + kasowanie plków raz na 24h o ile pliki sa przedawnione
						
						
Opis:					fb służy do obsługi stanów sterownika (RESTART, HeartBeat, EMST) LAC0 na budynku BCB B2


//NA PÓŹNIEJ: dorobić obsługę momentów przytkania UDP - to wydanie nie będzie poprawnie zliczało i kasowało licznik podczas przytkania
*)

//walidacja ID sterownika/instacji - jeżeli nie zgadzają się Identyfikatory to nie nadawaj nic  oprócz alarmu błędu walidacji
IF sIdSterownika &lt;&gt; sIdInstancji THEN
	xPoprawnaWalidacja := FALSE;
ELSE
	xPoprawnaWalidacja := TRUE;
END_IF

//inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := NOT xPoInicjalizacji , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q AND xPoprawnaWalidacja THEN
	xPoInicjalizacji := TRUE;
END_IF

fbCzasOpoznieniaWyslaniaIamAlive(	IN := NOT xOpoznienieWyslaniaIamAlive,
									PT := tCzasOpoznieniaWyslaniaIamAlive);
									
//jeżeli sterownik uruchomił się ponownie wyślij komunikat z atrybutem RESTART=1 w celu poinformowania IZE o restarcie sterownika
IF fbCzasOpoznieniaWyslaniaIamAlive.Q THEN
	xOpoznienieWyslaniaIamAlive := TRUE;
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'M' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIDSterownika ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := 'RESTART=1' ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikat);
END_IF

// sprawdzenie heartbeatu i ilosci wyslanych komunikatow - wystawienie odpowiednich alarmów

fbCzasWejscieHeartbeatTimeout(	intTyp := 1 ,
								xWejscie := NOT xWejscieHeartbeatOtrzymano , 
								tCzas := tUdpWejscieCzasHeartbeatTimeout);
								
xWejscieHeartbeatOtrzymano := FALSE;

// obsługa niezgodnej ilości komunikatów w heartbeacie, do sprawdzenia warunki
(*
	IF STRING_TO_INT(fnKomunikatDaneSzukajWartosci(sReceiverTelegram , 'ILE=')) = intReceiverLicznikKomunikatowOtrzymanych AND 
		arErrorStan[enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE] THEN
		arErrorStan[enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE] := FALSE;
		sDane := CONCAT('ACT=0;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.NiezgodnaIloscKomunikatowOdebranychZIZE));
		sDane := CONCAT(sDane , ';NUM=');
		sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE));	
		sDane := CONCAT(sDane , ';E');
		sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE , intIloscZnakow := 3));
		sDane := CONCAT(sDane , 'ACT=0');
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik :=  sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdSterownika ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := arErrorKomunikat[enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE]);
	END_IF
	IF  STRING_TO_INT(fnKomunikatDaneSzukajWartosci(sReceiverTelegram , 'ILE=')) &lt;&gt; intReceiverLicznikKomunikatowOtrzymanych AND 
		NOT arErrorStan[enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE] AND intReceiverLicznikKomunikatowOtrzymanych &gt; 0 THEN
		arErrorStan[enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE] := TRUE;
		sDane := CONCAT('ACT=1;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.NiezgodnaIloscKomunikatowOdebranychZIZE));
		sDane := CONCAT(sDane , ';NUM=');
		sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE));	
		sDane := CONCAT(sDane , ';E');
		sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE , intIloscZnakow := 3));
		sDane := CONCAT(sDane , 'ACT=1');
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik :=  sMnemonik,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdSterownika ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := arErrorKomunikat[enumSystemError.NiezgodnaIloscKomunikatowOdebranychZIZE]);
	END_IF*)

//obsluga komunikatu przychodzacego z IZE

IF 	sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	sDane := '';
	//komunikat typu H
	IF fnKomunikatTyp(sKomunikat) = 'H' THEN
		//jeżeli Heartbeat nadaje (nie ważne kto jest odbiorcą) przypisana do mnie (w zmiennej globalnej PLC) aplikacja IZE
		IF fnIDNadawcyMatch(sKomunikat , sIdAplikacji) THEN
			//sprawdzanie statusu EMST systemu IZE
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'EMST=') = '0' THEN
				IF intEmergencyStopActive = 1 THEN
					intEmergencyStopActive := 0;
				ELSE
					IF sDane &lt;&gt; '' THEN
						sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'EMST=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'EMST=') = '1' THEN
				IF intEmergencyStopActive = 0 THEN
					intEmergencyStopActive := 1;
				ELSE
					IF sDane &lt;&gt; '' THEN
						sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'EMST=1');
				END_IF
			END_IF
			intReceiverLicznikKomunikatowOtrzymanych := 0;//NA PÓŹNIEJ: dorobić obsługę momentów przytkania UDP - to wydanie nie będzie poprawnie kasować licznika podczas przytkania
			xWejscieHeartbeatOtrzymano := TRUE;
			xZgodnoscIDwHeartBeat := (fnIDNadawcyMatch(sKomunikat , sIdSterownika) AND fnIDOdbiorcyMatch(sKomunikat , sIdAplikacji)) OR (fnIDNadawcyMatch(sKomunikat , sIdAplikacji) AND fnIDOdbiorcyMatch(sKomunikat , sIdSterownika));
		END_IF
	END_IF
	IF fnIDOdbiorcyMatch(sKomunikat , sIdSterownika) THEN		
		//rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'EMST=') = '0' THEN
				IF intEmergencyStopActive = 1 THEN
					intEmergencyStopActive := 0;
				ELSE
					IF sDane &lt;&gt; '' THEN
						sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'EMST=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'EMST=') = '1' THEN
				IF intEmergencyStopActive = 0 THEN
					intEmergencyStopActive := 1;
				ELSE
					IF sDane &lt;&gt; '' THEN
						sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'EMST=1');
				END_IF
			END_IF
		//raportowanie typu A na potwierdzanie stanow zadanych przez C
			IF sDane &lt;&gt; '' THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdSterownika ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
			END_IF
		END_IF

		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'EMST=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'EMST=' , sWartosc := INT_TO_STRING(intEmergencyStopActive));
			END_IF
		//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 20 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdSterownika ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdSterownika ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Uruchomienie czasówki wyzwalającej puls co zadany czas. Uruchomiona gdy jest zezwolenie ze zmiennej globalnej

fbCzasHeartbeat( xWejscie := NOT fbCzasHeartbeat.xWyjscie AND xZezwolenieHeartbeat , intTyp := 1 , tCzas := tCzasWysylaniaHeartbeatu );

// jeśli czasówka działa to po upłynięciu danego czasu zapisz komunikat HEARTBEAT do wysłania

IF fbCzasHeartbeat.xWyjscie THEN
	sHeartbeatDane := '';
	intLokalnyLicznikKomunikatowWyslanych := intTransmitterLicznikKomunikatowWyslanych + 1; //NA PÓŹNIEJ: dorobić obsługę momentów przytkania UDP - to wydanie nie będzie zliczało poprawnie podczas przytkania
	sHeartbeatDane := CONCAT('CZAS=' , REAL_TO_STRING(DWORD_TO_REAL(TIME_TO_DWORD(tCzasWysylaniaHeartbeatu))/1000));
	sHeartbeatDane := CONCAT(sHeartbeatDane , ';ILE=');
	sHeartbeatDane := CONCAT(sHeartbeatDane , INT_TO_STRING(intLokalnyLicznikKomunikatowWyslanych));
	sHeartbeatDane := CONCAT(sHeartbeatDane , ';EMST=');
	sHeartbeatDane := CONCAT(sHeartbeatDane , INT_TO_STRING(intEmergencyStopActive));
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'H' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdSterownika ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sHeartbeatDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikat);
	intEmergencyStopActiveZaraportowana := intEmergencyStopActive;
END_IF

//dokonywanie obliczeń

intAutonomizacjaZewnetrzna := 0;
//sprawdzanie stanów w zewnętrznych sterownikach
FOR intPetla := 1 TO 7 BY 1 DO
	//zewnętrzne sterowniki mogą tylko ustawiać stan EMST
	IF intAutonomizacja_PLC[intPetla] = 1 THEN
		intAutonomizacjaZewnetrzna := 1;//ustawianie zdalnej autonomizacji
	END_IF
END_FOR

//przejście w tryb EMST oraz autonomizacji gdy przycisk na ewacji wciśnięty
IF xEmergencyStopWejscie THEN 
	intEmergencyStopActive := 1;
	intAutonomizacjaWewnetrzna := 1;
END_IF

//przejście w tryb autonomizacji po zaniku komunikacji
IF fbCzasWejscieHeartbeatTimeout.xWyjscie THEN
	intAutonomizacjaWewnetrzna := 1;
END_IF

//Wyłączenie lokalnego trybu autonomizacji
IF NOT fbCzasWejscieHeartbeatTimeout.xWyjscie AND NOT xEmergencyStopWejscie THEN
	intAutonomizacjaWewnetrzna := 0;
END_IF

//Wystawienie informacji o lokalnej autonomizacji na zewnętrzne sterowniki
IF intEmergencyStopActive = 1 OR intAutonomizacjaWewnetrzna = 1 THEN
	xAutonomizacjaWyjscieNVL := TRUE;
ELSE
	xAutonomizacjaWyjscieNVL := FALSE;
END_IF

//Wystawienie informacji o autonomizacji na urządzenia wewnętrzne sterownika
IF xAutonomizacjaWyjscieNVL OR intAutonomizacjaZewnetrzna = 1 THEN
	xAutonomizacjaWyjscie := TRUE;
ELSE
	xAutonomizacjaWyjscie := FALSE;
END_IF


//Jeżeli znacznik zapisu przekroczy polowe rozmiaru tabli to zapisz rekordy od 0 do intTablicaKomunikatowRozmiar / 2
Triger_Zapisu_1(CLK := (intTablicaKomunikatowZnacznikZapisu &gt; intTablicaKomunikatowRozmiar / 2), Q =&gt; xZapiszPlik_1);
//Jeżeli znacznik zapisu wróci na poczatek tabli zapiz rekordy od ("intTablicaKomunikatowRozmiar" / 2) + 1 do "intTablicaKomunikatowRozmiar"
Triger_Zapisu_2(CLK := (intTablicaKomunikatowZnacznikZapisu &lt; intTablicaKomunikatowRozmiar / 2), Q =&gt; xZapiszPlik_2);
//Zapisywanie wygenerowanych ramek do pliku tekstowego 
IF xZapiszPlik_1 OR xZapiszPlik_2 THEN 
//Utworzenie nazwy pliku "TAB_SAVE_2019-06-12_15-23_32"
	sCzasZapisuTablicy_A1 := CONCAT(MID(DT_TO_STRING(dtAktualnaDataCzas), 10, 4), '_');
	sCzasZapisuTablicy_A2 := CONCAT(MID(DT_TO_STRING(dtAktualnaDataCzas), 2, 15), '-');
	sCzasZapisuTablicy_A := CONCAT(sCzasZapisuTablicy_A1, sCzasZapisuTablicy_A2);
	sCzasZapisuTablicy_B1 := CONCAT(MID(DT_TO_STRING(dtAktualnaDataCzas), 2, 18), '-');
	sCzasZapisuTablicy_B := CONCAT(sCzasZapisuTablicy_B1, MID(DT_TO_STRING(dtAktualnaDataCzas), 2, 21));
	sCzasZapisuTablicy := CONCAT(sCzasZapisuTablicy_A, sCzasZapisuTablicy_B);
	sPlikName := CONCAT('TAB_SAVE_', sCzasZapisuTablicy);
	IF File.Open(sPlikName, FAM_Append, FSM_SafeClose, FALSE) = 0 THEN //Otwórz plik i jeżeli został poprawnie otwarty to
		IF 	xZapiszPlik_1 THEN
			iKomunikatIndex := 1;
			iKoniecZapisu := intTablicaKomunikatowRozmiar / 2;	
		END_IF
		IF 	xZapiszPlik_2 THEN
			iKomunikatIndex := intTablicaKomunikatowRozmiar / 2 + 1;
			iKoniecZapisu := intTablicaKomunikatowRozmiar;
		END_IF
		WHILE (iKomunikatIndex &lt;= iKoniecZapisu) DO //Dla wszystkich elementów tablicy
			sFullIdNadawcy := MID(arTablicaKomunikatow[iKomunikatIndex],16,13);// Wyciecie z ramki FullId nadawcy
			IF sFullIdNadawcy &lt;&gt; sIdAplikacji THEN
				File.WriteString(arTablicaKomunikatow[iKomunikatIndex]); //Zapisz ramkę
				File.WriteByte(16#0D); //Wprowadź znak entera
				File.WriteByte(16#0A); //Wprowadź znak konca lini
			END_IF		
			iKomunikatIndex := iKomunikatIndex + 1;
		END_WHILE
		File.Close(); //Zamknij plik
	END_IF
END_IF

//Timer odliczajacy czas do kasowania plików
ProceduraKasowaniaTimer(IN := xFlagaKasowaniaPlikow, PT := T#24H);
xFlagaKasowaniaPlikow := TRUE;
//Kasowanie logu ramek wykonywane co 24h. Pliki są kasowane jeżeli zostałe zapisane dawniej niż "dtAktualnaDataCzas" - "tCzasArchiwacjiRamek"
ChangeWorkingDirectory(sFrameLogPath, TRUE); //Wybranie ścieżki dostępu do miejsca zapisu pliku
IF ProceduraKasowaniaTimer.Q THEN //Jezeli nastapiła zmiana daty
	IF Dir.Open(sFrameLogPath) = 0 THEN //Otwarcie folderu z lokalizacją pliku
 		WHILE Dir.Read(Entry) = 0 DO //Pętla odczytująca po kolei wszystkie pliki w wskazanej lokalizacji
 			IF (Entry.dtLastModification &lt;= (dtAktualnaDataCzas - tCzasArchiwacjiRamek)) THEN //Jeżeli sterownik zakończył proces inicjalizacji a data ostatniej modyfikacji pliku jest wcześniejsza niż aktualana data - tCzasArchiwacjiRamek)
				sPlikNameRemove := Entry.sFileName; //Wybierz plik 
				RemoveFile(sPlikNameRemove); //Skasuj plik
				xFlagaKasowaniaPlikow := FALSE; //Zresetuj flagę kasowania plików
 			END_IF
  		END_WHILE
		Dir.close(); //Zamknij folder
	END_IF
END_IF

//raportowanie
IF intEmergencyStopActiveZaraportowana &lt;&gt; intEmergencyStopActive THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intEmergencyStopActiveZaraportowana &lt;&gt; intEmergencyStopActive THEN
		intEmergencyStopActiveZaraportowana := intEmergencyStopActive;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'EMST=' , sWartosc := INT_TO_STRING(intEmergencyStopActive));	
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdSterownika ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// obsługa alarmów do sterownika LAC0

	//sprawdzanie sIdSterownika oraz sIdInstancji - raportowanie pomimo blokady pozostałych funkcjonalności fb
IF arErrorStan[enumSystemError.BladWalidacjiFullIdentifier] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND NOT xPoprawnaWalidacja THEN
	arErrorStan[enumSystemError.BladWalidacjiFullIdentifier] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumSystemError.BladWalidacjiFullIdentifier] := enumSystemError.BladWalidacjiFullIdentifier;
	IF fbInicjalizacyjnyTimer.Q OR xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumSystemErrorKlasa.BladWalidacjiFullIdentifier , intNumer := enumSystemError.BladWalidacjiFullIdentifier),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumSystemError.BladWalidacjiFullIdentifier] &lt;&gt; enumAlarmWartosc.StanNormalny AND xPoprawnaWalidacja THEN
	arErrorStan[enumSystemError.BladWalidacjiFullIdentifier] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumSystemError.BladWalidacjiFullIdentifier] := enumSystemError.BladWalidacjiFullIdentifier;
	IF fbInicjalizacyjnyTimer.Q OR xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumSystemErrorKlasa.BladWalidacjiFullIdentifier , intNumer := enumSystemError.BladWalidacjiFullIdentifier),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

	//sprawdzanie alarmu Timeout HeartBeat
IF arErrorStan[enumSystemError.BrakHeartbetuzIZE] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbCzasWejscieHeartbeatTimeout.xWyjscie THEN
	arErrorStan[enumSystemError.BrakHeartbetuzIZE] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumSystemError.BrakHeartbetuzIZE] := enumSystemError.BrakHeartbetuzIZE;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumSystemErrorKlasa.BrakHeartbetuzIZE , intNumer := enumSystemError.BrakHeartbetuzIZE),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

IF arErrorStan[enumSystemError.BrakHeartbetuzIZE] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbCzasWejscieHeartbeatTimeout.xWyjscie THEN
	arErrorStan[enumSystemError.BrakHeartbetuzIZE] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumSystemError.BrakHeartbetuzIZE] := enumSystemError.BrakHeartbetuzIZE;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumSystemErrorKlasa.BrakHeartbetuzIZE , intNumer := enumSystemError.BrakHeartbetuzIZE),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

//sprawdzanie alarmu poprawności ID w HeartBeat
IF arErrorStan[enumSystemError.BladFullIdentifierWHeartBeat] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND NOT xZgodnoscIDwHeartBeat THEN
	arErrorStan[enumSystemError.BladFullIdentifierWHeartBeat] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumSystemError.BladFullIdentifierWHeartBeat] := enumSystemError.BladFullIdentifierWHeartBeat;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumSystemErrorKlasa.BladFullIdentifierWHeartBeat , intNumer := enumSystemError.BladFullIdentifierWHeartBeat),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

IF arErrorStan[enumSystemError.BladFullIdentifierWHeartBeat] &lt;&gt; enumAlarmWartosc.StanNormalny AND xZgodnoscIDwHeartBeat THEN
	arErrorStan[enumSystemError.BladFullIdentifierWHeartBeat] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumSystemError.BladFullIdentifierWHeartBeat] := enumSystemError.BladFullIdentifierWHeartBeat;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumSystemErrorKlasa.BladFullIdentifierWHeartBeat , intNumer := enumSystemError.BladFullIdentifierWHeartBeat),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSWezelClimatixPOL63x" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaAlarmu">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xSezonGrzewczyCalyRok">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tCzestotliwoscWysylaniaAlternatywnyAlgorytm">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="wZaprogramowanyTypInstalacji">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Autonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Sterowanie w trybie autonomizacji</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Autonomizacja">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intTrybPracyDHWAutonomizacja">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="aTemperatury">
              <type>
                <array>
                  <dimension lower="0" upper="96" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tablica pomiarów temperatur bieżącego dnia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia1Dzien">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia dzienna temperatura</xhtml>
              </documentation>
            </variable>
            <variable name="iTemperaturyIndex">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index tablicy </xhtml>
              </documentation>
            </variable>
            <variable name="aTemperaturySrednie">
              <type>
                <array>
                  <dimension lower="0" upper="2" />
                  <baseType>
                    <REAL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tablica zawierająca średnie temperatury z trzech ostatnich dni</xhtml>
              </documentation>
            </variable>
            <variable name="iTemperaturySrednieIndex">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Index tablicy śrenich temperatur</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia3Dni">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia temperatura z trzech dni</xhtml>
              </documentation>
            </variable>
            <variable name="xTemperaturaSrednia3DniObliczona">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Prawda, jeśli obliczona została średnia temperatura z trzech dni</xhtml>
              </documentation>
            </variable>
          </inOutVars>
          <localVars constant="true">
            <variable name="uintTrybPracyHC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="400" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">1</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX2HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="424" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">2</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX3HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="449" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">9</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX4HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="450" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">10</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX5HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="451" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">11</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZewnetrznejX6HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="425" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">3</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY2HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="426" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">4</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY3HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="435" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">6</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY4HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="436" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">7</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY5HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="437" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">8</xhtml>
              </documentation>
            </variable>
            <variable name="uintKrzywaGrzewczaTemperaturyZasilaniaY6HC1AdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="427" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">5</xhtml>
              </documentation>
            </variable>
            <variable name="uintTrybPracyZadanieDHWAdresModbus">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="800" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">12</xhtml>
              </documentation>
            </variable>
          </localVars>
          <localVars>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="xInstalacjaHC1">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Heat circuit 1 - 1-szy obwód grzewczy</xhtml>
              </documentation>
            </variable>
            <variable name="xInstalacjaDHW">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Domestic hot water - ciepła woda użytkowa</xhtml>
              </documentation>
            </variable>
            <variable name="xInstalacjaHP">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">??? - BRAK ZAPROGRAMOWANIA</xhtml>
              </documentation>
            </variable>
            <variable name="xInstalacjaHC2">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Heat circuit 2 - 2-gi obwód grzewczy - BRAK ZAPROGRAMOWANIA</xhtml>
              </documentation>
            </variable>
            <variable name="fbAutonomizacja">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wykrywanie przejścia w stan autonomizacji</xhtml>
              </documentation>
            </variable>
            <variable name="xPrzywrocDomyslne">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywrócenie nastaw krzywej grzewczej i trybów pracy (przepisanie rAutonomizacjaKrzywaGrzewcza[...] etc. do Climatixa)</xhtml>
              </documentation>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuBezpieczenstwa">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> definicja zmiennych do odczytu wartości z modbusa
klasy alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuKrytyczny">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuOstrzezenie">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xOdczytanaKlasaAlarmuInformacyjny">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="wAlarmsWord1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">alarmy</xhtml>
              </documentation>
            </variable>
            <variable name="wAlarmsWord1Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord2Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord3Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord4">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wAlarmsWord4Zaraportowana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass0">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass1">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wActiveAlarmsClass3">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wReczneWylaczenieInstalacji">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">odczyt	</xhtml>
              </documentation>
            </variable>
            <variable name="xReczneWylaczenieInstalacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTypInstalacji">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">0=Other,1=1 HC,2=1 HC + DHW,3=1 HC + DHW + HP,4=2 HC,5=2 HC + DHW,6=2 HC + DHW + HP,7=Free (other combination)</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaZewnetrzna">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">HC1
Temperatura zewnętrzna</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZewnetrzna">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZewnetrzna">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaGrzaniaNastawionaHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Temperatura nastawiona zasilania</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaGrzaniaNastawionaHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Temperatura nastawiona zasilania z krzywej grzewczej</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTrybPracyHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Tryb Pracy </xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyHC1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyHC1Zaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyHC1Autonomizacja">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTrybPracyHC1Ramka">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xTrybPracyHC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyHC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia	</xhtml>
              </documentation>
            </variable>
            <variable name="wTrybOperacjiHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Tryb operacji</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybOperacjiHC1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybOperacjiHC1Zaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaObwoduHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Obwód na instalację</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaObwoduHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuObwoduHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Obwód na instalację</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuObwoduHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuObwoduHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuObwoduHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuMiastoHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie wyskoiego parametru (miejskiej sieci ciepłowniczej)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuMiastoHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaBudynku">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Zasilanie przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynku">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaBudynku">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynkuZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuBudynku">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuBudynku">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuBudynku">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuBudynkuZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wSygnalZadaniaGrzaniaHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Sygnał żądanego grzania, w procentach</xhtml>
              </documentation>
            </variable>
            <variable name="rSygnalZadaniaGrzaniaHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbSygnalZadaniaGrzaniaHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rSygnalZadaniaGrzaniaHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wStopienOtwarciaZaworuMiastoHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Stopień otwarcia zaworu na powrocie wymiennika po stronie miejskiej sieci ciepłowniczej</xhtml>
              </documentation>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoHC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbStopienOtwarciaZaworuMiastoHC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoHC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X2</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX2HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY2OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y2</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY2HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X3</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX3HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY3OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y3</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY3HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X4</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX4HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY4OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y4</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY4HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X5</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX5HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY5OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y5</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY5HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza X6</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZewnetrznejX6HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia (po konwersji na WORDa)</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zaraportowania</xhtml>
              </documentation>
            </variable>
            <variable name="wKrzywaGrzewczaTemperaturyZasilaniaY6OdczytHC1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Krzywa grzewcza Y6</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbKrzywaGrzewczaTemperaturyZasilaniaY6HC1">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wTemperaturaGrzaniaNastawionaDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">DHW
Temperatura nastawiona zasilania</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaGrzaniaNastawionaDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaGrzaniaNastawionaDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTrybPracyDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Tryb Pracy</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyDHW">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracyDHWZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTrybPracyDHWRamka">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="xTrybPracyDHWZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyDHWZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="wTrybOperacjiDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb operacji</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybOperacjiDHW">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybOperacjiDHWZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuMiastoDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie wyskoiego parametru (miejskiej sieci ciepłowniczej)</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuMiastoDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuMiastoDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaZasilaniaBudynekDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Zasilanie przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynekDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaZasilaniaBudynekDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaBudynekDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTemperaturaPowrotuBudynekDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Powrót przy wymienniku ciepła po stronie budynku</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaPowrotuBudynekDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbTemperaturaPowrotuBudynekDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPowrotuBudynekDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wStopienOtwarciaZaworuMiastoDHW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Stopień otwarcia zaworu na powrocie wymiennika po stronie miejskiej sieci ciepłowniczej</xhtml>
              </documentation>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoDHW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbStopienOtwarciaZaworuMiastoDHW">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rStopienOtwarciaZaworuMiastoDHWZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasInicjalizacji">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#30s0ms" />
              </initialValue>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pozostale definicje</xhtml>
              </documentation>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xZadanieRaportu">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="11" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="11" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rtrigPrzywrocDomyslne">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywracanie domyślnych wartości nastaw</xhtml>
              </documentation>
            </variable>
            <variable name="rtrigZapisModbus">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger zapisu danych po Modbusie</xhtml>
              </documentation>
            </variable>
            <variable name="fbTaktowanieZapisywaniaModbus">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cykliczne żądanie zapisu danych do urządzenia	</xhtml>
              </documentation>
            </variable>
            <variable name="fbTimerBrakuKomunikacji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Kontrola komunikacji urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wTrybPracyZadanie">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="rAutonomizacjaKorektaTemperaturyGrzaniaZadanie">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xBrakKomunikacji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZewnetrznaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zewnętrznej</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZewnetrznej">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZewnetrznejTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZewnetrznej">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduHC1Pamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zasilania obwodu HC1</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilaniaObwoduHC1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaObwoduHC1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilaniaObwoduHC1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaZasilaniaObwoduDHWPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie sprawności czujnika temperatury zasilania obwodu DHW</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperaturyZasilaniaObwoduDHW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakZmianyTemperaturyZasilaniaObwoduDHWTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakZmianyTemperaturyZasilaniaObwoduDHW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakOsiagnieciaTemperauryZadanejHC1">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu HC1</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakOsiagnieciaTemperauryZadanejHC1Timer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakOsiagnieciaTemperauryZadanejHC1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakOsiagnieciaTemperauryZadanejDHW">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu DHW</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakOsiagnieciaTemperauryZadanejDHWTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBladBrakOsiagnieciaTemperauryZadanejDHW">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbWschodZachod">
              <type>
                <derived name="FbCalculateSunriseSunset" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Obliczanie wschodu i zachodu słońca</xhtml>
              </documentation>
            </variable>
            <variable name="fbZegar15M">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer taktujący zapisywanie temperatury</xhtml>
              </documentation>
            </variable>
            <variable name="xObliczSrednia3Dni">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Triger obliczania średniej dziennej temperatury z 3 ostatnich dni</xhtml>
              </documentation>
            </variable>
            <variable name="iIloscPomiarow">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ilość pomiarów dokonanych w ciągu dnia</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaSrednia1DzienZaraportowana">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Średnia dzienna temperatura zaraporotawana</xhtml>
              </documentation>
            </variable>
            <variable name="xSezonGrzewczy">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie ogrzewania</xhtml>
              </documentation>
            </variable>
            <variable name="xSezonGrzewczyZaraportowana">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Włączenie ogrzewania zaraportowane</xhtml>
              </documentation>
            </variable>
            <variable name="xBladIloscPomiarowTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zbyt mała ilość pomiarów dokonanych w ciągu dnia do obliczenia średniej </xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-09-03 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-09-06-PK: zmiana adresów rejestrów o -1
						2018-09-07-PK: przerobienie całego fb tak aby realizował układ HC1 (1-szego obiegu grzewczego) oraz/lub DHW (ciepłej wody użytkowej), wykonanie reakcji na autonomizację
						2019-01-04-AW: zmiana odczytu klasy alarmów (zmiana funkcji i adresów); odczyt rejestrów zawierających info o rodzaju alarmu
						2019-02-08-AWy: OverFlow
						2019-02-10-AWy: odczyt trybu operacji HC1 i wysyłanie do IZE, poprawa odczytywania i wysyłania temperatury zasilania, powrotu obwodu i miasta, krzywej grzewczej etc.
						2019-02-18-AWy: odczyt trybu operacji DHW i wysyłanie do IZE
						2019-05-15-AWy: - modyfikacja warunku obsługi ramki C. Było: IF sTempWartoscAtrybutu &lt;&gt; '' AND intBlokadaWykonywaniaRozkazow = 0 THEN. Jest: IF intBlokadaWykonywaniaRozkazow = 0 THEN
						2019-05-16-AWy: - modyfikacja warunku ręcznej inizjalizacji trybów pracy i krzywej grzewczej. Było: IF xAutonomizacja THEN. Jest: IF xPrzywrocDomyslne THEN.
									    - modyfikacja warunku na raportowanie. Dopisane: AND xPoInicjalizacji
									    - modyfikacja warunków na zapis po otrzymaniu ramki C. Nowy warunek: IF fnKomunikatDaneSzukajWartosci(sKomunikat,'TEMPKGHC1X5=') &lt;&gt; '' THEN etc.
						2019-05-23-AWy: dodanie przesyłania wewnętrznych numerów błędów z Climatixa (wAlarmsWord1 etc.)
						2019-06-03-AWy: załadowanie domyślnych trybów pracy i nastaw po przejściu w tryb autonomizacji
						2019-06-04-AWy: usunięcie błędów generowanych przy odczycie liczb ujemnych
						2019-07-16-AWy: zmiana typu zmiennej intTrybPracyDHWAutonomizacja z WORD na INT
						2019-08-05-AWy: wyznaczanie okresu grzewczego. Wysyłanie xSezonGrzewczy i rTemperaturaSrednia1Dzien do IZE. Przeniesie xTrybPracyAutonomizacja z VAR_INPUT do VAR
						2019-10-22-AWy: - wydłużenie czasu fbTaktowanieZapisywaniaModbus oraz wprowadzenie trigera zapisu po Modbusie
										- zmiana trigera fbTimerBrakuKomunikacji
						
Opis:					fb służy do komunikacji po Modbus RTU z węzłem ciepła na budynkach ENGIE, gdzie zainstalowano Siemens Climatix POL638.70
						Zawiera kod wykonywany w razie autonomizacji - wysyłanie zmiennych wprowadzonych poprzez EIG,
						po ustaniu Autonomizacji zostaje utrzymany stan z Autonomizacji, a układ reaguje dopiero na nowe ramki

UWAGA:					Zaprogramowano HC1 oraz DHN, nie zaprogramowane HP i HC2 
*)


//inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := (NOT xPoInicjalizacji AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	IF xInstalacjaHC1 OR xInstalacjaHC2 THEN
		rTemperaturaZewnetrznaZaraportowana := rTemperaturaZewnetrzna;
	END_IF
	IF xInstalacjaHC1 THEN
		rTemperaturaGrzaniaNastawionaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaHC1;
		rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1;
		intTrybPracyHC1Zaraportowana := intTrybPracyHC1;
		intTrybOperacjiHC1 := intTrybOperacjiHC1Zaraportowana;
		rTemperaturaZasilaniaObwoduHC1Zaraportowana := rTemperaturaZasilaniaObwoduHC1;
		rTemperaturaPowrotuObwoduHC1Zaraportowana := rTemperaturaPowrotuObwoduHC1;
		rTemperaturaPowrotuMiastoHC1Zaraportowana := rTemperaturaPowrotuMiastoHC1;
		rTemperaturaZasilaniaBudynkuZaraportowana := rTemperaturaZasilaniaBudynku;
		rTemperaturaPowrotuBudynkuZaraportowana := rTemperaturaPowrotuBudynku;
		rSygnalZadaniaGrzaniaHC1Zaraportowana := rSygnalZadaniaGrzaniaHC1;
		rStopienOtwarciaZaworuMiastoHC1Zaraportowana := rStopienOtwarciaZaworuMiastoHC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1;
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1;
		rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1;
		xSezonGrzewczyZaraportowana := xSezonGrzewczy;
		rTemperaturaSrednia1DzienZaraportowana := rTemperaturaSrednia1Dzien;
	END_IF
	IF xInstalacjaDHW THEN
		rTemperaturaGrzaniaNastawionaDHWZaraportowana := rTemperaturaGrzaniaNastawionaDHW;
		intTrybPracyDHWZaraportowana := intTrybPracyDHW;
		rTemperaturaPowrotuMiastoDHWZaraportowana := rTemperaturaPowrotuMiastoDHW;
		rTemperaturaZasilaniaBudynekDHWZaraportowana := rTemperaturaZasilaniaBudynekDHW;
		rTemperaturaPowrotuBudynekDHWZaraportowana := rTemperaturaPowrotuBudynekDHW;
		rStopienOtwarciaZaworuMiastoDHWZaraportowana := rStopienOtwarciaZaworuMiastoDHW;
		intTrybOperacjiDHWZaraportowana := intTrybOperacjiDHW;
	END_IF
	wAlarmsWord1Zaraportowana := wAlarmsWord1;
	wAlarmsWord2Zaraportowana := wAlarmsWord2;
	wAlarmsWord3Zaraportowana := wAlarmsWord3;
	wAlarmsWord4Zaraportowana := wAlarmsWord4;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
fbTimerBrakuKomunikacji(IN := arModbusStatusKomunikacji[bAdres] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa, PT := T#60S);
IF fbTimerBrakuKomunikacji.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

// Deklaracja rejestrów Modbusa
IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	
	//wybrana instalacja na budynku
	CASE wZaprogramowanyTypInstalacji OF
		0:	xInstalacjaHC1 := FALSE;
			xInstalacjaDHW := FALSE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := FALSE;
		1:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := FALSE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := FALSE;
		2:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := FALSE;
		3:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := TRUE;
			xInstalacjaHC2 := FALSE;
		4:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := FALSE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := TRUE;
		5:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := FALSE;
			xInstalacjaHC2 := TRUE;
		6:	xInstalacjaHC1 := TRUE;
			xInstalacjaDHW := TRUE;
			xInstalacjaHP := TRUE;
			xInstalacjaHC2 := TRUE;
	END_CASE
	
//deklaracja rejestrow do odczytu
	// Rejestry zawierające informację alarmach
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 18;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 19;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 20;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 21;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wAlarmsWord4);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 22;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass0);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 23;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 24;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 25;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wActiveAlarmsClass3);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	// Flagi typów alarmów (nie ma pewności, że działa - najprawdopodobniej w dokumentacji jest błąd i typy alarmów to nie inputy a coile - do zweryfikowania) - CAŁOŚĆ DO PRZETESTOWANIA
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 0;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuBezpieczenstwa);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;		
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 1;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuKrytyczny);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 2;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuOstrzezenie);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytWyjscBitowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 3;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := LTIME#10S;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(xOdczytanaKlasaAlarmuInformacyjny);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	//input register
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 4;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wReczneWylaczenieInstalacji);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;

	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 9;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTypInstalacji);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 49;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZewnetrzna);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 50;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaBudynku);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 51;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuBudynku);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 449;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaObwoduHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 450;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuObwoduHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 400;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracyHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 401;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybOperacjiHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 419;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaGrzaniaNastawionaHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
		
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 420;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF

	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 451;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuMiastoHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 474;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wSygnalZadaniaGrzaniaHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 489;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStopienOtwarciaZaworuMiastoHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 800;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybPracyDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 801;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTrybOperacjiDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 819;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaGrzaniaNastawionaDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 849;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaZasilaniaBudynekDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 850;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuBudynekDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 854;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPowrotuMiastoDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaDHW THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrowWejsciowych);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 889;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStopienOtwarciaZaworuMiastoDHW);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	//holding register	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 424;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 425;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 426;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY2OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 427;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY6OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 435;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY3OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 436;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY4OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 437;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZasilaniaY5OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 449;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 450;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
	
	IF xInstalacjaHC1 THEN
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := 451;
		arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
		arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1);
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_IF
END_IF

//obsluga komunikatu przychodzacego z IZE

IF sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		//rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF
			//sprawdzanie atrybutow dedykowanych dla urzadzenia - przygotowywanie do zapisu do Modbusa
			IF intBlokadaWykonywaniaRozkazow = 0 THEN
				// Tryb pracy HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYBNASHC1=',
					rAtrybutWartosc := rTrybPracyHC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyHC1Zapisz);	
				// Temperatura punktu X2 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X2=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz);
				// Temperatura punktu X3 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X3=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz);
				// Temperatura punktu X4 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X4=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz);
				// Temperatura punktu X5 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X5=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz);
				// Temperatura punktu X6 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1X6=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz);					
				// Temperatura punktu Y2 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y2=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz);				
				// Temperatura punktu Y3 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y3=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz);				
				// Temperatura punktu Y4 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y4=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz);				
				// Temperatura punktu Y5 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y5=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz);				
				// Temperatura punktu Y6 krzywej grzewczej HC1
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPKGHC1Y6=',
					rAtrybutWartosc := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz);	
				// Tryb pracy DHW
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYBNASDHW=',
					rAtrybutWartosc := rTrybPracyDHWZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyDHWZapisz);	
			END_IF
		END_IF
				
		//raportowanie typu A na potwierdzanie stanow zadanych przez C
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
		
		sDane := '';
		//zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
				IF xOverFlow = TRUE THEN
					fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
					sDane := '';
				END_IF	
			END_IF
			IF xInstalacjaHC1 THEN
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZEW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEW=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrzna) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNASHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNASKGHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASKGHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBNASHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASHC1=' , sWartosc := INT_TO_STRING(intTrybPracyHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBOPHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPHC1=' , sWartosc := INT_TO_STRING(intTrybOperacjiHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASOHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaObwoduHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWOHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuObwoduHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWMHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASB=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynku) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWB=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynku) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERGRZHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERGRZHC1=' , sWartosc := REAL_TO_STRING(rSygnalZadaniaGrzaniaHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERZAWMHC1=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMHC1=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoHC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X4=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X5=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1X6=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y2=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY2HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y3=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY3HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y4=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY4HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y5=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY5HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPKGHC1Y6=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY6HC1) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'SEZONGRZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'SEZONGRZ=' , sWartosc := BOOL_TO_STRING(xSezonGrzewczy) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPSR1DZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPSR1DZ=' , sWartosc := REAL_TO_STRING(rTemperaturaSrednia1Dzien + 273.15) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF				
			END_IF
			IF xInstalacjaDHW THEN
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNASDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBNASDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASDHW=' , sWartosc := INT_TO_STRING(intTrybPracyDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYBOPDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPDHW=' , sWartosc := INT_TO_STRING(intTrybOperacjiDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF	
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWMDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPZASBDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynekDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPPOWBDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynekDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
				IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERZAWMDHW=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
					fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMDHW=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoDHW) , xOverFlow := xOverFlow);	
					IF xOverFlow = TRUE THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
									sTypKomunikatu := 'A' ,
									sMnemonik := sMnemonik ,
									sMACAdres := sMACAdres ,
									sIDNadawcy := sIdInstancji ,
									sIDOdbiorcy := sIdAplikacji ,
									sDaneZapasowe := sDaneZapasowe ,
									sDane := sDane ,
									arTablicaKomunikatow := arTablicaKomunikatow ,
									intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
									intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
									sWyslanyKomunikat := sWyslanyKomunikatDummy);
						sDane := '';
					END_IF
				END_IF
			END_IF
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 11 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		//raportowanie typu A na zapytanie Q
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Przywrócenie wartości domyślnych nastaw krzywej grzewczej i trybów pracy w przypadku restartu sterownika lub przejścia w stan autonomizacji (brak komunikacji z IZE)
rtrigPrzywrocDomyslne(CLK := xAutonomizacja);
IF rtrigPrzywrocDomyslne.Q THEN	
	IF intTrybPracyHC1 &lt;&gt; intTrybPracyHC1Autonomizacja THEN
		rTrybPracyHC1Zapis := INT_TO_REAL(intTrybPracyHC1Autonomizacja);
		xTrybPracyHC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz := TRUE;
	END_IF
	IF rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Autonomizacja THEN
		rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Autonomizacja;
		xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz := TRUE;
	END_IF
	IF intTrybPracyDHW &lt;&gt; intTrybPracyDHWAutonomizacja THEN
		rTrybPracyDHWZapis := INT_TO_REAL(intTrybPracyDHWAutonomizacja);
		xTrybPracyDHWZapisz := TRUE;
	END_IF
END_IF	

// Trigger zapisu po Modbusie
rtrigZapisModbus (CLK := 	xTrybPracyHC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz OR
							xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz OR xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz OR xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz OR 
							xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz OR xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz OR xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz OR
							xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz OR xTrybPracyDHWZapisz);

// Taktowanie zapisywania po Modbusie
fbTaktowanieZapisywaniaModbus(IN := NOT fbTaktowanieZapisywaniaModbus.Q, PT := T#180S);
				
// Zapisywanie trybu pracy HC1 do pamięci urządzenia
IF xTrybPracyHC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintTrybPracyHC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTrybPracyHC1Zapis),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF intTrybPracyHC1 = REAL_TO_INT(rTrybPracyHC1Zapis) THEN					
		xTrybPracyHC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X2 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX2HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X3 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX3HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X4 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX4HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X5 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX5HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu X6 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	wKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis := fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD(rTemperaturaKelviny := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis);
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZewnetrznejX6HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := wKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis,
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 = rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y2 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY2HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y3 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY3HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y4 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY4HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y5 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY5HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zapisz := FALSE;
	END_IF
END_IF
// Temperatura punktu Y6 krzywej grzewczej HC1
IF xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintKrzywaGrzewczaTemperaturyZasilaniaY6HC1AdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD((rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis - 273.15) * 10),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 = rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapis THEN 						
		xKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zapisz := FALSE;
	END_IF				
END_IF
// Zapisywanie trybu pracy DHW do pamięci urządzenia
IF xTrybPracyDHWZapisz AND (fbTaktowanieZapisywaniaModbus.Q OR rtrigZapisModbus.Q) THEN
	fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
							bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),
							uiAdresRejestru := uintTrybPracyZadanieDHWAdresModbus,
							pZmiennaReferencyjna := 0,
							wWartoscDoZapisania := REAL_TO_WORD(rTrybPracyDHWZapis),
							intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
							arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
							intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	IF intTrybPracyDHW = REAL_TO_INT(rTrybPracyDHWZapis) THEN					
		xTrybPracyDHWZapisz := FALSE;
	END_IF
END_IF

// Wyznaczanie okresu grzewczego
fbZegar15M(IN := NOT fbZegar15M.Q AND NOT xBladBrakZmianyTemperaturyZewnetrznej, PT := T#15M);

	// Obliczenie wschodu i zachodu słońca
fbWschodZachod(dtUTC_Time := WagoAppTime.FuGetDateAndTime(),
	rTimeZone := 0,
	xDST := FALSE,
	rLatitude := 54.441944,
	rLongitude := 18.559722);

	// Zapisywanie tempratury z 15-minutowym okresem, oraz obliczanie średniej
IF fbWschodZachod.dtUTC_Time &gt; fbWschodZachod.dtSunrise AND fbWschodZachod.dtUTC_Time &lt; fbWschodZachod.dtSunset THEN
	IF fbZegar15M.Q OR xPierwszySkan THEN
		aTemperatury[iTemperaturyIndex] := WORD_TO_REAL(wTemperaturaZewnetrzna) / 10;
		iTemperaturyIndex := iTemperaturyIndex + 1;
	END_IF	
	xObliczSrednia3Dni := TRUE;
ELSE 
	// Obliczanie średniej temperatury dziennej
	IF iTemperaturyIndex &gt;= 40 THEN		// Oblicz średnią temperaturę tylko, jeśli zebranych zostało przynajmniej 40 próbek
		rTemperaturaSrednia1Dzien := 0;
		iIloscPomiarow := iTemperaturyIndex;
		FOR iTemperaturyIndex := 0 TO iIloscPomiarow BY 1 DO  
			rTemperaturaSrednia1Dzien := rTemperaturaSrednia1Dzien + aTemperatury[iTemperaturyIndex];
		END_FOR
		rTemperaturaSrednia1Dzien := rTemperaturaSrednia1Dzien / iTemperaturyIndex;
		xBladIloscPomiarowTemperatury := FALSE;
	ELSE
		rTemperaturaSrednia1Dzien := 15;
		xBladIloscPomiarowTemperatury := TRUE;
	END_IF
	// Obliczanie średniej z trzech dni
	IF xObliczSrednia3Dni THEN
		aTemperaturySrednie[iTemperaturySrednieIndex] := rTemperaturaSrednia1Dzien;
		iTemperaturySrednieIndex := iTemperaturySrednieIndex + 1;
		IF iTemperaturySrednieIndex = 3 THEN 
			iTemperaturySrednieIndex := 0;
			xTemperaturaSrednia3DniObliczona := TRUE;
		END_IF
		rTemperaturaSrednia3Dni := (aTemperaturySrednie[0] + aTemperaturySrednie[1] + aTemperaturySrednie[2]) / 3; 
		xObliczSrednia3Dni := FALSE;	
	END_IF
	iTemperaturyIndex := 0;
END_IF

	// Sprawdzenie warunku na włączenie ogrzewania (pomiędzy 15 września a 15 maja i/lub średnia temperatura jest poniżej 15 stopni)
IF  ((fbWschodZachod._rDay &gt;= 15 AND fbWschodZachod._rMonth = 9) OR (fbWschodZachod._rMonth &gt; 9 OR fbWschodZachod._rMonth &lt; 5) OR (fbWschodZachod._rDay &lt;= 15 AND fbWschodZachod._rMonth = 5)) OR 
	(rTemperaturaSrednia3Dni &lt; 15 AND xTemperaturaSrednia3DniObliczona) OR xSezonGrzewczyCalyRok THEN
	xSezonGrzewczy := TRUE;
	intTrybPracyHC1Autonomizacja := enumPPPSWezelClimatixPOL63xTrybPracy.Komfort;
ELSE
	xSezonGrzewczy := FALSE;
	intTrybPracyHC1Autonomizacja := enumPPPSWezelClimatixPOL63xTrybPracy.OchronaBudynku;
END_IF

// dokonywanie obliczeń
(*
xOdczytanaKlasaAlarmuBezpieczenstwa := WORD_TO_BOOL(wOdczytanaKlasaAlarmuBezpieczenstwa);
xOdczytanaKlasaAlarmuKrytyczny := WORD_TO_BOOL(wOdczytanaKlasaAlarmuKrytyczny);
xOdczytanaKlasaAlarmuOstrzezenie := WORD_TO_BOOL(wOdczytanaKlasaAlarmuOstrzezenie);
xOdczytanaKlasaAlarmuInformacyjny := WORD_TO_BOOL(wOdczytanaKlasaAlarmuInformacyjny);
*)
xReczneWylaczenieInstalacji := WORD_TO_BOOL(wReczneWylaczenieInstalacji);

IF xInstalacjaHC1 OR xInstalacjaHC2 THEN
	fbTemperaturaZewnetrzna(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZewnetrzna),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZewnetrznaZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZewnetrzna);
END_IF

IF xInstalacjaHC1 THEN							
	fbTemperaturaGrzaniaNastawionaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaHC1);
						
	fbTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaHC1);
	
	IF xReczneWylaczenieInstalacji THEN
		intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.ReczneWylaczenie;
	ELSE
		IF wTrybPracyHC1 = 0 THEN
			intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.Auto;
		ELSE
			IF wTrybPracyHC1 = 1 THEN
				intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.OchronaBudynku;
			ELSE
				IF wTrybPracyHC1 = 2 THEN
					intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.Ekonomiczny;
				ELSE
					IF wTrybPracyHC1 = 3 THEN
						intTrybPracyHC1 := enumPPPSWezelClimatixPOL63xTrybPracy.Komfort;
					END_IF
				END_IF
			END_IF
		END_IF
	END_IF
					
	fbTemperaturaGrzaniaNastawionaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaHC1);

	fbTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1);
								
	fbTemperaturaZasilaniaObwoduHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaObwoduHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaObwoduHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaObwoduHC1);
									
	fbTemperaturaPowrotuObwoduHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuObwoduHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuObwoduHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuObwoduHC1);
									
	fbTemperaturaPowrotuMiastoHC1(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuMiastoHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuMiastoHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuMiastoHC1);
									
	fbTemperaturaZasilaniaBudynku(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaBudynku),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaBudynkuZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaBudynku);
									
	fbTemperaturaPowrotuBudynku(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuBudynku),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuBudynkuZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuBudynku);
									
	fbSygnalZadaniaGrzaniaHC1(	rWartoscWejsciowa := WORD_TO_REAL(wSygnalZadaniaGrzaniaHC1),
									rDeadband := 0.05,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.01,
									rWynikOffset := 0.0,
									rWartoscWejsciowaZaraportowana := rSygnalZadaniaGrzaniaHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rSygnalZadaniaGrzaniaHC1);
									
	fbStopienOtwarciaZaworuMiastoHC1(	rWartoscWejsciowa := WORD_TO_REAL(wStopienOtwarciaZaworuMiastoHC1),
									rDeadband := 0.05,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.01,
									rWynikOffset := 0.0,
									rWartoscWejsciowaZaraportowana := rStopienOtwarciaZaworuMiastoHC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rStopienOtwarciaZaworuMiastoHC1);
									
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX2OdczytHC1);
	END_IF		
	fbKrzywaGrzewczaTemperaturyZewnetrznejX2HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY2HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY2OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1);
	
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX3OdczytHC1);
	END_IF								
	fbKrzywaGrzewczaTemperaturyZewnetrznejX3HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY3HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY3OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1);
	
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX4OdczytHC1);
	END_IF												
	fbKrzywaGrzewczaTemperaturyZewnetrznejX4HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY4HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY4OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1);
	
		
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX5OdczytHC1);
	END_IF										
	fbKrzywaGrzewczaTemperaturyZewnetrznejX5HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY5HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY5OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1);
	
	IF wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1 &gt; 1000 THEN		// Jeśli temperatura ujemna odwróć bity	
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport := (-1) * WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1 XOR 16#FFFF);	
	ELSE
		rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZewnetrznejX6OdczytHC1);
	END_IF									
	fbKrzywaGrzewczaTemperaturyZewnetrznejX6HC1(	rWartoscWejsciowa := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Raport,
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1);
	
	fbKrzywaGrzewczaTemperaturyZasilaniaY6HC1(	rWartoscWejsciowa := WORD_TO_REAL(wKrzywaGrzewczaTemperaturyZasilaniaY6OdczytHC1),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana,
									rWartoscWyjsciowa =&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1);


	intTrybOperacjiHC1 := WORD_TO_INT(wTrybOperacjiHC1);
END_IF

IF xInstalacjaDHW THEN
	fbTemperaturaGrzaniaNastawionaDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaGrzaniaNastawionaDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaGrzaniaNastawionaDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaGrzaniaNastawionaDHW);
									
	IF xReczneWylaczenieInstalacji THEN
		intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.ReczneWylaczenie;
	ELSE
		IF wTrybPracyDHW = 0 THEN
			intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.Auto;
		ELSE
			IF wTrybPracyDHW = 1 THEN
				intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.OchronaBudynku;
			ELSE
				IF wTrybPracyDHW = 2 THEN
					intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.Ekonomiczny;
				ELSE
					IF wTrybPracyDHW = 3 THEN
						intTrybPracyDHW := enumPPPSWezelClimatixPOL63xTrybPracy.Komfort;
					END_IF
				END_IF
			END_IF
		END_IF
	END_IF
					
	fbTemperaturaPowrotuMiastoDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuMiastoDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuMiastoDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuMiastoDHW);
									
	fbTemperaturaZasilaniaBudynekDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaZasilaniaBudynekDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaZasilaniaBudynekDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaZasilaniaBudynekDHW);
									
	fbTemperaturaPowrotuBudynekDHW(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPowrotuBudynekDHW),
									rDeadband := 0.5,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.1,
									rWynikOffset := 273.15,
									rWartoscWejsciowaZaraportowana := rTemperaturaPowrotuBudynekDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rTemperaturaPowrotuBudynekDHW);
									
	fbStopienOtwarciaZaworuMiastoDHW(	rWartoscWejsciowa := WORD_TO_REAL(wStopienOtwarciaZaworuMiastoDHW),
									rDeadband := 0.05,
									tCzasMinimalny := tMinimalnyCzasRaportowania,
									tCzasMaksymalny := tMaksymalnyCzasRaportowania,
									rWynikMnoznik := 0.01,
									rWynikOffset := 0.0,
									rWartoscWejsciowaZaraportowana := rStopienOtwarciaZaworuMiastoDHWZaraportowana,
									rWartoscWyjsciowa =&gt; rStopienOtwarciaZaworuMiastoDHW);
									
	intTrybOperacjiDHW := WORD_TO_INT(wTrybOperacjiDHW);
END_IF


//raportowanie
IF (intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR rTemperaturaZewnetrzna &lt;&gt; rTemperaturaZewnetrznaZaraportowana OR rTemperaturaGrzaniaNastawionaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaHC1Zaraportowana
OR intTrybPracyHC1 &lt;&gt; intTrybPracyHC1Zaraportowana OR rTemperaturaZasilaniaObwoduHC1 &lt;&gt; rTemperaturaZasilaniaObwoduHC1Zaraportowana OR rTemperaturaPowrotuObwoduHC1 &lt;&gt; rTemperaturaPowrotuObwoduHC1Zaraportowana
OR rTemperaturaPowrotuMiastoHC1 &lt;&gt; rTemperaturaPowrotuMiastoHC1Zaraportowana OR rTemperaturaZasilaniaBudynku &lt;&gt; rTemperaturaZasilaniaBudynkuZaraportowana OR rTemperaturaPowrotuBudynku &lt;&gt; rTemperaturaPowrotuBudynkuZaraportowana
OR rSygnalZadaniaGrzaniaHC1 &lt;&gt; rSygnalZadaniaGrzaniaHC1Zaraportowana OR rStopienOtwarciaZaworuMiastoHC1 &lt;&gt; rStopienOtwarciaZaworuMiastoHC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana
OR rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana OR rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana
OR rTemperaturaGrzaniaNastawionaDHW &lt;&gt; rTemperaturaGrzaniaNastawionaDHWZaraportowana OR intTrybPracyDHW &lt;&gt; intTrybPracyDHWZaraportowana OR rTemperaturaPowrotuMiastoDHW &lt;&gt; rTemperaturaPowrotuMiastoDHWZaraportowana
OR rTemperaturaZasilaniaBudynekDHW &lt;&gt; rTemperaturaZasilaniaBudynekDHWZaraportowana OR rTemperaturaPowrotuBudynekDHW &lt;&gt; rTemperaturaPowrotuBudynekDHWZaraportowana OR rStopienOtwarciaZaworuMiastoDHW &lt;&gt; rStopienOtwarciaZaworuMiastoDHWZaraportowana 
OR intTrybOperacjiHC1 &lt;&gt; intTrybOperacjiHC1Zaraportowana OR rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana OR intTrybOperacjiDHW &lt;&gt; intTrybOperacjiDHWZaraportowana
OR intTrybOperacjiDHW &lt;&gt; intTrybOperacjiDHWZaraportowana OR wAlarmsWord1 &lt;&gt; wAlarmsWord1Zaraportowana OR wAlarmsWord2 &lt;&gt; wAlarmsWord2Zaraportowana OR wAlarmsWord3 &lt;&gt; wAlarmsWord3Zaraportowana
OR wAlarmsWord4 &lt;&gt; wAlarmsWord4Zaraportowana OR xSezonGrzewczy &lt;&gt; xSezonGrzewczyZaraportowana OR rTemperaturaSrednia1Dzien &lt;&gt; rTemperaturaSrednia1DzienZaraportowana) 
AND	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF	
	END_IF	
	IF wAlarmsWord1 &lt;&gt; wAlarmsWord1Zaraportowana THEN
	wAlarmsWord1Zaraportowana := wAlarmsWord1;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD1=' , sWartosc := WORD_TO_STRING(wAlarmsWord1) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF wAlarmsWord2 &lt;&gt; wAlarmsWord2Zaraportowana THEN
	wAlarmsWord2Zaraportowana := wAlarmsWord2;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD2=' , sWartosc := WORD_TO_STRING(wAlarmsWord2) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF wAlarmsWord3 &lt;&gt; wAlarmsWord3Zaraportowana THEN
	wAlarmsWord3Zaraportowana := wAlarmsWord3;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD3=' , sWartosc := WORD_TO_STRING(wAlarmsWord3) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF wAlarmsWord4 &lt;&gt; wAlarmsWord4Zaraportowana THEN
	wAlarmsWord4Zaraportowana := wAlarmsWord4;
	fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'ALARMWORD4=' , sWartosc := WORD_TO_STRING(wAlarmsWord4) , xOverFlow := xOverFlow);	
		IF xOverFlow = TRUE THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'A' ,
						sMnemonik := sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdInstancji ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := sWyslanyKomunikatDummy);
			sDane := '';
		END_IF	
	END_IF	
	IF xInstalacjaHC1 OR xInstalacjaHC2 THEN
		IF rTemperaturaZewnetrzna &lt;&gt; rTemperaturaZewnetrznaZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZewnetrznaZaraportowana := rTemperaturaZewnetrzna;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZEW=' , sWartosc := REAL_TO_STRING(rTemperaturaZewnetrzna) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
	END_IF
	IF xInstalacjaHC1 THEN
		IF rTemperaturaGrzaniaNastawionaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaGrzaniaNastawionaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1 &lt;&gt; rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1Zaraportowana := rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASKGHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaKrzywaGrzewczaHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybPracyHC1 &lt;&gt; intTrybPracyHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybPracyHC1Zaraportowana := intTrybPracyHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASHC1=' , sWartosc := INT_TO_STRING(intTrybPracyHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybOperacjiHC1 &lt;&gt; intTrybOperacjiHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybOperacjiHC1Zaraportowana := intTrybOperacjiHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPHC1=' , sWartosc := INT_TO_STRING(intTrybOperacjiHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaZasilaniaObwoduHC1 &lt;&gt; rTemperaturaZasilaniaObwoduHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZasilaniaObwoduHC1Zaraportowana := rTemperaturaZasilaniaObwoduHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaObwoduHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuObwoduHC1 &lt;&gt; rTemperaturaPowrotuObwoduHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuObwoduHC1Zaraportowana := rTemperaturaPowrotuObwoduHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWOHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuObwoduHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuMiastoHC1 &lt;&gt; rTemperaturaPowrotuMiastoHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuMiastoHC1Zaraportowana := rTemperaturaPowrotuMiastoHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMHC1=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaZasilaniaBudynku &lt;&gt; rTemperaturaZasilaniaBudynkuZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZasilaniaBudynkuZaraportowana := rTemperaturaZasilaniaBudynku;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASB=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynku) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuBudynku &lt;&gt; rTemperaturaPowrotuBudynkuZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuBudynkuZaraportowana := rTemperaturaPowrotuBudynku;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWB=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynku) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rSygnalZadaniaGrzaniaHC1 &lt;&gt; rSygnalZadaniaGrzaniaHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rSygnalZadaniaGrzaniaHC1Zaraportowana := rSygnalZadaniaGrzaniaHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERGRZHC1=' , sWartosc := REAL_TO_STRING(rSygnalZadaniaGrzaniaHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rStopienOtwarciaZaworuMiastoHC1 &lt;&gt; rStopienOtwarciaZaworuMiastoHC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rStopienOtwarciaZaworuMiastoHC1Zaraportowana := rStopienOtwarciaZaworuMiastoHC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMHC1=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoHC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX2HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX3HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX4HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX5HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1X6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZewnetrznejX6HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY2HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY2HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY2HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y2=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY2HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY3HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY3HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY3HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y3=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY3HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY4HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY4HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY4HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y4=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY4HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY5HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY5HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY5HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y5=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY5HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rKrzywaGrzewczaTemperaturyZasilaniaY6HC1 &lt;&gt; rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rKrzywaGrzewczaTemperaturyZasilaniaY6HC1Zaraportowana := rKrzywaGrzewczaTemperaturyZasilaniaY6HC1;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPKGHC1Y6=' , sWartosc := REAL_TO_STRING(rKrzywaGrzewczaTemperaturyZasilaniaY6HC1) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF xSezonGrzewczy &lt;&gt; xSezonGrzewczyZaraportowana THEN
			xSezonGrzewczyZaraportowana := xSezonGrzewczy;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'SEZONGRZ=' , sWartosc := BOOL_TO_STRING(xSezonGrzewczy) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF	
		END_IF	
		IF rTemperaturaSrednia1Dzien &lt;&gt; rTemperaturaSrednia1DzienZaraportowana THEN
			rTemperaturaSrednia1DzienZaraportowana := rTemperaturaSrednia1Dzien;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPSR1DZ=' , sWartosc := REAL_TO_STRING(rTemperaturaSrednia1Dzien + 273.15) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF	
		END_IF	
	END_IF
	IF xInstalacjaDHW THEN
		IF rTemperaturaGrzaniaNastawionaDHW &lt;&gt; rTemperaturaGrzaniaNastawionaDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaGrzaniaNastawionaDHWZaraportowana := rTemperaturaGrzaniaNastawionaDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPNASDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaGrzaniaNastawionaDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybPracyDHW &lt;&gt; intTrybPracyDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybPracyDHWZaraportowana := intTrybPracyDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBNASDHW=' , sWartosc := INT_TO_STRING(intTrybPracyDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF intTrybOperacjiDHW &lt;&gt; intTrybOperacjiDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			intTrybOperacjiDHWZaraportowana := intTrybOperacjiDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TRYBOPDHW=' , sWartosc := INT_TO_STRING(intTrybOperacjiDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuMiastoDHW &lt;&gt; rTemperaturaPowrotuMiastoDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuMiastoDHWZaraportowana := rTemperaturaPowrotuMiastoDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWMDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuMiastoDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaZasilaniaBudynekDHW &lt;&gt; rTemperaturaZasilaniaBudynekDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaZasilaniaBudynekDHWZaraportowana := rTemperaturaZasilaniaBudynekDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPZASBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaZasilaniaBudynekDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rTemperaturaPowrotuBudynekDHW &lt;&gt; rTemperaturaPowrotuBudynekDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rTemperaturaPowrotuBudynekDHWZaraportowana := rTemperaturaPowrotuBudynekDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'TEMPPOWBDHW=' , sWartosc := REAL_TO_STRING(rTemperaturaPowrotuBudynekDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
		IF rStopienOtwarciaZaworuMiastoDHW &lt;&gt; rStopienOtwarciaZaworuMiastoDHWZaraportowana AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			rStopienOtwarciaZaworuMiastoDHWZaraportowana := rStopienOtwarciaZaworuMiastoDHW;
			fnKomunikatDaneDodaj_xOverFlow(sDane := sDane , sAtrybut := 'STERZAWMDHW=' , sWartosc := REAL_TO_STRING(rStopienOtwarciaZaworuMiastoDHW) , xOverFlow := xOverFlow);	
			IF xOverFlow = TRUE THEN
				fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'A' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
				sDane := '';
			END_IF
		END_IF
	END_IF
	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
	
// Obsługa alarmów do węzła ciepła
// Alarm komunikacji
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.BrakKomunikacji THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji;
	xBrakKomunikacji := TRUE;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji , intNumer := enumPPPSWezelClimatixPOL63xError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.BrakKomunikacji] := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji;
	xBrakKomunikacji := FALSE;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.BrakKomunikacji , intNumer := enumPPPSWezelClimatixPOL63xError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm ogólny w klasie bezpieczeństwa
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xOdczytanaKlasaAlarmuBezpieczenstwa AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xOdczytanaKlasaAlarmuBezpieczenstwa AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyBezpieczenstwa , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyBezpieczenstwa),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm ogólny w klasie krytycznej
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xOdczytanaKlasaAlarmuKrytyczny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xOdczytanaKlasaAlarmuKrytyczny AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyKrytyczny , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyKrytyczny),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm ogólny w klasie ostrzeżenia
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xOdczytanaKlasaAlarmuOstrzezenie AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xOdczytanaKlasaAlarmuOstrzezenie AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmOgolnyOstrzezenie , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmOgolnyOstrzezenie),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika zewnętrzengo
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZewnetrznego , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZewnetrznego),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika obwodu HC1
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika obwodu DHW
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmCzujnikaZasilaniaObwoduDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmCzujnikaZasilaniaObwoduDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm braku osiągnięcia zadanej temperatury zasilania obwodu HC1
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyHC1 , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyHC1),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm braku osiągnięcia zadanej temperatury zasilania obwodu DHW
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperaturyZewnetrznej AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW] := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSWezelClimatixPOL63xErrorKlasa.AlarmBrakuOsiagnieciaTemperaturyDHW , intNumer := enumPPPSWezelClimatixPOL63xError.AlarmBrakuOsiagnieciaTemperaturyDHW),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm braku wymaganej ilości pomiarów do obliczenia średniej temperatury
IF arErrorStan[enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladIloscPomiarowTemperatury THEN
	arErrorStan[enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury] := enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury , intNumer := enumPPPSWezelClimatixPOL63xError.BladIloscPomiarowTemperatury),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury zewnętrznej działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF xInstalacjaHC1 THEN
	IF rTemperaturaZewnetrznaPamiec = rTemperaturaZewnetrzna THEN
		xBrakZmianyTemperaturyZewnetrznej := TRUE;
	ELSE
		xBrakZmianyTemperaturyZewnetrznej := FALSE;	
	END_IF
	fbBrakZmianyTemperaturyZewnetrznejTimer(IN := xBrakZmianyTemperaturyZewnetrznej, PT := T#12H);
	rTemperaturaZewnetrznaPamiec := rTemperaturaZewnetrzna;
	IF fbBrakZmianyTemperaturyZewnetrznejTimer.Q THEN
		xBladBrakZmianyTemperaturyZewnetrznej := TRUE;
	ELSE
		xBladBrakZmianyTemperaturyZewnetrznej := FALSE;
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury zasilania obwodu HC1 działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF xInstalacjaHC1 THEN
	IF rTemperaturaZasilaniaObwoduHC1Pamiec = rTemperaturaZasilaniaObwoduHC1 THEN
		xBrakZmianyTemperaturyZasilaniaObwoduHC1 := TRUE;
	ELSE
		xBrakZmianyTemperaturyZasilaniaObwoduHC1 := FALSE;	
	END_IF
	fbBrakZmianyTemperaturyZasilaniaObwoduHC1Timer(IN := xBrakZmianyTemperaturyZasilaniaObwoduHC1, PT := T#12H);
	rTemperaturaZasilaniaObwoduHC1Pamiec := rTemperaturaZasilaniaObwoduHC1;
	IF fbBrakZmianyTemperaturyZasilaniaObwoduHC1Timer.Q THEN
		xBladBrakZmianyTemperaturyZasilaniaObwoduHC1 := TRUE;
	ELSE
		xBladBrakZmianyTemperaturyZasilaniaObwoduHC1 := FALSE;
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury zasilania obwodu DHW działa (alarm jest generowany, jeśli odczyt nie zmienił wartości w przeciągu 12h)
IF xInstalacjaDHW THEN
	IF rTemperaturaZasilaniaObwoduDHWPamiec = rTemperaturaZasilaniaBudynekDHW THEN
		xBrakZmianyTemperaturyZasilaniaObwoduDHW := TRUE;
	ELSE
		xBrakZmianyTemperaturyZasilaniaObwoduDHW := FALSE;	
	END_IF
	fbBrakZmianyTemperaturyZasilaniaObwoduDHWTimer(IN := xBrakZmianyTemperaturyZasilaniaObwoduDHW, PT := T#12H);
	rTemperaturaZasilaniaObwoduDHWPamiec := rTemperaturaZasilaniaBudynekDHW;
	IF fbBrakZmianyTemperaturyZasilaniaObwoduDHWTimer.Q THEN
		xBladBrakZmianyTemperaturyZasilaniaObwoduDHW := TRUE;
	ELSE
		xBladBrakZmianyTemperaturyZasilaniaObwoduDHW := FALSE;
	END_IF
END_IF

// Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu HC1
IF xInstalacjaHC1 THEN
	IF rTemperaturaZasilaniaObwoduHC1 &lt; rTemperaturaGrzaniaNastawionaHC1 THEN
		xBrakOsiagnieciaTemperauryZadanejHC1 := TRUE;
	ELSE
		xBrakOsiagnieciaTemperauryZadanejHC1 := FALSE;	
	END_IF
	fbBrakOsiagnieciaTemperauryZadanejHC1Timer(IN := xBrakOsiagnieciaTemperauryZadanejHC1, PT := T#3H);
	IF fbBrakOsiagnieciaTemperauryZadanejHC1Timer.Q THEN
		xBladBrakOsiagnieciaTemperauryZadanejHC1 := TRUE;
	ELSE
		xBladBrakOsiagnieciaTemperauryZadanejHC1 := FALSE;
	END_IF
END_IF

// Sprawdzanie czy została osiągnęta zadana temperatura zasilania obwodu DHW
IF xInstalacjaDHW THEN
	IF rTemperaturaZasilaniaBudynekDHW &lt; rTemperaturaGrzaniaNastawionaDHW THEN
		xBrakOsiagnieciaTemperauryZadanejDHW := TRUE;
	ELSE
		xBrakOsiagnieciaTemperauryZadanejDHW := FALSE;	
	END_IF
	fbBrakOsiagnieciaTemperauryZadanejDHWTimer(IN := xBrakOsiagnieciaTemperauryZadanejDHW, PT := T#3H);
	IF fbBrakOsiagnieciaTemperauryZadanejDHWTimer.Q THEN
		xBladBrakOsiagnieciaTemperauryZadanejDHW := TRUE;
	ELSE
		xBladBrakOsiagnieciaTemperauryZadanejDHW := FALSE;
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbPPPSZadajnikSR04P" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> komunikat z systemu zewnętrznego</xhtml>
              </documentation>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych wysyłkowych</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozmiar tablicy danych modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xTablicaKomunikatowHold">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wstrzymanie komunikacji mniej ważnych komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="sIdInstancji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID rolety np NS02L*202IBM**** </xhtml>
              </documentation>
            </variable>
            <variable name="sIdAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr ID aplikacji np SO*******ECL*000 </xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela - BCB* </xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6 znaków zapasu</xhtml>
              </documentation>
            </variable>
            <variable name="tCzasOpoznieniaRestartu">
              <type>
                <TIME />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> czas opóźnienia po którym zaczynają być raportowane wartości</xhtml>
              </documentation>
            </variable>
            <variable name="sTypPomieszczenia">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> typ pomieszczenia</xhtml>
              </documentation>
            </variable>
            <variable name="bAdres">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="bKanalEnOcean">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="sEnOceanID">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="tMinimalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tMaksymalnyCzasRaportowania">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tCzasTimeoutEnOcean">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xAutonomizacja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAutonomizacjaSztuczna">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xGlobalnaAutomatycznaKonfiguracja">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tCzestotliwoscAutomatycznejKonfiguracji">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="rRegulatorTemperaturyKp">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rRegulatorTemperaturyTi">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rRegulatorTemperaturyDeadZone">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTrybPracyAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślny tryb pracy</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaAutoAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślna wartość nastawy temperatury bazowej w trybie automatycznym</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaManAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślna wartość nastawy temperatury bazowej w trybie manualnym</xhtml>
              </documentation>
            </variable>
            <variable name="rSkalaPotencjometruAutonomizacja">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Domyślna skala potencjomentru</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaHMI">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="293.15" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperatura bazowa z HMI</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyHMI">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 - ręczny; 1 - auto</xhtml>
              </documentation>
            </variable>
            <variable name="xPokazPanelHMI">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 - widoczny; 1 - niewidoczny</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytCykliczny">
              <type>
                <array>
                  <dimension lower="1" upper="5000" />
                  <baseType>
                    <derived name="typModbusOdczytCykliczny" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusStatusKomunikacji">
              <type>
                <array>
                  <dimension lower="1" upper="256" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="rWyjscieRgulatoraTemperatury">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDiagnostykaTemperaturaPomieszczenia">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDiagnostykaTemperaturaNastawiona">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDiagnostykaTemperaturaBazowa">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDiagnostykaKorektaTemperaturyPotencjometru">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rDiagnostykaWyjscieRgulatoraTemperatury">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intDiagnostykaTrybPracy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="sDiagnostykaEnOceanIDodczytany">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="wDiagnostykaCzasOdOstatniegoKomunikatu">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTemperaturaPomieszczenia">
              <type>
                <REAL />
              </type>
            </variable>
          </outputVars>
          <localVars constant="true">
            <variable name="uintLiczbaRejestrowNaKanal">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="20" />
              </initialValue>
            </variable>
            <variable name="uintPierwszyRejestr">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="wEnOceanFunction">
              <type>
                <WORD />
              </type>
              <initialValue>
                <simpleValue value="16" />
              </initialValue>
            </variable>
            <variable name="wEnOceanType">
              <type>
                <WORD />
              </type>
              <initialValue>
                <simpleValue value="3" />
              </initialValue>
            </variable>
            <variable name="wEnOceanManufacturer">
              <type>
                <WORD />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="intDomyslneHarmonogram">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="enumPPPSHarmonogramy.Komfort" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">domyślne nastawy po restarcie sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="rDomyslneTemperaturaBazowaKomfort">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="293.15" />
              </initialValue>
            </variable>
            <variable name="rDomyslneTemperaturaBazowaEkonomiczny">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="292.15" />
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="uintFunctionModbusAdres">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">definicja adresów rejestrów modbusowych	</xhtml>
              </documentation>
            </variable>
            <variable name="uintTypeModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintManufacturerModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintEnOceanIDHiModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintEnOceanIDLoModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintCzasOdOstatniegoKomunikatuModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintPustyRejestr1ModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintStatusUrzadzeniaModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintPustyRejestr2ModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintTemperaturaPomieszczeniaOdczytanaModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintNastawaPotencjometruModbusAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="xPierwszySkan">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">uintLiczbaTelegramowModbusAdres : UINT;
zmienne operacyjne</xhtml>
              </documentation>
            </variable>
            <variable name="intPetlaPierwszySkan">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="intRozkazTymczasowy">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arNastawyRegulatoraTemperatury">
              <type>
                <derived name="typConfigPIDController" />
              </type>
            </variable>
            <variable name="fbRegulatorTemperatury">
              <type>
                <derived name="FbPIDController" />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intBlokadaWykonywaniaRozkazowZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTrybPracy">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tryb pracy regulatora.</xhtml>
              </documentation>
            </variable>
            <variable name="intTrybPracyZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xTrybPracyZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rTrybPracyZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaAuto">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="293.15" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperatura bazowa trybu automatycznego.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaAutoZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xTemperaturaBazowaAutoZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaAutoZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaMan">
              <type>
                <REAL />
              </type>
              <initialValue>
                <simpleValue value="293.15" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperatura bazowa trybu manualnego.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaManZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xTemperaturaBazowaManZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rTemperaturaBazowaManZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rSkalaPotencjometru">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Skala Potencjometru</xhtml>
              </documentation>
            </variable>
            <variable name="rSkalaPotencjometruZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xSkalaPotencjometruZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="rSkalaPotencjometruZapis">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość do zapisania w pamięci urządzenia.</xhtml>
              </documentation>
            </variable>
            <variable name="fbZadanieGrzania">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rZadanieGrzania">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zadana grzania</xhtml>
              </documentation>
            </variable>
            <variable name="fbZadanieGrzaniaRaport">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rZadanieGrzaniaRaport">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zadana grzania (raportowana)</xhtml>
              </documentation>
            </variable>
            <variable name="rZadanieGrzaniaRaportZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rWartoscWejsciowaTemperaturyNastawionej">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="fbWyslanieKonfiguracji">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> definicja zmiennych i FB do odczytu wartości z modbusa</xhtml>
              </documentation>
            </variable>
            <variable name="xPozwolenieNaAutomatycznaKonfiguracje">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xResetTimerautomatycznejKonfiguracji">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="wFunctionEnOceanOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTypeEnOceanOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wManufacturerEnOceanOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="sEnOceanIDodczytany">
              <type>
                <string length="10" />
              </type>
            </variable>
            <variable name="wEnOceanIDHi">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnOceanIDLo">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnOceanIDHiZapis">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wEnOceanIDLoZapis">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wCzasOdOstatniegoKomunikatu">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="fbTimeoutEnOcean">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="wStatusUrzadzenia">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wLiczbaTelegramow">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="uintLiczbaTelegramow">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="wPustyRejestr1">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Rejestry odczytywane dla zgrupowania zapytania rejestrów Modbus</xhtml>
              </documentation>
            </variable>
            <variable name="wPustyRejestr2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTemperaturaPomieszczeniaOdczytana">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="fbTemperaturaPomieszczenia">
              <type>
                <derived name="fbFiltrWartoscAnalogowa" />
              </type>
            </variable>
            <variable name="rTemperaturaPomieszczeniaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wNastawaPotencjometru">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="rTemperaturaNastawiona">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTemperaturaNastawionaZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="xPoInicjalizacji">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">inicjalizacja</xhtml>
              </documentation>
            </variable>
            <variable name="fbInicjalizacyjnyTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKomunikatPamiec">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca statusy alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorKlasa">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <INT />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca klasy danych alarmów</xhtml>
              </documentation>
            </variable>
            <variable name="sTempWartoscAtrybutu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="rTempWartoscAtrybutu">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="intTempWartoscAtrybutu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xRaport">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="uintFunctionAdres">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="sPlakietkaHMI">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Plakietka pomieszczenia zawierająca numer piętra i pomieszczenia (na potrzeby webvisu)</xhtml>
              </documentation>
            </variable>
            <variable name="fnPrzywrocDomyslne">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Przywracanie domyślnych wartości nastaw</xhtml>
              </documentation>
            </variable>
            <variable name="fbTaktowanieZapisywaniaModbus">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Cykliczne żądanie zapisu danych do urządzenia</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakKomunikacjiEnOcean">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Brak komunikacji z urządzeniem po enOcean</xhtml>
              </documentation>
            </variable>
            <variable name="tonBrakKomunikacjiPLC">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiPLC">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBrakKomunikacjiIZE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rTemperaturaPomieszczeniaPamiec">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temperatura zapamiętana w celu porównania z aktualną</xhtml>
              </documentation>
            </variable>
            <variable name="xBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Flaga braku zmiany temperatury</xhtml>
              </documentation>
            </variable>
            <variable name="fbBrakZmianyTemperaturyTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer braku zmiany temperatury (24 godziny)</xhtml>
              </documentation>
            </variable>
            <variable name="xBladBrakZmianyTemperatury">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Błąd braku zmiany temperatury </xhtml>
              </documentation>
            </variable>
            <variable name="xOsiagniecieTemperaturyZadanej">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sprawdzanie czy została osiągnęta zadana temperatura</xhtml>
              </documentation>
            </variable>
            <variable name="xOsiagniecieTemperaturyZadanejZaraportowana">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="xFlagaTrybuPracy">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="rRoznicaTemperaturyZadanejOrazZaraportowanej">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 2018-08-06, Artur Wyszomirski
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			
						2018-08-27-PK: dodanie algorytmu nadpisywania konfiguracji (uczenia) anteny
						2018-09-10-PK: dodanie regulatora temperatury oraz obsługi atrybutów potrzebnych do zadajnika z regulatorem, dodanie alarmowania Timeout komunikacji EnOcean
						2018-09-24-AWy: obsługa trybu manualnego i automatycznego
						2018-09-25-PK: dodanie domyślnego przyjmowania 21 st. C po restarcie sterownika, zanim nastąpi Autonomizacja i komunikacja z IZE.
						2018-15-10-AWy: obsługa harmonogramów
						2018-23-10-JB: przygotowanie atrybutów i alarmów do komunikacji z IZE
						2018-12-12-JB: napisanie od nowa obsługi ramek typu C i Q
						2019-02-26-JB: zmiana deadbandów w filtrach analogowych
						2019-04-08-AWy: usunięcie buga braku wysterowania grzejników w trybie manualnym (usunięcie intTrybPracy &lt;&gt; enumPPPSZadajnikTrybPracy.Manualny AND z linii 473)
						2019-05-13-AWy: zmiana wartości umieszczonej w atrybucie STERGRZ. Wartość rZadanieGrzania jest dzielona przez 100 tak, aby zakres STERGRZ mieścił się między 0 a 1.
						2019-05-16-AWy: modyfikacja warunku na raportowanie. Dopisane: AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji 
						2019-05-17-AWy: rozbicie zmiennej rTemperaturaBazowa na rTemperaturaBazowaAuto i rTemperaturaBazowaMan
						2019-05-21-AWy: modyfikacja przepisywania temperatury bazowej z IZE do lokalnej podczas regulacji IZE. 
						2019-06-05-AWy: załadowanie domyślnych trybów pracy i nastaw po przejściu w tryb autonomizacji
						2019-08-05-AWy: dodanie zmiennej sPlakietkaHMI.
						2019-08-14-AWy: zmiana fbPrzywrocDomyslne z przerzutnika RS na R_TRIG.
						2019-09-23-AWy: modyfikacja generowania wartości zmiennej xBrakKomunikacjiPLC
						2019-10-09-AWy: uzależnienie wystąpienia alarmu braku zmiany temperatury od stanu komunikacji 
						2019-10-10-AWy: przywrócenie zmiennej xBrakKomunikacjiEnOcean na potrzeby alarmów i webvisu z I etapu ENGIE
						2019-10-21-AWy: dodanie dodatkowego filtrowania zadanej grzania przy wysyłaniu ramek do IZE
						2019-10-22-AWy: usunięcie uintLiczbaTelegramowModbusAdres z odczytu po Modbusie
						
Opis:					fb służy do komunikacji po Modbus RTU za pośrednictwem bramek (STC65-RS485) EnOcean z zadajnikami FCP0 (SR04P) na budynkach PPP Sopot (ENGIE) 
*)

// Inicjalizacja sterownika
fbInicjalizacyjnyTimer(IN := NOT xPoInicjalizacji , PT := tCzasOpoznieniaRestartu);
IF fbInicjalizacyjnyTimer.Q THEN
	intTrybPracyZaraportowana := intTrybPracy;
	rTemperaturaBazowaAutoZaraportowana := rTemperaturaBazowaAuto;
	rTemperaturaBazowaManZaraportowana := rTemperaturaBazowaMan;
	rSkalaPotencjometruZaraportowana := rSkalaPotencjometru;
	rTemperaturaNastawionaZaraportowana := rTemperaturaNastawiona;
	rTemperaturaPomieszczeniaZaraportowana := rTemperaturaPomieszczenia;
	rZadanieGrzaniaRaportZaraportowana := rZadanieGrzaniaRaport;
	xOsiagniecieTemperaturyZadanej := xOsiagniecieTemperaturyZadanejZaraportowana;
	xPoInicjalizacji := TRUE;
END_IF

// Włącz autonomizację jeśli sterownik jest w stanie inicjalizacji lub nastąpiło wymuszenie autonomizacji
IF NOT xPoInicjalizacji OR xAutonomizacjaSztuczna = TRUE THEN
	xAutonomizacja := TRUE;
END_IF 

// Kontrola komunikacji
tonBrakKomunikacjiPLC(IN := (wCzasOdOstatniegoKomunikatu &gt; 180 OR arModbusStatusKomunikacji[bAdres] &lt;&gt; enumModbusStatus.KomunikacjaPrawidlowa), PT := T#180S);
IF tonBrakKomunikacjiPLC.Q THEN
	xBrakKomunikacjiPLC := TRUE;
ELSE
	xBrakKomunikacjiPLC := FALSE;
END_IF

IF xAutonomizacja THEN
	xBrakKomunikacjiIZE := TRUE;
ELSE
	xBrakKomunikacjiIZE := FALSE;
END_IF

IF xPierwszySkan THEN
	xPierwszySkan := FALSE;
	WHILE arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia &lt;&gt; 0 DO
		intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	END_WHILE
	
	//ustawienie parametrów regulatora temperatury
	arNastawyRegulatoraTemperatury.rKp := rRegulatorTemperaturyKp;
	arNastawyRegulatoraTemperatury.rTn := rRegulatorTemperaturyTi;
	arNastawyRegulatoraTemperatury.rTd := 0.0;
	arNastawyRegulatoraTemperatury.rOutputMax := 100.0;
	arNastawyRegulatoraTemperatury.rOutputMin := 0.0;
	arNastawyRegulatoraTemperatury.xPresetOn := TRUE;
	arNastawyRegulatoraTemperatury.rPresetValueOn := 0.0;
	arNastawyRegulatoraTemperatury.rPresetValueOff := 0.0;
	arNastawyRegulatoraTemperatury.rDeadZone := rRegulatorTemperaturyDeadZone;
	
	//wyznaczenie adresów rejestrów modbusowych
	uintFunctionModbusAdres := uintPierwszyRejestr + (uintLiczbaRejestrowNaKanal * (BYTE_TO_UINT(bKanalEnOcean) - 1));
	uintTypeModbusAdres := uintFunctionModbusAdres + 1;
	uintManufacturerModbusAdres := uintFunctionModbusAdres + 2;
	
	uintEnOceanIDHiModbusAdres := uintFunctionModbusAdres + 3;
	uintEnOceanIDLoModbusAdres := uintFunctionModbusAdres + 4;
	uintCzasOdOstatniegoKomunikatuModbusAdres := uintFunctionModbusAdres + 6;
	uintPustyRejestr1ModbusAdres := uintFunctionModbusAdres + 7;
	uintStatusUrzadzeniaModbusAdres := uintFunctionModbusAdres + 8;
	uintPustyRejestr2ModbusAdres := uintFunctionModbusAdres + 9;
	uintTemperaturaPomieszczeniaOdczytanaModbusAdres := uintFunctionModbusAdres + 10;
	uintNastawaPotencjometruModbusAdres := uintFunctionModbusAdres + 11;
	//uintLiczbaTelegramowModbusAdres := uintFunctionModbusAdres + 19;
	
//deklaracja rejestrow do odczytu
	//rejestry
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintFunctionModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wFunctionEnOceanOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintTypeModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTypeEnOceanOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintManufacturerModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wManufacturerEnOceanOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanIDHiModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanIDHi);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintEnOceanIDLoModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMaksymalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wEnOceanIDLo);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintCzasOdOstatniegoKomunikatuModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wCzasOdOstatniegoKomunikatu);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintPustyRejestr1ModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPustyRejestr1);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintStatusUrzadzeniaModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wStatusUrzadzenia);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintPustyRejestr2ModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wPustyRejestr2);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintTemperaturaPomieszczeniaOdczytanaModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wTemperaturaPomieszczeniaOdczytana);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;	
	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintNastawaPotencjometruModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wNastawaPotencjometru);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
(*	
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bAdresUrzadzenia := bAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].bFunkcja := TO_BYTE(enumModbusKodyFunkcji.OdczytNRejestrow);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].uiAdresRejestru := uintLiczbaTelegramowModbusAdres;
	arModbusOdczytCykliczny[intPetlaPierwszySkan].ltCzestotliwosc := TIME_TO_LTIME(tMinimalnyCzasRaportowania);
	arModbusOdczytCykliczny[intPetlaPierwszySkan].pZmiennaReferencyjna := ADR(wLiczbaTelegramow);
	intPetlaPierwszySkan := intPetlaPierwszySkan + 1;
*)	
(*	//przyjęcie nastaw domyślnych do momentu uzyskania nastaw z IZE lub przejścia w autonomizację
	IF intDomyslneHarmonogram = enumPPPSHarmonogramy.Ekonomiczny THEN
		rTemperaturaBazowaAuto := rDomyslneTemperaturaBazowaEkonomiczny;
	ELSE
		rTemperaturaBazowaAuto := rDomyslneTemperaturaBazowaKomfort;													
	END_IF
	intTrybPracy := enumPPPSZadajnikTrybPracy.Automatyczny;
	rSkalaPotencjometru := rSkalaPotencjometruAutonomizacja;	*)
END_IF

// Obsługa komunikatu przychodzacego z IZE
IF 	sKomunikat &lt;&gt; sKomunikatPamiec AND xPoInicjalizacji THEN
	sKomunikatPamiec := sKomunikat;
	IF fnIDOdbiorcyMatch(sKomunikat , sIdInstancji) THEN
		sDane := '';
		// Rozkaz typu C
		IF fnKomunikatTyp(sKomunikat) = 'C' AND NOT xAutonomizacja THEN
			// Blokada wykonywania rozkazów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '0' THEN
				IF intBlokadaWykonywaniaRozkazow = 1 THEN
					intBlokadaWykonywaniaRozkazow := 0;
					xRaport := TRUE;
					ELSE	
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF
					sDane := CONCAT(sDane , 'BLOK=0');
				END_IF
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat,'BLOK=') = '1' THEN
				IF intBlokadaWykonywaniaRozkazow = 0 THEN
					intBlokadaWykonywaniaRozkazow := 1;
					xRaport := TRUE;
					ELSE
					IF sDane &lt;&gt; '' THEN
					sDane := CONCAT(sDane , ';');
					END_IF					
					sDane := CONCAT(sDane , 'BLOK=1');
				END_IF
			END_IF		

			IF intBlokadaWykonywaniaRozkazow = 0 THEN
				// Tryby pracy 
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TRYB=',
					rAtrybutWartosc := rTrybPracyZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTrybPracyZapisz);	
				// Temperatura bazowa w trybie automatycznym
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPBAZAUTO=',
					rAtrybutWartosc := rTemperaturaBazowaAutoZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTemperaturaBazowaAutoZapisz);	
				// Temperatura bazowa w trybie manualnym
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'TEMPBAZMAN=',
					rAtrybutWartosc := rTemperaturaBazowaManZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xTemperaturaBazowaManZapisz);
				// Skala potencjometru
				fnKomunikatDaneZnajdzPorownajZapisz(sKomunikat := sKomunikat,
					sAtrybut := 'SKALAPOT=',
					rAtrybutWartosc := rSkalaPotencjometruZapis,
					sDane := sDane,
					xAtrybutZapisz =&gt; xSkalaPotencjometruZapisz);
			END_IF
		END_IF	

		// Zapytanie typu Q
		IF fnKomunikatTyp(sKomunikat) = 'Q' AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'BLOK=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TRYB=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TRYB=' , sWartosc := INT_TO_STRING(intTrybPracy));	
			END_IF
			IF (fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPBAZMAN=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?') THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPBAZMAN=' , sWartosc := REAL_TO_STRING(rTemperaturaBazowaMan));	
			END_IF
			IF (fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPBAZAUTO=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?') THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPBAZAUTO=' , sWartosc := REAL_TO_STRING(rTemperaturaBazowaAuto));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'SKALAPOT=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'SKALAPOT=' , sWartosc := REAL_TO_STRING(rSkalaPotencjometru));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMP=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMP=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczenia));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'STERGRZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'STERGRZ=' , sWartosc := REAL_TO_STRING(rZadanieGrzaniaRaport / 100));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'TEMPNAS=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPNAS=' , sWartosc := REAL_TO_STRING(rTemperaturaNastawiona));	
			END_IF
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'DOGRZ=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'DOGRZ=' , sWartosc := INT_TO_STRING(BOOL_TO_INT(xOsiagniecieTemperaturyZadanej)));	
			END_IF
			//pytanie o stany alarmów
			IF fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALARM=') = '?' OR fnKomunikatDaneSzukajWartosci(sKomunikat , 'ALL=') = '?' THEN
				FOR intPetla := 1 TO 4 BY 1 DO
					//raportowanie typu E (stanów alarmów) na zapytanie typu Q
					IF arErrorStan[intPetla] &lt;&gt; enumAlarmWartosc.StanNieznany THEN
						fnZapiszKomunikat(	sCalyKomunikat := '' ,
											sTypKomunikatu := 'E' ,
											sMnemonik := sMnemonik ,
											sMACAdres := sMACAdres ,
											sIDNadawcy := sIdInstancji ,
											sIDOdbiorcy := sIdAplikacji ,
											sDaneZapasowe := sDaneZapasowe ,
											sDane := fnKomunikatDaneErrorRetry(xAktywny := arErrorStan[intPetla] = enumAlarmWartosc.StanAlarmowy , intKlasa := arErrorKlasa[intPetla] , intNumer := intPetla),
											arTablicaKomunikatow := arTablicaKomunikatow ,
											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
											sWyslanyKomunikat := sWyslanyKomunikatDummy);
					END_IF
				END_FOR
			END_IF
		END_IF
		
		// Raportowanie typu A
		IF sDane &lt;&gt; '' THEN
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'A' ,
								sMnemonik := sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdInstancji ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikatDummy);
		END_IF
	END_IF
END_IF

// Przywrócenie wartości domyślnych nastaw krzywej grzewczej i trybów pracy w przypadku restartu sterownika lub przejścia w stan autonomizacji (brak komunikacji z IZE)
fnPrzywrocDomyslne(CLK := xAutonomizacja);
IF fnPrzywrocDomyslne.Q THEN	
	IF intTrybPracy &lt;&gt; REAL_TO_INT(rTrybPracyAutonomizacja) THEN
		rTrybPracyZapis := rTrybPracyAutonomizacja;
		xTrybPracyZapisz := TRUE;
	END_IF
	IF rTemperaturaBazowaAuto &lt;&gt; rTemperaturaBazowaAutoAutonomizacja THEN
		rTemperaturaBazowaAutoZapis := rTemperaturaBazowaAutoAutonomizacja + 273.15;
		xTemperaturaBazowaAutoZapisz := TRUE;
	END_IF
	IF rTemperaturaBazowaMan &lt;&gt; rTemperaturaBazowaManAutonomizacja THEN
		rTemperaturaBazowaManZapis := rTemperaturaBazowaManAutonomizacja;
		xTemperaturaBazowaManZapisz := TRUE;
	END_IF
	IF rSkalaPotencjometru &lt;&gt; rSkalaPotencjometruAutonomizacja THEN
		rSkalaPotencjometruZapis := rSkalaPotencjometruAutonomizacja;
		xSkalaPotencjometruZapisz := TRUE;
	END_IF
END_IF	

// Zapisanie nastaw domyślnych lub otrzymanych w ramce C
IF xTrybPracyZapisz THEN
	intTrybPracy := REAL_TO_INT(rTrybPracyZapis);
	intTrybPracyHMI := REAL_TO_INT(rTrybPracyZapis);
	xTrybPracyZapisz := FALSE;
END_IF
IF xTemperaturaBazowaAutoZapisz THEN
	rTemperaturaBazowaAuto := rTemperaturaBazowaAutoZapis;
	xTemperaturaBazowaAutoZapisz := FALSE;
END_IF
IF xTemperaturaBazowaManZapisz THEN
	rTemperaturaBazowaMan := rTemperaturaBazowaManZapis;
	xTemperaturaBazowaManZapisz := FALSE;
END_IF
IF xSkalaPotencjometruZapisz THEN
	rSkalaPotencjometru := rSkalaPotencjometruZapis;
	xSkalaPotencjometruZapisz := FALSE;
END_IF

// Tryby pracy
IF xAutonomizacja THEN	// W trybie automonizacji pobieraj tryb pracy i temperaturę bazową z panelu WebVisu
	IF intTrybPracyHMI = enumPPPSZadajnikTrybPracy.Manualny THEN	
		intTrybPracy := enumPPPSZadajnikTrybPracy.Manualny;
		rTemperaturaBazowaMan := rTemperaturaBazowaHMI + 273.15;
	ELSE
		intTrybPracy := enumPPPSZadajnikTrybPracy.Automatyczny;
		rTemperaturaBazowaAuto := rTemperaturaBazowaAutoAutonomizacja + 273.15;
	END_IF
ELSE // W trybie sterowania z IZE pobieraj tryb pracy i temperaturę bazową z panelu WebVisu
	IF intTrybPracy = enumPPPSZadajnikTrybPracy.Manualny THEN
		intTrybPracyHMI := enumPPPSZadajnikTrybPracy.Manualny;
		rTemperaturaBazowaHMI := rTemperaturaBazowaMan - 273.15;
	ELSE
		intTrybPracyHMI := enumPPPSZadajnikTrybPracy.Automatyczny;
		rTemperaturaBazowaHMI := rTemperaturaBazowaAuto - 273.15;
	END_IF	
END_IF
						 
IF intTrybPracy = enumPPPSZadajnikTrybPracy.Manualny THEN 	
	rTemperaturaNastawiona := rTemperaturaBazowaMan; // W trybie manualnym nie uwzględniaj nastawy potencjometru na zadajniku
ELSE
	rTemperaturaNastawiona := ((WORD_TO_REAL(wNastawaPotencjometru) - 127.0) * rSkalaPotencjometru / 127.0) + rTemperaturaBazowaAuto; // W trybie automatycznym uwzględnij nastawę Potencjometru
END_IF

//Autokonfiguracja bramki EnOcean
sEnOceanIDodczytany := CONCAT(CONCAT(fnKonwersjaDEC_BYTE_TO_HEX_STRING(INT_TO_BYTE(WORD_TO_INT(wEnOceanIDHi / 256))), fnKonwersjaDEC_BYTE_TO_HEX_STRING(WORD_TO_BYTE(wEnOceanIDHi))), CONCAT(fnKonwersjaDEC_BYTE_TO_HEX_STRING(INT_TO_BYTE(WORD_TO_INT(wEnOceanIDLo / 256))), fnKonwersjaDEC_BYTE_TO_HEX_STRING(WORD_TO_BYTE(wEnOceanIDLo))));

fbWyslanieKonfiguracji(IN := ((xPozwolenieNaAutomatycznaKonfiguracje OR xGlobalnaAutomatycznaKonfiguracja) AND NOT xResetTimerautomatycznejKonfiguracji) , PT := tCzestotliwoscAutomatycznejKonfiguracji);
xResetTimerautomatycznejKonfiguracji := FALSE;

IF((xPozwolenieNaAutomatycznaKonfiguracje OR xGlobalnaAutomatycznaKonfiguracja) AND fbWyslanieKonfiguracji.Q) THEN
	//EnOcean ID urządzenia
	IF sEnOceanID &lt;&gt; sEnOceanIDodczytany THEN
		wEnOceanIDHiZapis := BYTE_TO_WORD(fnKonwersjaHEX_STRING_TO_DEC_BYTE(LEFT(sEnOceanID, 2))) * 256 + BYTE_TO_WORD(fnKonwersjaHEX_STRING_TO_DEC_BYTE(LEFT(RIGHT(sEnOceanID, 6), 2)));
		fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
								bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),										
								uiAdresRejestru := uintEnOceanIDHiModbusAdres,
								pZmiennaReferencyjna := 0,
								wWartoscDoZapisania := wEnOceanIDHiZapis,
								intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
								arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
								intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
		wEnOceanIDLoZapis := BYTE_TO_WORD(fnKonwersjaHEX_STRING_TO_DEC_BYTE(LEFT(RIGHT(sEnOceanID, 4), 2))) * 256 + BYTE_TO_WORD(fnKonwersjaHEX_STRING_TO_DEC_BYTE(RIGHT(sEnOceanID, 2)));
		fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
								bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),										
								uiAdresRejestru := uintEnOceanIDLoModbusAdres,
								pZmiennaReferencyjna := 0,
								wWartoscDoZapisania := wEnOceanIDLoZapis,
								intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
								arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
								intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	END_IF
	//stałe wartości dla danego typu urządzeń
	IF wFunctionEnOceanOdczytana &lt;&gt; wEnOceanFunction THEN
		fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
								bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),										
								uiAdresRejestru := uintFunctionModbusAdres,
								pZmiennaReferencyjna := 0,
								wWartoscDoZapisania := wEnOceanFunction,
								intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
								arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
								intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	END_IF
	IF wTypeEnOceanOdczytana &lt;&gt; wEnOceanType THEN
		fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
								bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),										
								uiAdresRejestru := uintTypeModbusAdres,
								pZmiennaReferencyjna := 0,
								wWartoscDoZapisania := wEnOceanType,
								intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
								arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
								intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	END_IF
	IF wManufacturerEnOceanOdczytana &lt;&gt; wEnOceanManufacturer THEN
		fnModbusZapisRejestru(	bAdresUrzadzenia := bAdres,
								bFunkcja := INT_TO_BYTE(enumModbusKodyFunkcji.ZapisRejestru),										
								uiAdresRejestru := uintManufacturerModbusAdres,
								pZmiennaReferencyjna := 0,
								wWartoscDoZapisania := wEnOceanManufacturer,
								intModbusOdczytZapisZadanieRozmiar := intModbusOdczytZapisZadanieRozmiar,
								arModbusOdczytZapisZadanie := arModbusOdczytZapisZadanie,
								intModbusOdczytZapisZadanieZnacznikZapisu := intModbusOdczytZapisZadanieZnacznikZapisu);
	END_IF
	xResetTimerautomatycznejKonfiguracji := TRUE;
END_IF

//sprawdzanie Timeout komunikacji
fbTimeoutEnOcean(IN := ((wCzasOdOstatniegoKomunikatu &gt; 120) AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa) , PT := tCzasTimeoutEnOcean);	
							
fbTemperaturaPomieszczenia(	rWartoscWejsciowa := WORD_TO_REAL(wTemperaturaPomieszczeniaOdczytana),
							rDeadband := 0.1,
							tCzasMinimalny := tMinimalnyCzasRaportowania,
							tCzasMaksymalny := tMaksymalnyCzasRaportowania,
							rWynikMnoznik := (-40.0 / 255.0),
							rWynikOffset := 273.15 + 40.0,
							rWartoscWejsciowaZaraportowana := rTemperaturaPomieszczeniaZaraportowana,
							rWartoscWyjsciowa =&gt; rTemperaturaPomieszczenia);

//regulator PI
fbRegulatorTemperatury( xEnable := TRUE,
	rReferenceValue := rTemperaturaNastawiona,
	rActualValue := rTemperaturaPomieszczenia,
	typConfigParameters := arNastawyRegulatoraTemperatury,
	rY =&gt; rWyjscieRgulatoraTemperatury);

fbZadanieGrzania(rWartoscWejsciowa := rWyjscieRgulatoraTemperatury,
	rDeadband := 0.25,
	tCzasMinimalny := tMinimalnyCzasRaportowania,
	tCzasMaksymalny := tMaksymalnyCzasRaportowania,
	rWynikMnoznik := 1,
	rWynikOffset := 0.0,
	rWartoscWejsciowaZaraportowana := rZadanieGrzania,
	rWartoscWyjsciowa =&gt; rZadanieGrzania);		
	
// Raportowanie zadanej grzania
fbZadanieGrzaniaRaport(rWartoscWejsciowa := rZadanieGrzania,
	rDeadband := 10,
	tCzasMinimalny := tMinimalnyCzasRaportowania,
	tCzasMaksymalny := tMaksymalnyCzasRaportowania,
	rWynikMnoznik := 1,
	rWynikOffset := 0.0,
	rWartoscWejsciowaZaraportowana := rZadanieGrzaniaRaportZaraportowana,
	rWartoscWyjsciowa =&gt; rZadanieGrzaniaRaport);		
	
// Nowy filtr "antypyćkowy"
IF rZadanieGrzania &lt; 0.25 THEN
	rZadanieGrzania := 0;
	rZadanieGrzaniaRaport := 0;
ELSIF rZadanieGrzania &gt; 99.75 THEN
	rZadanieGrzania := 100;
	rZadanieGrzaniaRaport := 100;	
END_IF
(*
// FILTR ANTY_PYĆKOWY
rRoznicaTemperaturyZadanejOrazZaraportowanej := rZadanieGrzania - rZadanieGrzaniaZaraportowana;
IF rRoznicaTemperaturyZadanejOrazZaraportowanej &lt; 0.25 AND rRoznicaTemperaturyZadanejOrazZaraportowanej &gt; 0 AND rZadanieGrzania &lt; 1.0 THEN
	rZadanieGrzania := rZadanieGrzaniaZaraportowana;
END_IF	

IF rRoznicaTemperaturyZadanejOrazZaraportowanej &gt; - 0.25 AND rRoznicaTemperaturyZadanejOrazZaraportowanej &lt; 0 AND rZadanieGrzania &gt; 99.0 THEN
	rZadanieGrzania := rZadanieGrzaniaZaraportowana;
END_IF	
	*)		
///////Diagnostyka na czas uruchomień////////
	rDiagnostykaTemperaturaPomieszczenia := rTemperaturaPomieszczenia;
	rDiagnostykaTemperaturaNastawiona := rTemperaturaNastawiona;
	rDiagnostykaTemperaturaBazowa := rTemperaturaBazowaAuto;
	rDiagnostykaKorektaTemperaturyPotencjometru := (WORD_TO_REAL(wNastawaPotencjometru) - 127.0) * rSkalaPotencjometru / 127.0;
	rDiagnostykaWyjscieRgulatoraTemperatury := rWyjscieRgulatoraTemperatury;
	intDiagnostykaTrybPracy := intTrybPracy;
	sDiagnostykaEnOceanIDodczytany := sEnOceanIDodczytany;
	wDiagnostykaCzasOdOstatniegoKomunikatu := wCzasOdOstatniegoKomunikatu;
//////////////////////////////////////////////		
IF (intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana OR intTrybPracy &lt;&gt; intTrybPracyZaraportowana OR rTemperaturaBazowaAuto &lt;&gt; rTemperaturaBazowaAutoZaraportowana OR 
	rSkalaPotencjometru &lt;&gt; rSkalaPotencjometruZaraportowana OR rTemperaturaNastawiona &lt;&gt; rTemperaturaNastawionaZaraportowana OR rTemperaturaPomieszczenia &lt;&gt; rTemperaturaPomieszczeniaZaraportowana OR 
	rZadanieGrzaniaRaport &lt;&gt; rZadanieGrzaniaRaportZaraportowana OR xOsiagniecieTemperaturyZadanej &lt;&gt; xOsiagniecieTemperaturyZadanejZaraportowana OR rTemperaturaBazowaMan &lt;&gt; rTemperaturaBazowaManZaraportowana) AND 
	arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa AND xPoInicjalizacji THEN
	xRaport := TRUE;
END_IF

IF xRaport THEN
	sDane := '';
	xRaport := FALSE;
	IF intBlokadaWykonywaniaRozkazow &lt;&gt; intBlokadaWykonywaniaRozkazowZaraportowana THEN
		intBlokadaWykonywaniaRozkazowZaraportowana := intBlokadaWykonywaniaRozkazow;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'BLOK=' , sWartosc := INT_TO_STRING(intBlokadaWykonywaniaRozkazow));	
	END_IF
	IF intTrybPracy &lt;&gt; intTrybPracyZaraportowana THEN
		intTrybPracyZaraportowana := intTrybPracy;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TRYB=' , sWartosc := INT_TO_STRING(intTrybPracy));	
	END_IF
	IF (rTemperaturaBazowaMan &lt;&gt; rTemperaturaBazowaManZaraportowana) THEN
		rTemperaturaBazowaManZaraportowana := rTemperaturaBazowaMan;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPBAZMAN=' , sWartosc := REAL_TO_STRING(rTemperaturaBazowaMan));	
	END_IF
	IF (rTemperaturaBazowaAuto &lt;&gt; rTemperaturaBazowaAutoZaraportowana) THEN
		rTemperaturaBazowaAutoZaraportowana := rTemperaturaBazowaAuto;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPBAZAUTO=' , sWartosc := REAL_TO_STRING(rTemperaturaBazowaAuto));	
	END_IF
	IF rSkalaPotencjometru &lt;&gt; rSkalaPotencjometruZaraportowana THEN
		rSkalaPotencjometruZaraportowana := rSkalaPotencjometru;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'SKALAPOT=' , sWartosc := REAL_TO_STRING(rSkalaPotencjometru));	
	END_IF
	IF rTemperaturaNastawiona &lt;&gt; rTemperaturaNastawionaZaraportowana THEN
		rTemperaturaNastawionaZaraportowana := rTemperaturaNastawiona;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPNAS=' , sWartosc := REAL_TO_STRING(rTemperaturaNastawiona));	
	END_IF
	IF rTemperaturaPomieszczenia &lt;&gt; rTemperaturaPomieszczeniaZaraportowana THEN
		rTemperaturaPomieszczeniaZaraportowana := rTemperaturaPomieszczenia;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMP=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczenia));	
	END_IF
	IF rZadanieGrzaniaRaport &lt;&gt; rZadanieGrzaniaRaportZaraportowana THEN
		rZadanieGrzaniaRaportZaraportowana := rZadanieGrzaniaRaport;	
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'STERGRZ=' , sWartosc := REAL_TO_STRING(rZadanieGrzaniaRaport / 100));	
	END_IF
	IF xOsiagniecieTemperaturyZadanej &lt;&gt; xOsiagniecieTemperaturyZadanejZaraportowana THEN
		xOsiagniecieTemperaturyZadanejZaraportowana := xOsiagniecieTemperaturyZadanej;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'DOGRZ=' , sWartosc := INT_TO_STRING(BOOL_TO_INT(xOsiagniecieTemperaturyZadanej)));	
	END_IF
	
(*	IF rTemperaturaPomieszczeniaMIN &lt;&gt; rTemperaturaPomieszczeniaMINZaraportowana OR rTemperaturaPomieszczeniaMAX &lt;&gt; rTemperaturaPomieszczeniaMAXZaraportowana THEN
		
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPPOC=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczeniaPOCZATKOWA));
		rTemperaturaPomieszczeniaPOCZATKOWA := rTemperaturaPomieszczenia;
		
		rTemperaturaPomieszczeniaKONCOWA := rTemperaturaPomieszczenia;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPKON=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczeniaKONCOWA));
		
		rTemperaturaPomieszczeniaMINZaraportowana := rTemperaturaPomieszczeniaMIN;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPMIN=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczeniaMIN));
		rZmiennaProcesowaMinimumTemperatury := 500.0;
		
		rTemperaturaPomieszczeniaMAXZaraportowana := rTemperaturaPomieszczeniaMAX;
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPMAX=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczeniaMAX));
		rZmiennaProcesowaMaximumTemperatury := -1.0;
		
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPSRE=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczeniaSREDNIA));
		rTemperaturaPomieszczeniaSREDNIA := 0.0;
		
		fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := 'TEMPMED=' , sWartosc := REAL_TO_STRING(rTemperaturaPomieszczeniaMEDIANA));
		rTemperaturaPomieszczeniaMEDIANA := -1.0;
	END_IF
*)

	IF sDane &lt;&gt; '' AND xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'M' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikat);
	END_IF
END_IF

// Sprawdzanie czy pomiar temperatury działa (odczyt jest niepoprawny, jeśli nie zmienił wartości w przeciągu doby)
IF rTemperaturaPomieszczeniaPamiec = rTemperaturaPomieszczenia THEN
	xBrakZmianyTemperatury := TRUE;
ELSE
	xBrakZmianyTemperatury := FALSE;	
END_IF
fbBrakZmianyTemperaturyTimer(IN := xBrakZmianyTemperatury, PT := T#12H);
rTemperaturaPomieszczeniaPamiec := rTemperaturaPomieszczenia;
IF fbBrakZmianyTemperaturyTimer.Q AND NOT xBrakKomunikacjiPLC THEN
	xBladBrakZmianyTemperatury := TRUE;
ELSE
	xBladBrakZmianyTemperatury := FALSE;
END_IF

// Sprawdzanie czy została osiągnęta zadana temperatura
IF rTemperaturaPomieszczenia &gt;= rTemperaturaNastawiona THEN
	xOsiagniecieTemperaturyZadanej  := TRUE;
END_IF
IF rTemperaturaPomieszczenia &lt;= rTemperaturaNastawiona - 0.4 THEN
	xOsiagniecieTemperaturyZadanej := FALSE;	
END_IF

// obsługa alarmów do zadajnika
	//brak komunikacji po EnOcean
IF arErrorStan[enumPPPSZadajnikError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND fbTimeoutEnOcean.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSZadajnikError.BrakKomunikacji] := enumAlarmWartosc.StanAlarmowy;
	xBrakKomunikacjiEnOcean := TRUE;
	arErrorKlasa[enumPPPSZadajnikError.BrakKomunikacji] := enumPPPSZadajnikErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSZadajnikErrorKlasa.BrakKomunikacji , intNumer := enumPPPSZadajnikError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
IF arErrorStan[enumPPPSZadajnikError.BrakKomunikacji] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT fbTimeoutEnOcean.Q AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSZadajnikError.BrakKomunikacji] := enumAlarmWartosc.StanNormalny;
	xBrakKomunikacjiEnOcean := FALSE;
	arErrorKlasa[enumPPPSZadajnikError.BrakKomunikacji] := enumPPPSZadajnikErrorKlasa.BrakKomunikacji;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSZadajnikErrorKlasa.BrakKomunikacji , intNumer := enumPPPSZadajnikError.BrakKomunikacji),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF
// Alarm czujnika temperatury
IF arErrorStan[enumPPPSZadajnikError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanAlarmowy AND xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSZadajnikError.AlarmCzujnika] := enumAlarmWartosc.StanAlarmowy;
	arErrorKlasa[enumPPPSZadajnikError.AlarmCzujnika] := enumPPPSZadajnikErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := TRUE , intKlasa := enumPPPSZadajnikErrorKlasa.AlarmCzujnika , intNumer := enumPPPSZadajnikError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

IF arErrorStan[enumPPPSZadajnikError.AlarmCzujnika] &lt;&gt; enumAlarmWartosc.StanNormalny AND NOT xBladBrakZmianyTemperatury AND arModbusStatusKomunikacji[bAdres] = enumModbusStatus.KomunikacjaPrawidlowa THEN
	arErrorStan[enumPPPSZadajnikError.AlarmCzujnika] := enumAlarmWartosc.StanNormalny;
	arErrorKlasa[enumPPPSZadajnikError.AlarmCzujnika] := enumPPPSZadajnikErrorKlasa.AlarmCzujnika;
	IF xPoInicjalizacji THEN
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik := sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdInstancji ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := fnKomunikatDaneError(xAktywny := FALSE , intKlasa := enumPPPSZadajnikErrorKlasa.AlarmCzujnika , intNumer := enumPPPSZadajnikError.AlarmCzujnika),
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := sWyslanyKomunikatDummy);
	END_IF
END_IF

// Plakietka pomieszczenia (numer piętra.numer pomieszczenia)
sPlakietkaHMI := CONCAT(STR1 := MID(sIdInstancji, LEN := 2, POS := 3), '.');
sPlakietkaHMI := CONCAT(sPlakietkaHMI, MID(STR := sIdInstancji, LEN := 3, POS := 7));</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbTimer" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="xWejscie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tCzas">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tCzasOn">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="tCzasOff">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="xReset">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intTyp">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="xWyjscie">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xError">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="negZboczeOpadajace">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="tCzasowka1">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="tCzasowka2">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="xCzasowka1Wyzwolona">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xCzasowka2Wyzwolona">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xCzasowkaStartup">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">// Funkcja rozszerzająca funkcjonalność timera

// intTyp - 1 - Opóźnienie włączenia

// xWejscie - sygnał wejściowy zostanie opóźniony na wyjściu xWyjscie po czasie tCzas
// xReset - resetuje czasówkę wznowienie liczenia czasu po powrocie xReset do FALSE
// tCzas - Czas opóźnienia
// tCzasOn - Czas aktywnego wyjścia T#0s - nieskończoność

// intTyp = 2 - Pulse generator

// xWejscie - aktywuje działanie bloku
// tCzasOn - ile czasu xWyjscie ma byc TRUE - jeśli czas = T#0s stan TRUE pojawia się na jeden skan programu
// tCzasOff - ile czasu xWyjscie ma byc FALSE - jeśli czas = T#0s stan FALSE pojawia się na jeden skan programu

// intTyp = 3 - Pulse
// xWejscie - po pojawieniu się xWejscie przez czas tCzas XWyjscie będzie aktywne

// intTyp = 4 -delayed off
// xWejscie aktywne - xWyjscie aktywne, xWejscie deaktywacja - xWyjscie deaktywacja po tCzas

CASE intTyp OF

	1: 
	tCzasowka1(IN:=xWejscie AND NOT xReset,PT:=tCzas);
	IF tCzasOn = T#0S THEN
		xWyjscie := tCzasowka1.Q;
		ELSE
		tCzasowka2(IN := tCzasowka1.Q , PT := tCzasOn);
		xWyjscie := tCzasowka1.Q AND NOT tCzasowka2.Q;
	END_IF

	2:
	tCzasowka1(IN :=  xWejscie AND NOT tCzasowka2.Q , PT := tCzasOff);
	tCzasowka2(IN :=  xWejscie AND tCzasowka1.Q , PT := tCzasOn);
	xWyjscie := tCzasowka1.Q;
		
	3:
	negZboczeOpadajace(CLK := xWejscie);
	tCzasowka1(IN:= xWejscie OR negZboczeOpadajace.Q , PT := tCzas);
	xWyjscie := (xWejscie OR negZboczeOpadajace.Q) AND NOT tCzasowka1.Q;
	
	4:
	negZboczeOpadajace(CLK := xWejscie);
	IF negZboczeOpadajace.Q THEN
		xCzasowkaStartup := FALSE;
	END_IF
	tCzasowka1(IN := NOT negZboczeOpadajace.Q , PT := tCzas);
	xWyjscie := xWejscie OR (NOT tCzasowka1.Q AND NOT xCzasowkaStartup);
	ELSE
		xError := TRUE;
END_CASE;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fbUDPComm" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="sIDSterownika">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> ID sterownika</xhtml>
              </documentation>
            </variable>
            <variable name="sIDAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> ID aplikacji</xhtml>
              </documentation>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> mnemonik właściciela</xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres urządzenia - alias</xhtml>
              </documentation>
            </variable>
            <variable name="sMACAdresAplikacji">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres aplikacji - alias</xhtml>
              </documentation>
            </variable>
            <variable name="abMACAdresAplikacji">
              <type>
                <array>
                  <dimension lower="1" upper="6" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MAC adres aplikacji - wartość rzeczywista</xhtml>
              </documentation>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> dane zapasowe</xhtml>
              </documentation>
            </variable>
            <variable name="sAdresIP">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> adres IP aplikacji</xhtml>
              </documentation>
            </variable>
            <variable name="wTransmitterPort">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> port do wysyłania komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="wReceiverPort">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> port nasłuchu</xhtml>
              </documentation>
            </variable>
            <variable name="sKluczSzyfrowania">
              <type>
                <string />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowOverflow">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikOdczytu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="iDetekcjaBlokadaKomunikacjiLimitIlosciRamek">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Limit ilosi ramek do wysłania </xhtml>
              </documentation>
            </variable>
            <variable name="tDetekcjaBlokadaKomunikacjiLimitCzasu">
              <type>
                <TIME />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikWysylkiUDP">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowLiczbaWBuforze">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intTransmitterLicznikKomunikatowWyslanych">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> zmienna zwierająca licznik komunikatów wysłanych pomiędzy heartbetami</xhtml>
              </documentation>
            </variable>
            <variable name="intReceiverLicznikKomunikatowOtrzymanych">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> zmienna zwierająca licznik komunikatów otrzymanych pomiędzy heartbetami</xhtml>
              </documentation>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="fbTransmitter">
              <type>
                <derived name="fbBroadcaster" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> definicja drivera wysyłającego broadcast pakietów UDP</xhtml>
              </documentation>
            </variable>
            <variable name="udiTransmitterNBytes">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - ilość bajtów do wysłania</xhtml>
              </documentation>
            </variable>
            <variable name="xTransmitterClose">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - zamknięcie portu komunikacyjnego</xhtml>
              </documentation>
            </variable>
            <variable name="xTransmitterTrigger">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - uruchomienie wysłania telegramu</xhtml>
              </documentation>
            </variable>
            <variable name="sTransmitterTelegram">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> zmienna zawierająca telegram do wysłania</xhtml>
              </documentation>
            </variable>
            <variable name="arTransmitterBuffer">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica WORD bufora wysyłkowego</xhtml>
              </documentation>
            </variable>
            <variable name="pTransmitterBuffer">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="ADR(arTransmitterBuffer[1])" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - pointer do tablicy bufora dla drivera wysyłającego	</xhtml>
              </documentation>
            </variable>
            <variable name="fbReceiver">
              <type>
                <derived name="fbUdpReceiver" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> definicja drivera odbierającego pakiety UDP</xhtml>
              </documentation>
            </variable>
            <variable name="xReceiverEnable">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - aktywacja działania drivera</xhtml>
              </documentation>
            </variable>
            <variable name="xReceiverOpen">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - otworzenie portu komunikacyjnego</xhtml>
              </documentation>
            </variable>
            <variable name="sReceiverTelegram">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> zmienna zawierająca odebrany telegram</xhtml>
              </documentation>
            </variable>
            <variable name="arReceiverBuffer">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="pReceiverBuffer">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="ADR(arReceiverBuffer[1])" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> parametr drivera - pointer do tablicy bufora dla drivera odbierającego</xhtml>
              </documentation>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> zmienna tymczasowa używana dla pętli</xhtml>
              </documentation>
            </variable>
            <variable name="arwHeartbeatTelegram">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <WORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="negUdpCommTxDone">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="wCRC16_standard">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="xCRC16PakietOdebranyPoprawny">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="arErrorKomunikat">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <derived name="alSTRINGKomunikat" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca ostatni komunikat alarmu z danego kodu	</xhtml>
              </documentation>
            </variable>
            <variable name="arErrorStan">
              <type>
                <array>
                  <dimension lower="1" upper="20" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> tablica przechowująca stany alarmowe</xhtml>
              </documentation>
            </variable>
            <variable name="intTabelaKomunikatowZnacznikOdczytu">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="intEmergencyStopActiveZaraportowana">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="sWyslanyKomunikatDummy">
              <type>
                <string />
              </type>
            </variable>
            <variable name="BlokadaKomunikacjiDetekcjaTriger">
              <type>
                <derived name="RS" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Blokada wysylania komunikatów</xhtml>
              </documentation>
            </variable>
            <variable name="BlokadaKomunikacjiDetekcjaTimer">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="BlokadaKomunikacjiTriger">
              <type>
                <derived name="RS" />
              </type>
            </variable>
            <variable name="fbBlokadaKomunikacjiTimer">
              <type>
                <derived name="TON" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer do cyklicznego wysyłania ramki z errorem blokady wysyłania ramek</xhtml>
              </documentation>
            </variable>
            <variable name="xBlokadaKomunikacji">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Blokada komunikacji</xhtml>
              </documentation>
            </variable>
            <variable name="BlokadaKomunikacjiTimeDiff">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#200m0s0ms" />
              </initialValue>
            </variable>
            <variable name="xWyslijErrorBlokadyKomunikacji">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zmienna pomocniczna do fbWyslijErrorBlokadyKomunikacji</xhtml>
              </documentation>
            </variable>
            <variable name="fbWyslijErrorBlokadyKomunikacji">
              <type>
                <derived name="F_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Zbocze opadające xWyslijErrorBlokadyKomunikacji</xhtml>
              </documentation>
            </variable>
            <variable name="xBlokadaKomunikacjiReset">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset blokady komunikacji</xhtml>
              </documentation>
            </variable>
            <variable name="timestamp">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">obsługa debugowania problemów z komunikatami</xhtml>
              </documentation>
            </variable>
            <variable name="dtCzasLokalny">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="dtCzasKomunikatu">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="tPrzesuniecie">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#5m0s0ms" />
              </initialValue>
            </variable>
            <variable name="xPrzekroczony">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="arTablicaBlednychKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatowDebug" />
              </type>
            </variable>
            <variable name="uintZnacznikTablicyBlednychKomunikatow">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="intTablicaKomunikatowZnacznikWysylkiUDP_Pamiec">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="-1" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">// jeśli wysyłanie telegramu zakończone OK wyczyść zmienną zawierającą telegram oraz wyzeruj licznik komunikatów wysłanych jeśli TO BYł heartbeat
// 2019-04-01 - JC Dodanie blokady wysylania komunikatów w przypadku przekroczenia limitu
// 2019-04-18 - AWy: Wysyłanie ramki z errorem blokady wysyłania ramek co minutę
// 2019-04-19 - AWy: Poprawienie mechanizmu resetu blokady i usunięcie tBlokadaKomunikacjiOpoznienie
// 2019-04-25 - AWy: Przeniesienie xBlokadaKomunikacjiReset z VAR_INPUT do VAR
// 2019-10-24 - AWy: Zmiana tPrzesuniecie na 300 sekund
IF NOT xTransmitterTrigger AND sTransmitterTelegram &lt;&gt; '' THEN
	IF fnKomunikatTyp(sTransmitterTelegram) = 'H' THEN
		intTransmitterLicznikKomunikatowWyslanych := 0;
	END_IF
	sTransmitterTelegram := '';
END_IF

IF sTransmitterTelegram = '' AND intTablicaKomunikatowZnacznikWysylkiUDP &lt;&gt; intTablicaKomunikatowZnacznikZapisu THEN
	fnTablicaKomunikatowInkrementacja(intWskaznik := intTablicaKomunikatowZnacznikWysylkiUDP , intRozmiarTablicy := intTablicaKomunikatowRozmiar);
	WHILE fnKomunikatMACAdres(arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP]) &lt;&gt; sMACAdres AND intTablicaKomunikatowZnacznikWysylkiUDP &lt;&gt; intTablicaKomunikatowZnacznikZapisu DO
		fnTablicaKomunikatowInkrementacja(intWskaznik := intTablicaKomunikatowZnacznikWysylkiUDP , intRozmiarTablicy := intTablicaKomunikatowRozmiar);
 	END_WHILE
	IF fnKomunikatMACAdres(arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP]) = sMACAdres THEN
		intTransmitterLicznikKomunikatowWyslanych := intTransmitterLicznikKomunikatowWyslanych + 1;
		//////////////////////////////////
		//Walidacja poprawności komunikatu
		//////////////////////////////////
		IF intTablicaKomunikatowZnacznikWysylkiUDP_Pamiec &lt;&gt; intTablicaKomunikatowZnacznikWysylkiUDP THEN
			timestamp := fnKomunikatSprawdzTimeStamp( sKomunikat:= arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP],dtDataCzasWKomunikacie:=dtCzasKomunikatu, dtDataCzasAktualny:=dtCzasLokalny);
			IF(dtCzasKomunikatu + tPrzesuniecie) &lt; dtCzasLokalny THEN
				xPrzekroczony := TRUE;
				arTablicaBlednychKomunikatow[uintZnacznikTablicyBlednychKomunikatow].dtLokalnyCzasSterownika := dtCzasLokalny;
				arTablicaBlednychKomunikatow[uintZnacznikTablicyBlednychKomunikatow].intGlobalnaLiczbaKomunikatowWBuforze := intTablicaKomunikatowLiczbaWBuforze;
				arTablicaBlednychKomunikatow[uintZnacznikTablicyBlednychKomunikatow].intGlobalnyZnacznikOdczytu := intTablicaKomunikatowZnacznikOdczytu;
				arTablicaBlednychKomunikatow[uintZnacznikTablicyBlednychKomunikatow].intGlobalnyZnacznikWysylkiUDP := intTablicaKomunikatowZnacznikWysylkiUDP;
				arTablicaBlednychKomunikatow[uintZnacznikTablicyBlednychKomunikatow].intGlobalnyZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu;
				arTablicaBlednychKomunikatow[uintZnacznikTablicyBlednychKomunikatow].sDane := arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP];
				IF uintZnacznikTablicyBlednychKomunikatow &lt; 99 THEN
					uintZnacznikTablicyBlednychKomunikatow := uintZnacznikTablicyBlednychKomunikatow + 1;
				ELSE
					uintZnacznikTablicyBlednychKomunikatow := 1;
				END_IF
				//skasuj atrybuty
				arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP] := MID(arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP], 82, 1);
				arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP] := CONCAT(arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP], 'BLADRAMKI=2');
			ELSE
				xPrzekroczony := FALSE;
			END_IF
			intTablicaKomunikatowZnacznikWysylkiUDP_Pamiec := intTablicaKomunikatowZnacznikWysylkiUDP;
		END_IF
		//////////////////////////////////
		fnAES256Szyfrowanie(	sKomunikat := arTablicaKomunikatow[intTablicaKomunikatowZnacznikWysylkiUDP] , 
								sKlucz := sKluczSzyfrowania , 
								intError := intBlad , 
								sKomunikatZaszyfrowany := sTransmitterTelegram);
		
		fnCRC16Wysylanie(	sKomunikat :=  sTransmitterTelegram,
							arTransmitterBuffer := arTransmitterBuffer ,
							udiTransmitterNBytes := udiTransmitterNBytes);
		xTransmitterTrigger := TRUE;
	END_IF
END_IF

// driver wysyłający pakiety UDP

// Blokada wysyłania komunikatów - po przekroczeniu iDetekcjaBlokadaKomunikacjiLimitIlosciRamek w czasie tDetekcjaBlokadaKomunikacjiLimitCzasu algorytm zatrzyma wysyłanie ramek, ale nie 
// przestanie zapisywać ich do tablicy. Raz na minutę zostanie wysłana ramka E informująca o blokadzie. Funkcjonalność ma na celu zabezpieczenia systemu przed spamowaniem ramkami jako 
// konsekwencji błędów programistycznych. 

BlokadaKomunikacjiDetekcjaTriger(Set := (intTablicaKomunikatowZnacznikZapisu = (intTablicaKomunikatowRozmiar - iDetekcjaBlokadaKomunikacjiLimitIlosciRamek)),
								 RESET1 := (intTablicaKomunikatowZnacznikZapisu = intTablicaKomunikatowRozmiar)); // Sprawdzenie następuje, gdy znacznik jest w połowie tablicy komunikatów
IF BlokadaKomunikacjiDetekcjaTimer.ET &lt;&gt; T#0MS AND BlokadaKomunikacjiDetekcjaTriger.RESET1 = TRUE AND NOT xBlokadaKomunikacjiReset THEN
	BlokadaKomunikacjiTimeDiff := BlokadaKomunikacjiDetekcjaTimer.ET; 
END_IF

IF xBlokadaKomunikacjiReset THEN
	BlokadaKomunikacjiTimeDiff := T#200M;
END_IF

BlokadaKomunikacjiDetekcjaTimer(IN := BlokadaKomunikacjiDetekcjaTriger.Q1, PT := T#100S);
 
BlokadaKomunikacjiTriger(Set := (BlokadaKomunikacjiTimeDiff &lt; tDetekcjaBlokadaKomunikacjiLimitCzasu), RESET1 := xBlokadaKomunikacjiReset, Q1 =&gt; xBlokadaKomunikacji); 

IF NOT(xBlokadaKomunikacji) THEN
	udiTransmitterNBytes := INT_TO_UDINT(LEN(sTransmitterTelegram)) + 2;
	fbTransmitter(	sNetName := sAdresIP ,
					wPort := wTransmitterPort , 
					pTxBuffer := pTransmitterBuffer , 
					udiTxNBytes := udiTransmitterNBytes , 
					xClose := xTransmitterClose , 
					xTxTrigger := xTransmitterTrigger);
END_IF

// driver nasłuchujący pakietów UDP

fbReceiver(	wPort := wReceiverPort , 
			pRxBuffer := pReceiverBuffer , 
			udiRxBufferSize := 512 , 
			xRxEnable := xReceiverEnable , 
			xOpen := xReceiverOpen);

// po otrzymaniu pakietu wykonanie zapisu danych kontroli CRC itd

IF fbReceiver.xPacketReceived = TRUE THEN
	sReceiverTelegram := LEFT(sReceiverTelegram , UDINT_TO_INT(fbReceiver.udiRxNBytes));
	fnAES256Odszyfrowanie(	sKomunikatZaszyfrowany := sReceiverTelegram , 
							sKlucz := sKluczSzyfrowania ,
							intError := intBlad ,
							sKomunikat := sReceiverTelegram);

// sprawdzenie CRC otrzymanego komunikatu

	xCRC16PakietOdebranyPoprawny := fnCRC16Odbieranie(	arReceiverBuffer := arReceiverBuffer ,
														udiRxNBytes := fbReceiver.udiRxNBytes ,
														sMACAdresAplikacji := sMACAdresAplikacji ,
														abMACAdresAplikacji := abMACAdresAplikacji ,
														sKomunikat := sReceiverTelegram);
	IF xCRC16PakietOdebranyPoprawny THEN

// CRC poprawne zapis komunikatu do tablicy komunikatów otrzymanych o nie jest to komunikat z tego sterownika

		intReceiverLicznikKomunikatowOtrzymanych := intReceiverLicznikKomunikatowOtrzymanych + 1;

		IF fnKomunikatMACAdres(sReceiverTelegram) &lt;&gt; sMACAdres THEN
			fnZapiszKomunikat(	sCalyKomunikat := sReceiverTelegram ,
								sTypKomunikatu := '' ,
								sMnemonik := '' ,
								sMACAdres := '' ,
								sIDNadawcy := '' ,
								sIDOdbiorcy := '' ,
								sDaneZapasowe := '' ,
								sDane := '' ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := sWyslanyKomunikat);
		END_IF
		
// sprawdzenie statusu błędu jeśli błąd był zaraportowany zaraportowanie poprawnego CRC

		IF arErrorStan[enumSystemErrorKlasa.BladCRCWKomunikacieZIZE] THEN
			arErrorStan[enumSystemErrorKlasa.BladCRCWKomunikacieZIZE] := FALSE;
			sDane := CONCAT('ACT=0;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.BladCRCWKomunikacieZIZE));
			sDane := CONCAT(sDane , ';NUM=');
			sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.BladCRCWKomunikacieZIZE));
			sDane := CONCAT(sDane , ';E');
			sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.BladCRCWKomunikacieZIZE , intIloscZnakow := 3));
			sDane := CONCAT(sDane , 'ACT=0');
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'E' ,
								sMnemonik :=  sMnemonik ,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdSterownika ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := arErrorKomunikat[enumSystemError.BladCRCWKomunikacieZIZE]);
			END_IF
		ELSE

// jeżeli był błąd w CRC komunikatu i poprzednie komunikaty były bez błędu zaraportuj ten błąd z powrotem do IZE

		IF NOT arErrorStan[enumSystemErrorKlasa.BladCRCWKomunikacieZIZE] THEN
			arErrorStan[enumSystemErrorKlasa.BladCRCWKomunikacieZIZE] := TRUE;
			sDane := CONCAT('ACT=1;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.BladCRCWKomunikacieZIZE));
			sDane := CONCAT(sDane , ';NUM=');
			sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.BladCRCWKomunikacieZIZE));	
			sDane := CONCAT(sDane , ';E');
			sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.BladCRCWKomunikacieZIZE , intIloscZnakow := 3));
			sDane := CONCAT(sDane , 'ACT=1');
			fnZapiszKomunikat(	sCalyKomunikat := '' ,
								sTypKomunikatu := 'E' ,
								sMnemonik :=  sMnemonik,
								sMACAdres := sMACAdres ,
								sIDNadawcy := sIdSterownika ,
								sIDOdbiorcy := sIdAplikacji ,
								sDaneZapasowe := sDaneZapasowe ,
								sDane := sDane ,
								arTablicaKomunikatow := arTablicaKomunikatow ,
								intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
								intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
								sWyslanyKomunikat := arErrorKomunikat[enumSystemError.BladCRCWKomunikacieZIZE]);
		END_IF
	END_IF
END_IF

// obsługa alarmu przepełnienia bufora komunikatów

intTablicaKomunikatowLiczbaWBuforze := intTablicaKomunikatowZnacznikZapisu - intTablicaKomunikatowZnacznikWysylkiUDP;

IF intTablicaKomunikatowLiczbaWBuforze &lt; 0 THEN
	intTablicaKomunikatowLiczbaWBuforze := intTablicaKomunikatowLiczbaWBuforze + intTablicaKomunikatowRozmiar;
END_IF

IF intTablicaKomunikatowLiczbaWBuforze &gt; intTablicaKomunikatowOverflow AND NOT arErrorStan[enumSystemError.ZaDuzaIloscKomunikatowWBuforze] THEN
	arErrorStan[enumSystemError.ZaDuzaIloscKomunikatowWBuforze] := TRUE;
	sDane := CONCAT('ACT=1;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.ZaDuzaIloscKomunikatowWBuforze));
	sDane := CONCAT(sDane , ';NUM=');
	sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.ZaDuzaIloscKomunikatowWBuforze));	
	sDane := CONCAT(sDane , ';E');
	sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.ZaDuzaIloscKomunikatowWBuforze , intIloscZnakow := 3));
	sDane := CONCAT(sDane , 'ACT=1');
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'E' ,
						sMnemonik :=  sMnemonik ,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdSterownika ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := arErrorKomunikat[enumSystemError.ZaDuzaIloscKomunikatowWBuforze]);						
END_IF
IF  intTablicaKomunikatowLiczbaWBuforze = 0 AND arErrorStan[enumSystemError.ZaDuzaIloscKomunikatowWBuforze] THEN
	arErrorStan[enumSystemError.ZaDuzaIloscKomunikatowWBuforze] := FALSE;
	sDane := CONCAT('ACT=0;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.ZaDuzaIloscKomunikatowWBuforze));
	sDane := CONCAT(sDane , ';NUM=');
	sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.ZaDuzaIloscKomunikatowWBuforze));	
	sDane := CONCAT(sDane , ';E');
	sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.ZaDuzaIloscKomunikatowWBuforze , intIloscZnakow := 3));
	sDane := CONCAT(sDane , 'ACT=0');
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'E' ,
						sMnemonik :=  sMnemonik,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdSterownika ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := arErrorKomunikat[enumSystemError.ZaDuzaIloscKomunikatowWBuforze]);
END_IF


// obsługa alarmu - blokada wysyłania komunikatów ze względu na za dużą ilość wysyłanych ramek (wysyłanie ramki co 1 minutę)

IF xBlokadaKomunikacji THEN
	arErrorStan[enumSystemError.BlokadaWysylaniaRamek] := TRUE;
	fbBlokadaKomunikacjiTimer(IN := xWyslijErrorBlokadyKomunikacji, PT := T#1M);
	xWyslijErrorBlokadyKomunikacji := TRUE;
	IF fbBlokadaKomunikacjiTimer.Q  THEN														// Wyślij error zaraz co 1 minutę
		xWyslijErrorBlokadyKomunikacji := FALSE;
		intTablicaKomunikatowZnacznikWysylkiUDP := intTablicaKomunikatowZnacznikZapisu;			// Ustaw znacznik wysyłania na aktualnie zapisywanej ramce
		// Sklejenie ramki z komunikatem o błędzie
		sDane := CONCAT('ACT=1;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.BlokadaWysylaniaRamek));
		sDane := CONCAT(sDane , ';NUM=');
		sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.BlokadaWysylaniaRamek));	
		sDane := CONCAT(sDane , ';E');
		sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.BlokadaWysylaniaRamek , intIloscZnakow := 3));
		sDane := CONCAT(sDane , 'ACT=1');
		fnZapiszKomunikat(	sCalyKomunikat := '' ,
							sTypKomunikatu := 'E' ,
							sMnemonik :=  sMnemonik ,
							sMACAdres := sMACAdres ,
							sIDNadawcy := sIdSterownika ,
							sIDOdbiorcy := sIdAplikacji ,
							sDaneZapasowe := sDaneZapasowe ,
							sDane := sDane ,
							arTablicaKomunikatow := arTablicaKomunikatow ,
							intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
							intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
							sWyslanyKomunikat := arErrorKomunikat[enumSystemError.BlokadaWysylaniaRamek]);
		sTransmitterTelegram := arErrorKomunikat[enumSystemError.BlokadaWysylaniaRamek];	
	END_IF
	fbWyslijErrorBlokadyKomunikacji(CLK := xWyslijErrorBlokadyKomunikacji);
	IF fbWyslijErrorBlokadyKomunikacji.Q THEN
		// Wysłanie ramki		
		fnCRC16Wysylanie(	sKomunikat :=  sTransmitterTelegram,
							arTransmitterBuffer := arTransmitterBuffer ,
							udiTransmitterNBytes := udiTransmitterNBytes);				
		udiTransmitterNBytes := INT_TO_UDINT(LEN(sTransmitterTelegram)) + 2;
		fbTransmitter(	sNetName := sAdresIP ,
						wPort := wTransmitterPort , 
						pTxBuffer := pTransmitterBuffer , 
						udiTxNBytes := udiTransmitterNBytes , 
						xClose := xTransmitterClose , 
						xTxTrigger := xTransmitterTrigger);
	END_IF
END_IF
IF  NOT (BlokadaKomunikacjiTriger.Q1) AND arErrorStan[enumSystemError.BlokadaWysylaniaRamek] THEN
	arErrorStan[enumSystemError.BlokadaWysylaniaRamek] := FALSE;
	sDane := CONCAT('ACT=0;CLASS=' , INT_TO_STRING(enumSystemErrorKlasa.BlokadaWysylaniaRamek));
	sDane := CONCAT(sDane , ';NUM=');
	sDane := CONCAT(sDane , INT_TO_STRING(enumSystemError.BlokadaWysylaniaRamek));	
	sDane := CONCAT(sDane , ';E');
	sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := enumSystemError.BlokadaWysylaniaRamek , intIloscZnakow := 3));
	sDane := CONCAT(sDane , 'ACT=0');
	fnZapiszKomunikat(	sCalyKomunikat := '' ,
						sTypKomunikatu := 'E' ,
						sMnemonik :=  sMnemonik,
						sMACAdres := sMACAdres ,
						sIDNadawcy := sIdSterownika ,
						sIDOdbiorcy := sIdAplikacji ,
						sDaneZapasowe := sDaneZapasowe ,
						sDane := sDane ,
						arTablicaKomunikatow := arTablicaKomunikatow ,
						intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
						intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
						sWyslanyKomunikat := arErrorKomunikat[enumSystemError.BlokadaWysylaniaRamek]);
END_IF


//????????
IF intTabelaKomunikatowZnacznikOdczytu &lt;&gt; intTablicaKomunikatowZnacznikZapisu THEN
	fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := intTablicaKomunikatowRozmiar , intWskaznik := intTabelaKomunikatowZnacznikOdczytu);
	IF fnIDOdbiorcyMatch(arTablicaKomunikatow[intTabelaKomunikatowZnacznikOdczytu] , sIDSterownika) THEN
		IF fnKomunikatTyp(arTablicaKomunikatow[intTabelaKomunikatowZnacznikOdczytu]) = 'Q' THEN
//			IF fnKomunikatDaneSzukajZmiennej(arTablicaKomunikatow[intTabelaKomunikatowZnacznikOdczytu] , 'ALARM') OR 
//				fnKomunikatDaneSzukajZmiennej(arTablicaKomunikatow[intTabelaKomunikatowZnacznikOdczytu] , 'ALL') THEN
//				FOR intPetla := 1 TO 20 BY 1 DO
//					IF arErrorKomunikat[intPetla] &lt;&gt; '' THEN
//						fnZapiszKomunikat(	sCalyKomunikat := arErrorKomunikat[intPetla] ,
//											sTypKomunikatu := '' ,
//											sMnemonik := '' ,
//											sMACAdres := '' ,
//											sIDNadawcy := '' ,
//											sIDOdbiorcy := '' ,
//											sDaneZapasowe := '' ,
//											sDane := '' ,
//											arTablicaKomunikatow := arTablicaKomunikatow ,
//											intTablicaKomunikatowZnacznikZapisu := intTablicaKomunikatowZnacznikZapisu ,
//											intTablicaKomunikatowRozmiar := intTablicaKomunikatowRozmiar ,
//											sWyslanyKomunikat := sWyslanyKomunikat);
//					END_IF
//				END_FOR
//			END_IF	
///wrzucic nowy Q
		END_IF
	END_IF
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnAES256Odszyfrowanie" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikatZaszyfrowany">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKlucz">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="intError">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sKomunikat := sKomunikatZaszyfrowany;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnAES256Szyfrowanie" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sKlucz">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="intError">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="sKomunikatZaszyfrowany">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sKomunikatZaszyfrowany := sKomunikat;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnCRC16Obliczanie" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wCRC16_modbus">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="arTransmitterBuffer">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR intPetla := 1 TO LEN(sKomunikat) BY 1 DO
	arTransmitterBuffer[intPetla] := string_to_ASCIIByte(MID(sKomunikat , 1 , intPetla));
END_FOR

fnCRC16Obliczanie := MEM.CRC16_modbus(ADR(arTransmitterBuffer[1]) , INT_TO_UINT(LEN(sKomunikat)));</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnCRC16Odbieranie" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="arReceiverBuffer">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="udiRxNBytes">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="sMACAdresAplikacji">
              <type>
                <string />
              </type>
            </variable>
            <variable name="abMACAdresAplikacji">
              <type>
                <array>
                  <dimension lower="1" upper="6" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="wCRC16_modbus">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arwTelegram">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">wCRC16_modbus := MEM.CRC16_modbus(ADR(arReceiverBuffer[1]) , UDINT_TO_UINT(udiRxNBytes) - 2);
sKomunikat := '';
IF (MEM.LowByte(wCRC16_modbus) = arReceiverBuffer[udiRxNBytes - 1] AND MEM.HighByte(wCRC16_modbus) = arReceiverBuffer[udiRxNBytes]) OR ASCIIByte_to_string(arReceiverBuffer[1]) = 'Z' THEN
	fnCRC16Odbieranie := TRUE;
	FOR intPetla := 1 TO (UDINT_TO_INT(udiRxNBytes) - 2) BY 1 DO
		IF intPetla &gt;= 7 AND intPetla &lt;= 12 AND arReceiverBuffer[7] = abMACAdresAplikacji[1] AND arReceiverBuffer[8] = abMACAdresAplikacji[2] AND arReceiverBuffer[9] = abMACAdresAplikacji[3] AND 
			arReceiverBuffer[10] = abMACAdresAplikacji[4] AND arReceiverBuffer[11] = abMACAdresAplikacji[5] AND arReceiverBuffer[12] = abMACAdresAplikacji[6] THEN
			sKomunikat := CONCAT(sKomunikat , MID(sMACAdresAplikacji, 1 , intPetla - 6));
		ELSE
			sKomunikat := CONCAT(sKomunikat , ASCIIByte_to_string(arReceiverBuffer[intPetla]));
		END_IF
	END_FOR
	ELSE
	fnCRC16Odbieranie := FALSE;	
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnCRC16Walidacja" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="wCRC16Wynik">
              <type>
                <WORD />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="wCRC16_modbus">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arwTelegram">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">wCRC16_modbus := fnCRC16Obliczanie(sKomunikat);

IF wCRC16_modbus = wCRC16Wynik THEN
	fnCRC16Walidacja := TRUE;
	ELSE	
	fnCRC16Walidacja := FALSE;
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnCRC16Wysylanie" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arTransmitterBuffer">
              <type>
                <array>
                  <dimension lower="1" upper="512" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="udiTransmitterNBytes">
              <type>
                <UDINT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="wCRC16_modbus">
              <type>
                <WORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR intPetla := 1 TO LEN(sKomunikat) BY 1 DO
	arTransmitterBuffer[intPetla] := string_to_ASCIIByte(MID(sKomunikat , 1 , intPetla));
END_FOR

wCRC16_modbus := fnCRC16Obliczanie(sKomunikat);

arTransmitterBuffer[LEN(sKomunikat) + 1] := MEM.LowByte(wCRC16_modbus);
arTransmitterBuffer[LEN(sKomunikat) + 2] := MEM.HighByte(wCRC16_modbus);

udiTransmitterNBytes := INT_TO_UDINT(LEN(sKomunikat)) + 2;	

fnCRC16Wysylanie := wCRC16_modbus;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnCzasUTC" pouType="function">
        <interface>
          <returnType>
            <derived name="alSTRINGKomunikat" />
          </returnType>
          <localVars>
            <variable name="sCzasUTC">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">zmienna do przechowywania wyniku - czas w formacie UTC</xhtml>
              </documentation>
            </variable>
            <variable name="dtDataIGodzina">
              <type>
                <DT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">odczyt daty i godziny z systemu</xhtml>
              </documentation>
            </variable>
            <variable name="ltGodzina">
              <type>
                <derived name="LTIME" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">odczyt ms z systemu</xhtml>
              </documentation>
            </variable>
            <variable name="sDataiGodzina">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">odczyt daty i godziny z systemu - konwersja na STRING</xhtml>
              </documentation>
            </variable>
            <variable name="sGodzina">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">odczyt ms z systemu - konwersjan a STRING</xhtml>
              </documentation>
            </variable>
            <variable name="xMsZapisane">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">flaga informująca czy ms zostały już dopisane</xhtml>
              </documentation>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> funkcja bez parametrów zwracająca STRING z bieżącym czasem UTC</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*odczyt czasu z systemu i jego konwersja do STRING*)

dtDataIGodzina := FuGetDateAndTime();
ltGodzina := FuGetLongTime();
sDataiGodzina := DT_TO_STRING(dtDataiGodzina);
sGodzina := LTIME_TO_STRING(ltGodzina);

sCzasUTC := MID(sDataIGodzina , 4 , 4);							(*dodanie roku do wyniku*)
sCzasUTC := CONCAT(sCzasUTC , '-');
sCzasUTC := CONCAT(sCzasUTC , MID(sDataIGodzina , 2 , 9));		(*dodanie miesiąca do wyniku*)
sCzasUTC := CONCAT(sCzasUTC , '-');
sCzasUTC := CONCAT(sCzasUTC , MID(sDataIGodzina , 2 , 12));		(*dodanie dnia do wyniku*)
sCzasUTC := CONCAT(sCzasUTC , 'T');
sCzasUTC := CONCAT(sCzasUTC , MID(sDataIGodzina , 2 , 15));		(*dodanie godziny do wyniku*)
sCzasUTC := CONCAT(sCzasUTC , ':');
sCzasUTC := CONCAT(sCzasUTC , MID(sDataIGodzina , 2 , 18));		(*dodanie minuty do wyniku*)
sCzasUTC := CONCAT(sCzasUTC , ':');
sCzasUTC := CONCAT(sCzasUTC , MID(sDataIGodzina , 2 , 21));		(*dodanie sekundy do wyniku*)
sCzasUTC := CONCAT(sCzasUTC , '.');

(*sprawdzenie czy w danych o czasie są milisekundy*)

IF FIND(sGodzina , 'ms') &lt;&gt; 0 THEN 

	xMsZapisane := FALSE;

(*jeżeli przed wykrytym 'ms' dwa znaki wcześniej nie ma liczby dopisz dwa zera i liczbę jednocyfrową przed 'ms'*)
		
	IF STRING_TO_INT(MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 2)) = 0 AND MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 2) &lt;&gt; '0' AND xMsZapisane = FALSE THEN
		sCzasUTC := CONCAT(sCzasUTC , '00');
		sCzasUTC := CONCAT(sCzasUTC , MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 1));
		xMsZapisane := TRUE;
	END_IF

(*jeżeli przed wykrytym 'ms' trzy znaki wcześniej nie ma liczby dopisz jedno zero i liczbę dwujcyfrową przed 'ms'*)
		
	IF STRING_TO_INT(MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 3)) = 0 AND MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 3) &lt;&gt; '0' AND xMsZapisane = FALSE THEN
		sCzasUTC := CONCAT(sCzasUTC , '0');
		sCzasUTC := CONCAT(sCzasUTC , MID(sGodzina , 2 , FIND(sGodzina , 'ms') - 2));
		xMsZapisane := TRUE;	
	END_IF

(*jeżeli przed wykrytym 'ms' cztery znaki wcześniej nie ma liczby dopisz liczbę trzycyfrową cyfrową przed 'ms'*)

	IF STRING_TO_INT(MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 4)) = 0 AND MID(sGodzina , 1 , FIND(sGodzina , 'ms') - 4) &lt;&gt; '0' AND xMsZapisane = FALSE THEN
		sCzasUTC := CONCAT(sCzasUTC , MID(sGodzina , 3 , FIND(sGodzina , 'ms') - 3));			
	END_IF
		
	ELSE

(*jeżeli nie wykryto 'ms' dopisz trzy zera*)

	sCzasUTC := CONCAT(sCzasUTC , '000');

END_IF

sCzasUTC := CONCAT(sCzasUTC , '+00:00');

fnCzasUTC :=sCzasUTC;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnIDNadawcyMatch" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sIDObiektu">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xMatch">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

FOR intPetla := 1 TO LEN(sIDObiektu) BY 1 DO
	IF (MID(typKomunikat.sIDZrodla , 1 , intPetla) &lt;&gt; MID(sIDObiektu , 1 , intPetla)) AND MID(typKomunikat.sIDZrodla , 1 , intPetla) &lt;&gt; '*' THEN
		xMatch := FALSE;
		EXIT;
	END_IF
END_FOR
fnIDNadawcyMatch := xMatch;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnIDOdbiorcyMatch" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sIDObiektu">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intPetla">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="xMatch">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

FOR intPetla := 1 TO LEN(sIDObiektu) BY 1 DO
	IF (MID(typKomunikat.sIDPrzeznaczenia , 1 , intPetla) &lt;&gt; MID(sIDObiektu,1,intPetla)) AND MID(typKomunikat.sIDPrzeznaczenia , 1 , intPetla) &lt;&gt; '*' THEN
		xMatch := FALSE;
		EXIT;
	END_IF
END_FOR
fnIDOdbiorcyMatch := xMatch;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDane" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);
fnKomunikatDane := typKomunikat.sDane;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneDodaj" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sAtrybut">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sWartosc">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF sDane &lt;&gt; '' THEN
	sDane := CONCAT(sDane , ';');
END_IF
sDane := CONCAT(sDane , sAtrybut);
sDane := CONCAT(sDane , sWartosc);</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneDodaj_xOverFlow" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sAtrybut">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sWartosc">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="xOverFlow">
              <type>
                <BOOL />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="intIloscZnakow">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF sDane &lt;&gt; '' THEN
	sDane := CONCAT(sDane , ';');
END_IF

sDane := CONCAT(sDane , sAtrybut);
sDane := CONCAT(sDane , sWartosc);

intIloscZnakow := len(sDane);
IF intIloscZnakow &gt;= 150 THEN
		xOverFlow := TRUE;
	ELSE
		xOverFlow := FALSE;		
END_IF



</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneDoRaportu_REAL" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="rWartosc">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sAtrybut">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="rWartoscZaraportowana">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF rWartosc &lt;&gt; rWartoscZaraportowana THEN
	rWartoscZaraportowana := rWartosc;
	fnKomunikatDaneDodaj(sDane := sDane , sAtrybut := sAtrybut , sWartosc := REAL_TO_STRING(rWartosc));	
END_IF

</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneError" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="xAktywny">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intKlasa">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intNumer">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF xAktywny THEN
	sDane := CONCAT('ACT=1;CLASS=' , INT_TO_STRING(intKlasa));
	ELSE
	sDane := CONCAT('ACT=0;CLASS=' , INT_TO_STRING(intKlasa));	
END_IF
sDane := CONCAT(sDane , ';NUM=');	
sDane := CONCAT(sDane , INT_TO_STRING(intNumer));
sDane := CONCAT(sDane , ';E');
sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := intNumer , intIloscZnakow := 3));
IF xAktywny THEN
	sDane := CONCAT(sDane, 'ACT=1');
	ELSE
	sDane := CONCAT(sDane, 'ACT=0');
END_IF
fnKomunikatDaneError := sDane;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneErrorRetry" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="xAktywny">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="intKlasa">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intNumer">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* funkcja tylko dla reakcji na Q *)

IF xAktywny THEN
	sDane := CONCAT('RETRY=1;ACT=1;CLASS=' , INT_TO_STRING(intKlasa));
	ELSE
	sDane := CONCAT('RETRY=1;ACT=0;CLASS=' , INT_TO_STRING(intKlasa));	
END_IF
sDane := CONCAT(sDane , ';NUM=');	
sDane := CONCAT(sDane , INT_TO_STRING(intNumer));
sDane := CONCAT(sDane , ';E');
sDane := CONCAT(sDane , fnKonwersjaINT_STRING(intWartosc := intNumer , intIloscZnakow := 3));
IF xAktywny THEN
	sDane := CONCAT(sDane, 'ACT=1');
	ELSE
	sDane := CONCAT(sDane, 'ACT=0');
END_IF
fnKomunikatDaneErrorRetry := sDane;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneSzukajWartosci" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sZmienna">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intPozycja1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intPozycja2">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

fnKomunikatDaneSzukajWartosci := typKomunikat.sDane;

IF FIND(typKomunikat.sDane , sZmienna) &lt;&gt; 0 THEN
	fnKomunikatDaneSzukajWartosci := RIGHT(typKomunikat.sDane , LEN(typKomunikat.sDane) - LEN(sZmienna) - FIND(typKomunikat.sDane , sZmienna) + 1);
	IF FIND(fnKomunikatDaneSzukajWartosci , ';') &lt;&gt; 0 THEN
		fnKomunikatDaneSzukajWartosci := LEFT(fnKomunikatDaneSzukajWartosci , FIND(fnKomunikatDaneSzukajWartosci , ';') - 1);
	END_IF
	ELSE
	fnKomunikatDaneSzukajWartosci := '';
END_IF			</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneSzukajZmiennej" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sZmienna">
              <type>
                <string />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intPozycja1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intPozycja2">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

IF FIND(typKomunikat.sDane , sZmienna) &lt;&gt; 0 THEN
	fnKomunikatDaneSzukajZmiennej := TRUE;
	ELSE
	fnKomunikatDaneSzukajZmiennej := FALSE;
END_IF
				
					
					
					
					
					
					</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatDaneZnajdzPorownajZapisz" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ramka z IZE</xhtml>
              </documentation>
            </variable>
            <variable name="sAtrybut">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Atrybut do wyszukania w ramce</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="rAtrybutWartosc">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość atrybutu w sterowniku</xhtml>
              </documentation>
            </variable>
            <variable name="sDane">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Dane do wysłania w ramce</xhtml>
              </documentation>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="xAtrybutZapisz">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Trigger zapisu wartości atrybutu do urządzenia</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="sAtrybutWartoscRamka">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość atrybutu z ramki</xhtml>
              </documentation>
            </variable>
            <variable name="rAtrybutWartoscRamka">
              <type>
                <REAL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wartość atrybutu z ramki</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Artur Wyszomirski, 2019-06-04 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			
Opis:					Porównanie wartości atrybutu z ramki przychodzącej z IZE z wartością atrybutu zapisaną w sterowniku (urządzeniu). Jeśli wartość jest różna, triggerowana jest zmienna xAtrybutZapisz (zapis wartości do urządzenia).
						W przeciwnym wypadku nazwa atrybutu i jego wartość przpisywane są do sDane (czyli pola danych ramki A, którą sterownik wyśle w odpowiedzi do IZE) 
*)

sAtrybutWartoscRamka := fnKomunikatDaneSzukajWartosci(sKomunikat, sAtrybut);
// Jeśli wartość atrybutu została odnaleziona w ramce.
IF sAtrybutWartoscRamka &lt;&gt; '' THEN
	rAtrybutWartoscRamka := (STRING_TO_REAL(sAtrybutWartoscRamka));
	// Jeśli wartość różni się od dotychczasowej, zapisz ją. W przeciwnym wypadku doklej wartość do ramki A.
	IF rAtrybutWartoscRamka &lt;&gt; rAtrybutWartosc THEN
		rAtrybutWartosc := rAtrybutWartoscRamka;
		xAtrybutZapisz := TRUE;
	ELSE
		IF sDane &lt;&gt; '' THEN
			sDane := CONCAT(sDane , ';');
		END_IF					
		sDane := CONCAT(sDane , sAtrybut);
		sDane := CONCAT(sDane , sAtrybutWartoscRamka);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatIDNadawcy" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

fnKomunikatIDNadawcy := typKomunikat.sIDPrzeznaczenia;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatIDOdbiorcy" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

fnKomunikatIDOdbiorcy := typKomunikat.sIDPrzeznaczenia;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatInOut" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="xStringNaStrukture">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozkaz rozbicia pełnego komunikatu na cząstki</xhtml>
              </documentation>
            </variable>
            <variable name="xStringUpdateZeStruktury">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xStrukturyNaString">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xWyczyscStrukture">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xAktualizujZnacznikCzasu">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rozkaz zaktualizowania znacznika czasu - działa we wszystkich konfiguracjach </xhtml>
              </documentation>
            </variable>
            <variable name="xAktualizujDlugoscDanych">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="sKomunikatTemp">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> funkcja do kompleksowej obróbki komunikatu</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF xWyczyscStrukture AND xStringNaStrukture THEN
	fnKomunikatInOutZeruj(typKomunikat);
END_IF
IF xStrukturyNaString THEN
	sKomunikat := CONCAT(typKomunikat.sZnacznik , typKomunikat.sTypKomunikatu);
	sKomunikat := CONCAT(sKomunikat , typKomunikat.sMnemonikWlasciciela);
	sKomunikat := CONCAT(sKomunikat , typKomunikat.sMnemonikWlascicielaExt);
	sKomunikat := CONCAT(sKomunikat , typKomunikat.sMACAdres);	
	IF typKomunikat.sIDZrodla = '' THEN
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sIDZrodlaLokalizacja);
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sIDZrodlaUrzadzenie);
		typKomunikat.sIDZrodla := CONCAT(typKomunikat.sIDZrodlaLokalizacja , typKomunikat.sIDZrodlaUrzadzenie);
		ELSE
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sIDZrodla);
	END_IF
	IF typKomunikat.sIDPrzeznaczenia = '' THEN	
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sIDPrzeznaczeniaLokalizacja);
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sIDPrzeznaczeniaUrzadzenie);
		typKomunikat.sIDPrzeznaczenia := CONCAT(typKomunikat.sIDPrzeznaczeniaLokalizacja , typKomunikat.sIDPrzeznaczeniaUrzadzenie);
		ELSE
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sIDPrzeznaczenia);		
	END_IF
	IF typKomunikat.sDlugoscPolaDanych = '' OR xAktualizujDlugoscDanych THEN
		sKomunikat := CONCAT(sKomunikat ,  fnKonwersjaINT_STRING(intWartosc := LEN(typKomunikat.sDane) , intIloscZnakow := 3));
		typKomunikat.sDlugoscPolaDanych := fnKonwersjaINT_STRING(intWartosc := LEN(typKomunikat.sDane) , intIloscZnakow := 3);
		ELSE
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sDlugoscPolaDanych);
	END_IF
	IF typKomunikat.sMarkerCzasowy = '' OR xAktualizujZnacznikCzasu THEN
		sKomunikat := CONCAT(sKomunikat , fnCzasUTC());
		typKomunikat.sMarkerCzasowy := fnCzasUTC();
		ELSE		
		sKomunikat := CONCAT(sKomunikat , typKomunikat.sMarkerCzasowy);
	END_IF
	sKomunikat := CONCAT(sKomunikat , typKomunikat.sRezerwa);
	sKomunikat := CONCAT(sKomunikat , typKomunikat.sDane);
END_IF

IF xStringNaStrukture OR xStringUpdateZeStruktury THEN
	IF typKomunikat.sZnacznik &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikat := CONCAT(typKomunikat.sZnacznik , MID(sKomunikat , LEN(sKomunikat) - 1 , 2));
		ELSE
		typKomunikat.sZnacznik := LEFT(sKomunikat , 1);
	END_IF
	IF typKomunikat.sTypKomunikatu &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 1);
		sKomunikat := CONCAT(typKomunikat.sTypKomunikatu , MID(sKomunikat , LEN(sKomunikat) - 2 , 3));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sTypKomunikatu := MID(SKomunikat , 1 , 2);
	END_IF
	IF typKomunikat.sMnemonikWlasciciela &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 2);
		sKomunikat := CONCAT(typKomunikat.sMnemonikWlasciciela , MID(sKomunikat , LEN(sKomunikat) - 5 , 6));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sMnemonikWlasciciela := MID(sKomunikat , 3 , 3);
	END_IF
	IF typKomunikat.sMnemonikWlascicielaExt &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 5);
		sKomunikat := CONCAT(typKomunikat.sMnemonikWlascicielaExt , MID(sKomunikat , LEN(sKomunikat) - 6 , 7));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sMnemonikWlascicielaExt := MID(Skomunikat , 1 , 6);
	END_IF
	IF typKomunikat.sMACAdres &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 6);
		sKomunikat := CONCAT(typKomunikat.sMnemonikWlascicielaExt , MID(sKomunikat , LEN(sKomunikat) - 12 , 13));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sMACAdres := MID(sKomunikat , 6 , 7);
	END_IF
	IF typKomunikat.sIDZrodla &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 12);
		sKomunikat := CONCAT(typKomunikat.sIDZrodla , MID(sKomunikat , LEN(sKomunikat) - 28 , 29));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sIDZrodla := MID(sKomunikat , 16 , 13);
	END_IF
	IF typKomunikat.sIDZrodlaLokalizacja &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 12);
		sKomunikat := CONCAT(typKomunikat.sIDZrodlaLokalizacja , MID(sKomunikat , LEN(sKomunikat) - 24 , 25));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sIDZrodlaLokalizacja := MID(SKomunikat , 12 , 13);
	END_IF
	IF typKomunikat.sIDZrodlaUrzadzenie &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 24);
		sKomunikat := CONCAT(typKomunikat.sIDZrodlaUrzadzenie , MID(sKomunikat , LEN(sKomunikat) - 28 , 29));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sIDZrodlaUrzadzenie := MID(SKomunikat , 4 , 25);		
	END_IF
	IF typKomunikat.sIDPrzeznaczenia &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 28);
		sKomunikat := CONCAT(typKomunikat.sIDPrzeznaczenia , MID(sKomunikat , LEN(sKomunikat) - 44 ,45));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sIDPrzeznaczenia := MID(SKomunikat , 16 , 29);
	END_IF
	IF typKomunikat.sIDPrzeznaczeniaLokalizacja &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 28);
		sKomunikat := CONCAT(typKomunikat.sIDPrzeznaczeniaLokalizacja , MID(sKomunikat , LEN(sKomunikat) - 40 ,41));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sIDPrzeznaczeniaLokalizacja := MID(SKomunikat , 12 , 29);
	END_IF
	IF typKomunikat.sIDPrzeznaczeniaUrzadzenie &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 40);
		sKomunikat := CONCAT(typKomunikat.sIDPrzeznaczeniaUrzadzenie , MID(sKomunikat , LEN(sKomunikat) - 44 ,45));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sIDPrzeznaczeniaUrzadzenie := MID(SKomunikat , 4 , 41);
	END_IF
	IF typKomunikat.sMarkerCzasowy &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		IF xAktualizujZnacznikCzasu THEN
			sKomunikatTemp := LEFT(sKomunikat , 47);
			sKomunikat := CONCAT(fnCzasUTC() , MID(sKomunikat , LEN(sKomunikat) - 76 , 77));			
			sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
			ELSE
			sKomunikatTemp := LEFT(sKomunikat , 47);
			sKomunikat := CONCAT(typKomunikat.sMarkerCzasowy , MID(sKomunikat , LEN(sKomunikat) - 76 , 77));
			sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		END_IF
		ELSE
		typKomunikat.sMarkerCzasowy := MID(SKomunikat , 29 , 48);
	END_IF
	IF typKomunikat.sRezerwa &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 76);
		sKomunikat := CONCAT(typKomunikat.sRezerwa , MID(sKomunikat , LEN(sKomunikat) - 82 , 83));
		sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
		typKomunikat.sRezerwa := MID(SKomunikat , 6 , 77);
	END_IF
	IF typKomunikat.sDane &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		sKomunikatTemp := LEFT(sKomunikat , 82);
		sKomunikat := CONCAT(sKomunikatTemp , typKomunikat.sDane);
		ELSE
		typKomunikat.sDane := RIGHT(sKomunikat ,  LEN(sKomunikat) - 82);
	END_IF
	IF typKomunikat.sDlugoscPolaDanych &lt;&gt; '' AND xStringUpdateZeStruktury THEN
		IF xAktualizujDlugoscDanych THEN
			sKomunikatTemp := LEFT(sKomunikat , 44);
			sKomunikat := CONCAT(fnKonwersjaINT_STRING(intWartosc := LEN(typKomunikat.sDane) , intIloscZnakow := 3) , MID(sKomunikat , LEN(sKomunikat) - 47 , 48));
			sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		ELSE
			sKomunikatTemp := LEFT(sKomunikat , 44);
			sKomunikat := CONCAT(typKomunikat.sDlugoscPolaDanych , MID(sKomunikat , LEN(sKomunikat) - 47 , 48));
			sKomunikat := CONCAT(sKomunikatTemp , sKomunikat);
		END_IF
		ELSE
		typKomunikat.sDlugoscPolaDanych := MID(SKomunikat , 3 , 45);
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatInOutZeruj" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inOutVars>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">typKomunikat.sZnacznik := '';
typKomunikat.sTypKomunikatu := '';
typKomunikat.sMnemonikWlasciciela := '';
typKomunikat.sMnemonikWlascicielaExt := '';
typKomunikat.sMACAdres := '';
typKomunikat.sIDZrodla := '';
typKomunikat.sIDZrodlaLokalizacja := '';
typKomunikat.sIDZrodlaUrzadzenie := '';
typKomunikat.sIDPrzeznaczenia :='' ;
typKomunikat.sIDPrzeznaczeniaLokalizacja := '';
typKomunikat.sIDPrzeznaczeniaUrzadzenie := '';
typKomunikat.sDlugoscPolaDanych := '';
typKomunikat.sMarkerCzasowy := '';
typKomunikat.sRezerwa := '';
typKomunikat.sDane := '';</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatMACAdres" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

fnKomunikatMACAdres := typKomunikat.sMACAdres;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatMACNadpisanie" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="abMACAdres">
              <type>
                <array>
                  <dimension lower="1" upper="6" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatSprawdzTimeStamp" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="dtDataCzasWKomunikacie">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="dtDataCzasAktualny">
              <type>
                <DT />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="sKomunikatDoObrobki">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sString">
              <type>
                <string />
              </type>
            </variable>
            <variable name="uintRok">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintMiesiac">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintDzien">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintGodzina">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintMinuta">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="uintSekunda">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sKomunikatDoObrobki := sKomunikat;

sString := 'DT#'; 
sString := CONCAT(sString, MID(sKomunikatDoObrobki, 10, 48));
sString := CONCAT(sString, '-'); 
sString := CONCAT(sString, MID(sKomunikatDoObrobki, 8, 59)); 
dtDataCzasWKomunikacie := STRING_TO_DT(sString);
dtDataCzasAktualny := FuGetDateAndTime();

fnKomunikatSprawdzTimeStamp := sString;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKomunikatTyp" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKomunikatInOut(	xStringNaStrukture := TRUE ,
					xStringUpdateZeStruktury := FALSE ,
					xStrukturyNaString := FALSE ,
					xWyczyscStrukture := FALSE ,
					xAktualizujZnacznikCzasu := FALSE ,
					xAktualizujDlugoscDanych := FALSE ,
					sKomunikat := sKomunikat ,
					typKomunikat := typKomunikat ,
					intBlad := intBlad);

fnKomunikatTyp := typKomunikat.sTypKomunikatu;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKonwersja2x16naFloat32BySchneider" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="wRejestrMSW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> MSW - Most Significant Word</xhtml>
              </documentation>
            </variable>
            <variable name="wRejestrLSW">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> LSW - Least Significant Word</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="rWartoscFloat32">
              <type>
                <REAL />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="rZnak">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTempMSW">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rTempMSW2">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="wTempMSW">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="wTempMSW2">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="dwTemp">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="lrStala1">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="8388608.0" />
              </initialValue>
            </variable>
            <variable name="lrStala2">
              <type>
                <LREAL />
              </type>
              <initialValue>
                <simpleValue value="4194304.0" />
              </initialValue>
            </variable>
            <variable name="lrTemp">
              <type>
                <LREAL />
              </type>
            </variable>
            <variable name="rFaction">
              <type>
                <REAL />
              </type>
            </variable>
            <variable name="rExponent">
              <type>
                <REAL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2017-11-03-13:45-PK

Opis:					Funkcja do konwersji 2 rejestrów modbusowych na zmienną Float32 by Schneider Electric
*)
wTempMSW := wRejestrMSW / 256; // wyciagniecie 8 starszych bitow
//ustalanie znaku
IF (wTempMSW AND 128) = 128 THEN
	rZnak := -1.0;
	wTempMSW := wTempMSW AND 127; // usuniecie bitu znaku
ELSE
	rZnak := 1.0;
END_IF
wTempMSW2 := wRejestrMSW MOD 256; // wyciagniecie 8 mlodszych bitow
wTempMSW := (wTempMSW * 2) + ((wTempMSW2 AND 128) / 128); //przesuniecie bitowe o 1 w lewo wraz z dodaniem na najmlodsza pozycje najstarszego bitu z młodszych 8 bitow
wTempMSW2 := wTempMSW2 AND 127;// usuniecie najstarszego bitu
rExponent := WORD_TO_REAL(wTempMSW) - 127.0; // wyznaczanie wykladnika
dwTemp := WORD_TO_DWORD(wTempMSW2); //konwersja zmiennej 16-bitowej na 32-bitowa
dwTemp := dwTemp * 65536; //przesuniecie bitowe w lewo o 16 pozycji
dwTemp := dwTemp + WORD_TO_DWORD(wRejestrLSW); // dostawienie na koncu 16 bitow zmiennej LSW
lrTemp := DWORD_TO_LREAL(dwTemp);
//wybieranie ulamka
IF wTempMSW &gt; 0 THEN
	rFaction := LREAL_TO_REAL((lrTemp / lrStala1) + 1.0);
ELSE
	rFaction := LREAL_TO_REAL(lrTemp / lrStala2);
END_IF
//obliczanie wartosci Float32
rWartoscFloat32 := rZnak * rFaction * EXPT(2.0, rExponent);</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKonwersja4x128na512" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikatCzesc1">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="sKomunikatCzesc2">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="sKomunikatCzesc3">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="sKomunikatCzesc4">
              <type>
                <string length="128" />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sKomunikat512">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sKomunikat512 := CONCAT(sKomunikatCzesc1 , sKomunikatCzesc2);
sKomunikat512 := CONCAT(sKomunikat512 , sKomunikatCzesc3);
sKomunikat512 := CONCAT(sKomunikat512 , sKomunikatCzesc4);</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKonwersja512na4x128" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sKomunikat512">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="sKomunikatCzesc1">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="sKomunikatCzesc2">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="sKomunikatCzesc3">
              <type>
                <string length="128" />
              </type>
            </variable>
            <variable name="sKomunikatCzesc4">
              <type>
                <string length="128" />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">sKomunikatCzesc1 := MID(sKomunikat512 , 128 , 1);
sKomunikatCzesc2 := MID(sKomunikat512 , 128 , 129);
sKomunikatCzesc3 := MID(sKomunikat512 , 128 , 513);
sKomunikatCzesc4 := MID(sKomunikat512 , 128 , 385);
fnKonwersja512na4x128 := TRUE;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKonwersjaDEC_BYTE_TO_HEX_STRING" pouType="function">
        <interface>
          <returnType>
            <string length="2" />
          </returnType>
          <inputVars>
            <variable name="bWartoscDEC">
              <type>
                <BYTE />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="sTablicaReprezentacjiHEX">
              <type>
                <array>
                  <dimension lower="0" upper="255" />
                  <baseType>
                    <string length="2" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'00'" />
                  </value>
                  <value>
                    <simpleValue value="'01'" />
                  </value>
                  <value>
                    <simpleValue value="'02'" />
                  </value>
                  <value>
                    <simpleValue value="'03'" />
                  </value>
                  <value>
                    <simpleValue value="'04'" />
                  </value>
                  <value>
                    <simpleValue value="'05'" />
                  </value>
                  <value>
                    <simpleValue value="'06'" />
                  </value>
                  <value>
                    <simpleValue value="'07'" />
                  </value>
                  <value>
                    <simpleValue value="'08'" />
                  </value>
                  <value>
                    <simpleValue value="'09'" />
                  </value>
                  <value>
                    <simpleValue value="'0A'" />
                  </value>
                  <value>
                    <simpleValue value="'0B'" />
                  </value>
                  <value>
                    <simpleValue value="'0C'" />
                  </value>
                  <value>
                    <simpleValue value="'0D'" />
                  </value>
                  <value>
                    <simpleValue value="'0E'" />
                  </value>
                  <value>
                    <simpleValue value="'0F'" />
                  </value>
                  <value>
                    <simpleValue value="'10'" />
                  </value>
                  <value>
                    <simpleValue value="'11'" />
                  </value>
                  <value>
                    <simpleValue value="'12'" />
                  </value>
                  <value>
                    <simpleValue value="'13'" />
                  </value>
                  <value>
                    <simpleValue value="'14'" />
                  </value>
                  <value>
                    <simpleValue value="'15'" />
                  </value>
                  <value>
                    <simpleValue value="'16'" />
                  </value>
                  <value>
                    <simpleValue value="'17'" />
                  </value>
                  <value>
                    <simpleValue value="'18'" />
                  </value>
                  <value>
                    <simpleValue value="'19'" />
                  </value>
                  <value>
                    <simpleValue value="'1A'" />
                  </value>
                  <value>
                    <simpleValue value="'1B'" />
                  </value>
                  <value>
                    <simpleValue value="'1C'" />
                  </value>
                  <value>
                    <simpleValue value="'1D'" />
                  </value>
                  <value>
                    <simpleValue value="'1E'" />
                  </value>
                  <value>
                    <simpleValue value="'1F'" />
                  </value>
                  <value>
                    <simpleValue value="'20'" />
                  </value>
                  <value>
                    <simpleValue value="'21'" />
                  </value>
                  <value>
                    <simpleValue value="'22'" />
                  </value>
                  <value>
                    <simpleValue value="'23'" />
                  </value>
                  <value>
                    <simpleValue value="'24'" />
                  </value>
                  <value>
                    <simpleValue value="'25'" />
                  </value>
                  <value>
                    <simpleValue value="'26'" />
                  </value>
                  <value>
                    <simpleValue value="'27'" />
                  </value>
                  <value>
                    <simpleValue value="'28'" />
                  </value>
                  <value>
                    <simpleValue value="'29'" />
                  </value>
                  <value>
                    <simpleValue value="'2A'" />
                  </value>
                  <value>
                    <simpleValue value="'2B'" />
                  </value>
                  <value>
                    <simpleValue value="'2C'" />
                  </value>
                  <value>
                    <simpleValue value="'2D'" />
                  </value>
                  <value>
                    <simpleValue value="'2E'" />
                  </value>
                  <value>
                    <simpleValue value="'2F'" />
                  </value>
                  <value>
                    <simpleValue value="'30'" />
                  </value>
                  <value>
                    <simpleValue value="'31'" />
                  </value>
                  <value>
                    <simpleValue value="'32'" />
                  </value>
                  <value>
                    <simpleValue value="'33'" />
                  </value>
                  <value>
                    <simpleValue value="'34'" />
                  </value>
                  <value>
                    <simpleValue value="'35'" />
                  </value>
                  <value>
                    <simpleValue value="'36'" />
                  </value>
                  <value>
                    <simpleValue value="'37'" />
                  </value>
                  <value>
                    <simpleValue value="'38'" />
                  </value>
                  <value>
                    <simpleValue value="'39'" />
                  </value>
                  <value>
                    <simpleValue value="'3A'" />
                  </value>
                  <value>
                    <simpleValue value="'3B'" />
                  </value>
                  <value>
                    <simpleValue value="'3C'" />
                  </value>
                  <value>
                    <simpleValue value="'3D'" />
                  </value>
                  <value>
                    <simpleValue value="'3E'" />
                  </value>
                  <value>
                    <simpleValue value="'3F'" />
                  </value>
                  <value>
                    <simpleValue value="'40'" />
                  </value>
                  <value>
                    <simpleValue value="'41'" />
                  </value>
                  <value>
                    <simpleValue value="'42'" />
                  </value>
                  <value>
                    <simpleValue value="'43'" />
                  </value>
                  <value>
                    <simpleValue value="'44'" />
                  </value>
                  <value>
                    <simpleValue value="'45'" />
                  </value>
                  <value>
                    <simpleValue value="'46'" />
                  </value>
                  <value>
                    <simpleValue value="'47'" />
                  </value>
                  <value>
                    <simpleValue value="'48'" />
                  </value>
                  <value>
                    <simpleValue value="'49'" />
                  </value>
                  <value>
                    <simpleValue value="'4A'" />
                  </value>
                  <value>
                    <simpleValue value="'4B'" />
                  </value>
                  <value>
                    <simpleValue value="'4C'" />
                  </value>
                  <value>
                    <simpleValue value="'4D'" />
                  </value>
                  <value>
                    <simpleValue value="'4E'" />
                  </value>
                  <value>
                    <simpleValue value="'4F'" />
                  </value>
                  <value>
                    <simpleValue value="'50'" />
                  </value>
                  <value>
                    <simpleValue value="'51'" />
                  </value>
                  <value>
                    <simpleValue value="'52'" />
                  </value>
                  <value>
                    <simpleValue value="'53'" />
                  </value>
                  <value>
                    <simpleValue value="'54'" />
                  </value>
                  <value>
                    <simpleValue value="'55'" />
                  </value>
                  <value>
                    <simpleValue value="'56'" />
                  </value>
                  <value>
                    <simpleValue value="'57'" />
                  </value>
                  <value>
                    <simpleValue value="'58'" />
                  </value>
                  <value>
                    <simpleValue value="'59'" />
                  </value>
                  <value>
                    <simpleValue value="'5A'" />
                  </value>
                  <value>
                    <simpleValue value="'5B'" />
                  </value>
                  <value>
                    <simpleValue value="'5C'" />
                  </value>
                  <value>
                    <simpleValue value="'5D'" />
                  </value>
                  <value>
                    <simpleValue value="'5E'" />
                  </value>
                  <value>
                    <simpleValue value="'5F'" />
                  </value>
                  <value>
                    <simpleValue value="'60'" />
                  </value>
                  <value>
                    <simpleValue value="'61'" />
                  </value>
                  <value>
                    <simpleValue value="'62'" />
                  </value>
                  <value>
                    <simpleValue value="'63'" />
                  </value>
                  <value>
                    <simpleValue value="'64'" />
                  </value>
                  <value>
                    <simpleValue value="'65'" />
                  </value>
                  <value>
                    <simpleValue value="'66'" />
                  </value>
                  <value>
                    <simpleValue value="'67'" />
                  </value>
                  <value>
                    <simpleValue value="'68'" />
                  </value>
                  <value>
                    <simpleValue value="'69'" />
                  </value>
                  <value>
                    <simpleValue value="'6A'" />
                  </value>
                  <value>
                    <simpleValue value="'6B'" />
                  </value>
                  <value>
                    <simpleValue value="'6C'" />
                  </value>
                  <value>
                    <simpleValue value="'6D'" />
                  </value>
                  <value>
                    <simpleValue value="'6E'" />
                  </value>
                  <value>
                    <simpleValue value="'6F'" />
                  </value>
                  <value>
                    <simpleValue value="'70'" />
                  </value>
                  <value>
                    <simpleValue value="'71'" />
                  </value>
                  <value>
                    <simpleValue value="'72'" />
                  </value>
                  <value>
                    <simpleValue value="'73'" />
                  </value>
                  <value>
                    <simpleValue value="'74'" />
                  </value>
                  <value>
                    <simpleValue value="'75'" />
                  </value>
                  <value>
                    <simpleValue value="'76'" />
                  </value>
                  <value>
                    <simpleValue value="'77'" />
                  </value>
                  <value>
                    <simpleValue value="'78'" />
                  </value>
                  <value>
                    <simpleValue value="'79'" />
                  </value>
                  <value>
                    <simpleValue value="'7A'" />
                  </value>
                  <value>
                    <simpleValue value="'7B'" />
                  </value>
                  <value>
                    <simpleValue value="'7C'" />
                  </value>
                  <value>
                    <simpleValue value="'7D'" />
                  </value>
                  <value>
                    <simpleValue value="'7E'" />
                  </value>
                  <value>
                    <simpleValue value="'7F'" />
                  </value>
                  <value>
                    <simpleValue value="'80'" />
                  </value>
                  <value>
                    <simpleValue value="'81'" />
                  </value>
                  <value>
                    <simpleValue value="'82'" />
                  </value>
                  <value>
                    <simpleValue value="'83'" />
                  </value>
                  <value>
                    <simpleValue value="'84'" />
                  </value>
                  <value>
                    <simpleValue value="'85'" />
                  </value>
                  <value>
                    <simpleValue value="'86'" />
                  </value>
                  <value>
                    <simpleValue value="'87'" />
                  </value>
                  <value>
                    <simpleValue value="'88'" />
                  </value>
                  <value>
                    <simpleValue value="'89'" />
                  </value>
                  <value>
                    <simpleValue value="'8A'" />
                  </value>
                  <value>
                    <simpleValue value="'8B'" />
                  </value>
                  <value>
                    <simpleValue value="'8C'" />
                  </value>
                  <value>
                    <simpleValue value="'8D'" />
                  </value>
                  <value>
                    <simpleValue value="'8E'" />
                  </value>
                  <value>
                    <simpleValue value="'8F'" />
                  </value>
                  <value>
                    <simpleValue value="'90'" />
                  </value>
                  <value>
                    <simpleValue value="'91'" />
                  </value>
                  <value>
                    <simpleValue value="'92'" />
                  </value>
                  <value>
                    <simpleValue value="'93'" />
                  </value>
                  <value>
                    <simpleValue value="'94'" />
                  </value>
                  <value>
                    <simpleValue value="'95'" />
                  </value>
                  <value>
                    <simpleValue value="'96'" />
                  </value>
                  <value>
                    <simpleValue value="'97'" />
                  </value>
                  <value>
                    <simpleValue value="'98'" />
                  </value>
                  <value>
                    <simpleValue value="'99'" />
                  </value>
                  <value>
                    <simpleValue value="'9A'" />
                  </value>
                  <value>
                    <simpleValue value="'9B'" />
                  </value>
                  <value>
                    <simpleValue value="'9C'" />
                  </value>
                  <value>
                    <simpleValue value="'9D'" />
                  </value>
                  <value>
                    <simpleValue value="'9E'" />
                  </value>
                  <value>
                    <simpleValue value="'9F'" />
                  </value>
                  <value>
                    <simpleValue value="'A0'" />
                  </value>
                  <value>
                    <simpleValue value="'A1'" />
                  </value>
                  <value>
                    <simpleValue value="'A2'" />
                  </value>
                  <value>
                    <simpleValue value="'A3'" />
                  </value>
                  <value>
                    <simpleValue value="'A4'" />
                  </value>
                  <value>
                    <simpleValue value="'A5'" />
                  </value>
                  <value>
                    <simpleValue value="'A6'" />
                  </value>
                  <value>
                    <simpleValue value="'A7'" />
                  </value>
                  <value>
                    <simpleValue value="'A8'" />
                  </value>
                  <value>
                    <simpleValue value="'A9'" />
                  </value>
                  <value>
                    <simpleValue value="'AA'" />
                  </value>
                  <value>
                    <simpleValue value="'AB'" />
                  </value>
                  <value>
                    <simpleValue value="'AC'" />
                  </value>
                  <value>
                    <simpleValue value="'AD'" />
                  </value>
                  <value>
                    <simpleValue value="'AE'" />
                  </value>
                  <value>
                    <simpleValue value="'AF'" />
                  </value>
                  <value>
                    <simpleValue value="'B0'" />
                  </value>
                  <value>
                    <simpleValue value="'B1'" />
                  </value>
                  <value>
                    <simpleValue value="'B2'" />
                  </value>
                  <value>
                    <simpleValue value="'B3'" />
                  </value>
                  <value>
                    <simpleValue value="'B4'" />
                  </value>
                  <value>
                    <simpleValue value="'B5'" />
                  </value>
                  <value>
                    <simpleValue value="'B6'" />
                  </value>
                  <value>
                    <simpleValue value="'B7'" />
                  </value>
                  <value>
                    <simpleValue value="'B8'" />
                  </value>
                  <value>
                    <simpleValue value="'B9'" />
                  </value>
                  <value>
                    <simpleValue value="'BA'" />
                  </value>
                  <value>
                    <simpleValue value="'BB'" />
                  </value>
                  <value>
                    <simpleValue value="'BC'" />
                  </value>
                  <value>
                    <simpleValue value="'BD'" />
                  </value>
                  <value>
                    <simpleValue value="'BE'" />
                  </value>
                  <value>
                    <simpleValue value="'BF'" />
                  </value>
                  <value>
                    <simpleValue value="'C0'" />
                  </value>
                  <value>
                    <simpleValue value="'C1'" />
                  </value>
                  <value>
                    <simpleValue value="'C2'" />
                  </value>
                  <value>
                    <simpleValue value="'C3'" />
                  </value>
                  <value>
                    <simpleValue value="'C4'" />
                  </value>
                  <value>
                    <simpleValue value="'C5'" />
                  </value>
                  <value>
                    <simpleValue value="'C6'" />
                  </value>
                  <value>
                    <simpleValue value="'C7'" />
                  </value>
                  <value>
                    <simpleValue value="'C8'" />
                  </value>
                  <value>
                    <simpleValue value="'C9'" />
                  </value>
                  <value>
                    <simpleValue value="'CA'" />
                  </value>
                  <value>
                    <simpleValue value="'CB'" />
                  </value>
                  <value>
                    <simpleValue value="'CC'" />
                  </value>
                  <value>
                    <simpleValue value="'CD'" />
                  </value>
                  <value>
                    <simpleValue value="'CE'" />
                  </value>
                  <value>
                    <simpleValue value="'CF'" />
                  </value>
                  <value>
                    <simpleValue value="'D0'" />
                  </value>
                  <value>
                    <simpleValue value="'D1'" />
                  </value>
                  <value>
                    <simpleValue value="'D2'" />
                  </value>
                  <value>
                    <simpleValue value="'D3'" />
                  </value>
                  <value>
                    <simpleValue value="'D4'" />
                  </value>
                  <value>
                    <simpleValue value="'D5'" />
                  </value>
                  <value>
                    <simpleValue value="'D6'" />
                  </value>
                  <value>
                    <simpleValue value="'D7'" />
                  </value>
                  <value>
                    <simpleValue value="'D8'" />
                  </value>
                  <value>
                    <simpleValue value="'D9'" />
                  </value>
                  <value>
                    <simpleValue value="'DA'" />
                  </value>
                  <value>
                    <simpleValue value="'DB'" />
                  </value>
                  <value>
                    <simpleValue value="'DC'" />
                  </value>
                  <value>
                    <simpleValue value="'DD'" />
                  </value>
                  <value>
                    <simpleValue value="'DE'" />
                  </value>
                  <value>
                    <simpleValue value="'DF'" />
                  </value>
                  <value>
                    <simpleValue value="'E0'" />
                  </value>
                  <value>
                    <simpleValue value="'E1'" />
                  </value>
                  <value>
                    <simpleValue value="'E2'" />
                  </value>
                  <value>
                    <simpleValue value="'E3'" />
                  </value>
                  <value>
                    <simpleValue value="'E4'" />
                  </value>
                  <value>
                    <simpleValue value="'E5'" />
                  </value>
                  <value>
                    <simpleValue value="'E6'" />
                  </value>
                  <value>
                    <simpleValue value="'E7'" />
                  </value>
                  <value>
                    <simpleValue value="'E8'" />
                  </value>
                  <value>
                    <simpleValue value="'E9'" />
                  </value>
                  <value>
                    <simpleValue value="'EA'" />
                  </value>
                  <value>
                    <simpleValue value="'EB'" />
                  </value>
                  <value>
                    <simpleValue value="'EC'" />
                  </value>
                  <value>
                    <simpleValue value="'ED'" />
                  </value>
                  <value>
                    <simpleValue value="'EE'" />
                  </value>
                  <value>
                    <simpleValue value="'EF'" />
                  </value>
                  <value>
                    <simpleValue value="'F0'" />
                  </value>
                  <value>
                    <simpleValue value="'F1'" />
                  </value>
                  <value>
                    <simpleValue value="'F2'" />
                  </value>
                  <value>
                    <simpleValue value="'F3'" />
                  </value>
                  <value>
                    <simpleValue value="'F4'" />
                  </value>
                  <value>
                    <simpleValue value="'F5'" />
                  </value>
                  <value>
                    <simpleValue value="'F6'" />
                  </value>
                  <value>
                    <simpleValue value="'F7'" />
                  </value>
                  <value>
                    <simpleValue value="'F8'" />
                  </value>
                  <value>
                    <simpleValue value="'F9'" />
                  </value>
                  <value>
                    <simpleValue value="'FA'" />
                  </value>
                  <value>
                    <simpleValue value="'FB'" />
                  </value>
                  <value>
                    <simpleValue value="'FC'" />
                  </value>
                  <value>
                    <simpleValue value="'FD'" />
                  </value>
                  <value>
                    <simpleValue value="'FE'" />
                  </value>
                  <value>
                    <simpleValue value="'FF'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-08-24-PK - stworzenie

Opis:					Funkcja zwraca reprezentację szesnastkową w Stringu wartości dziesiętnej podanej jako BYTE;
*)

fnKonwersjaDEC_BYTE_TO_HEX_STRING := sTablicaReprezentacjiHEX[bWartoscDEC];</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKonwersjaHEX_STRING_TO_DEC_BYTE" pouType="function">
        <interface>
          <returnType>
            <BYTE />
          </returnType>
          <inputVars>
            <variable name="sWartoscHEX">
              <type>
                <string length="2" />
              </type>
            </variable>
          </inputVars>
          <localVars constant="true">
            <variable name="sTablicaReprezentacjiHEX">
              <type>
                <array>
                  <dimension lower="0" upper="15" />
                  <baseType>
                    <string length="1" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'0'" />
                  </value>
                  <value>
                    <simpleValue value="'1'" />
                  </value>
                  <value>
                    <simpleValue value="'2'" />
                  </value>
                  <value>
                    <simpleValue value="'3'" />
                  </value>
                  <value>
                    <simpleValue value="'4'" />
                  </value>
                  <value>
                    <simpleValue value="'5'" />
                  </value>
                  <value>
                    <simpleValue value="'6'" />
                  </value>
                  <value>
                    <simpleValue value="'7'" />
                  </value>
                  <value>
                    <simpleValue value="'8'" />
                  </value>
                  <value>
                    <simpleValue value="'9'" />
                  </value>
                  <value>
                    <simpleValue value="'A'" />
                  </value>
                  <value>
                    <simpleValue value="'B'" />
                  </value>
                  <value>
                    <simpleValue value="'C'" />
                  </value>
                  <value>
                    <simpleValue value="'D'" />
                  </value>
                  <value>
                    <simpleValue value="'E'" />
                  </value>
                  <value>
                    <simpleValue value="'F'" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="sPierwszyZnak">
              <type>
                <string length="1" />
              </type>
            </variable>
            <variable name="sDrugiZnak">
              <type>
                <string length="1" />
              </type>
            </variable>
            <variable name="bPetla">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2018-08-24-PK - stworzenie

Opis:					Funkcja zwraca reprezentację dziesiętną jako BYTE wartości szesnastkowej podanej jako STRING;
*)

sPierwszyZnak := LEFT(sWartoscHEX, 1);
FOR bPetla := 0 TO 15 BY 1 DO
	IF sPierwszyZnak = sTablicaReprezentacjiHEX[bPetla] THEN
		fnKonwersjaHEX_STRING_TO_DEC_BYTE := bPetla * 16;
	END_IF
END_FOR
sDrugiZnak := RIGHT(sWartoscHEX, 1);
FOR bPetla := 0 TO 15 BY 1 DO
	IF sDrugiZnak = sTablicaReprezentacjiHEX[bPetla] THEN
		fnKonwersjaHEX_STRING_TO_DEC_BYTE := fnKonwersjaHEX_STRING_TO_DEC_BYTE + bPetla;
	END_IF
END_FOR
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnKonwersjaINT_STRING" pouType="function">
        <interface>
          <returnType>
            <string />
          </returnType>
          <inputVars>
            <variable name="intWartosc">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="intIloscZnakow">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnKonwersjaINT_STRING := INT_TO_STRING(intWartosc);

IF intWartosc &lt; 100000 AND intIloscZnakow &gt; 5 THEN
	fnKonwersjaINT_STRING := CONCAT('0' , fnKonwersjaINT_STRING);
END_IF

IF intWartosc &lt; 10000 AND intIloscZnakow &gt; 4 THEN
	fnKonwersjaINT_STRING := CONCAT('0' , fnKonwersjaINT_STRING);
END_IF

IF intWartosc &lt; 1000 AND intIloscZnakow &gt; 3 THEN
	fnKonwersjaINT_STRING := CONCAT('0' , fnKonwersjaINT_STRING);
END_IF

IF intWartosc &lt; 100 AND intIloscZnakow &gt; 2 THEN
	fnKonwersjaINT_STRING := CONCAT('0' , fnKonwersjaINT_STRING);
END_IF

IF intWartosc &lt; 10 AND intIloscZnakow &gt; 1 THEN
	fnKonwersjaINT_STRING := CONCAT('0' , fnKonwersjaINT_STRING);
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnModbusZapisRejestru" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="bAdresUrzadzenia">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> ID urządzenia SLAVE w sieci MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="bFunkcja">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> kod funkcji użytej w rozkazie MODBUS</xhtml>
              </documentation>
            </variable>
            <variable name="uiAdresRejestru">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> rejestr startowy</xhtml>
              </documentation>
            </variable>
            <variable name="pZmiennaReferencyjna">
              <type>
                <pointer>
                  <baseType>
                    <WORD />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wskaźnik do wartości do zapisu</xhtml>
              </documentation>
            </variable>
            <variable name="wWartoscDoZapisania">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> wartość do zapisania</xhtml>
              </documentation>
            </variable>
            <variable name="intModbusOdczytZapisZadanieRozmiar">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="arModbusOdczytZapisZadanie">
              <type>
                <array>
                  <dimension lower="1" upper="1000" />
                  <baseType>
                    <derived name="typModbusOdczytZapisZadanie" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="intModbusOdczytZapisZadanieZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fnTablicaKomunikatowInkrementacja(intRozmiarTablicy := intModbusOdczytZapisZadanieRozmiar , intWskaznik := intModbusOdczytZapisZadanieZnacznikZapisu);

arModbusOdczytZapisZadanie[intModbusOdczytZapisZadanieZnacznikZapisu].bAdresUrzadzenia := bAdresUrzadzenia;
arModbusOdczytZapisZadanie[intModbusOdczytZapisZadanieZnacznikZapisu].bFunkcja := bFunkcja;
arModbusOdczytZapisZadanie[intModbusOdczytZapisZadanieZnacznikZapisu].uiAdresRejestru := uiAdresRejestru;
arModbusOdczytZapisZadanie[intModbusOdczytZapisZadanieZnacznikZapisu].pZmiennaDoOdczytu := pZmiennaReferencyjna;
arModbusOdczytZapisZadanie[intModbusOdczytZapisZadanieZnacznikZapisu].wWartoscDoZapisania := wWartoscDoZapisania;</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD" pouType="function">
        <interface>
          <returnType>
            <WORD />
          </returnType>
          <inputVars>
            <variable name="rTemperaturaKelviny">
              <type>
                <REAL />
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Artur Wyszomirski, 2019-05-27 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			 
					
Opis:					Funkcja odwraca bity temperatury, jeśli tempratura jest mniejsza ujemna w skali Celsjusza. Wartość wejściowa w REAL, wartość wyjściowa w WORD.
*)
IF rTemperaturaKelviny &lt; 273.15 THEN	// Jeśli temperatura jest ujemna, odwróć bity
	fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD := REAL_TO_WORD(65535 - (ABS(rTemperaturaKelviny - 273.15) * 10));	
ELSE
	fnOdwrocenieBitowTemperaturyUjemnejREAL_TO_WORD := REAL_TO_WORD((rTemperaturaKelviny - 273.15) * 10);						
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnRozbicieNaBityRejestru16Bit" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="wRejestr16Bit">
              <type>
                <WORD />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="xBit0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit8">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit9">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit10">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit11">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit12">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit13">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit14">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit15">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="wTempRejestr16">
              <type>
                <WORD />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2017-11-17-10:00-PK

Opis:					Funkcja do rozbijania rejestru 16-bitowego typu WORD na pojedyncze zmienne BOOL,
						Nalezy pamietac, ze numeracja bitow jest zgodna z odpowiadajacymi wykladnikami potegi liczby 2
*)
wTempRejestr16 := wRejestr16Bit;
//sprawdzanie stanu bitow
IF wTempRejestr16 &gt;= 32768 THEN
	xBit15 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 32768;
ELSE
	xBit15 := FALSE;	
END_IF
IF wTempRejestr16 &gt;= 16384 THEN
	xBit14 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 16384;
ELSE
	xBit14 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 8192 THEN
	xBit13 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 8192;
ELSE
	xBit13 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 4096 THEN
	xBit12 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 4096;
ELSE
	xBit12 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 2048 THEN
	xBit11 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 2048;
ELSE
	xBit11 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 1024 THEN
	xBit10 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 1024;
ELSE
	xBit10 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 512 THEN
	xBit9 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 512;
ELSE
	xBit9 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 256 THEN
	xBit8 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 256;
ELSE
	xBit8 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 128 THEN
	xBit7 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 128;
ELSE
	xBit7 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 64 THEN
	xBit6 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 64;
ELSE
	xBit6 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 32 THEN
	xBit5 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 32;
ELSE
	xBit5 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 16 THEN
	xBit4 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 16;
ELSE
	xBit4 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 8 THEN
	xBit3 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 8;
ELSE
	xBit3 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 4 THEN
	xBit2 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 4;
ELSE
	xBit2 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 2 THEN
	xBit1 := TRUE;
	wTempRejestr16 := wTempRejestr16 MOD 2;
ELSE
	xBit1 := FALSE;
END_IF
IF wTempRejestr16 &gt;= 1 THEN
	xBit0 := TRUE;
ELSE
	xBit0 := FALSE;
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnTablicaKomunikatowInkrementacja" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="intRozmiarTablicy">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="intWskaznik">
              <type>
                <INT />
              </type>
            </variable>
          </inOutVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">intWskaznik := 	intWskaznik + 1; 
IF intWskaznik &gt; intRozmiarTablicy THEN
	intWskaznik := 1;
END_IF
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnZapiszKomunikat" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="sCalyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="sTypKomunikatu">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sMnemonik">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sMACAdres">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIdNadawcy">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIdOdbiorcy">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sDaneZapasowe">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sDane">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intTablicaKomunikatowRozmiar">
              <type>
                <INT />
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="intTablicaKomunikatowZnacznikZapisu">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="arTablicaKomunikatow">
              <type>
                <derived name="alARRAYTablicaKomunikatow" />
              </type>
            </variable>
            <variable name="sWyslanyKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="sKomunikat">
              <type>
                <derived name="alSTRINGKomunikat" />
              </type>
            </variable>
            <variable name="intBlad">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="typKomunikat">
              <type>
                <derived name="typKomunikat" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* blok do zapisu nowego komunikatu w buforze do wysłania*)

IF sCalyKomunikat = '' THEN
	typKomunikat.sZnacznik := 'ˆ';
	typKomunikat.sTypKomunikatu := sTypKomunikatu;
	typKomunikat.sMnemonikWlasciciela := LEFT(sMnemonik , 3);
	typKomunikat.sMnemonikWlascicielaExt := Right(sMnemonik , 1);
	typKomunikat.sMACAdres := sMACAdres;
	typKomunikat.sIDZrodla := sIdNadawcy;
	typKomunikat.sIDPrzeznaczenia := sIdOdbiorcy;
	typKomunikat.sRezerwa := sDaneZapasowe;
	typKomunikat.sDane := sDane;
	fnKomunikatInOut(	xStringNaStrukture := FALSE ,
						xStringUpdateZeStruktury := FALSE ,
						xStrukturyNaString := TRUE ,
						xWyczyscStrukture := FALSE ,
						xAktualizujZnacznikCzasu := TRUE ,
						xAktualizujDlugoscDanych := TRUE ,
						sKomunikat := sKomunikat ,
						typKomunikat := typKomunikat ,
						intBlad := intBlad);
	ELSE
	sKomunikat := sCalyKomunikat;
END_IF
fnTablicaKomunikatowInkrementacja(intWskaznik := intTablicaKomunikatowZnacznikZapisu , intRozmiarTablicy := intTablicaKomunikatowRozmiar);
arTablicaKomunikatow[intTablicaKomunikatowZnacznikZapisu] := sKomunikat;
sWyslanyKomunikat := sKomunikat;
</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
      <pou name="fnZlozenieBitowWRejestr16Bit" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="xBit0">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit1">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit4">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit5">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit6">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit7">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit8">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit9">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit10">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit11">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit12">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit13">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit14">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xBit15">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="wRejestr16Bit">
              <type>
                <WORD />
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*			
Autor:					Paweł Kąkol, 
Prawa majątkowe: 		Solwena Sp. z o.o., 
Aktualizacje:			2017-12-13-09:30-PK - stworzenie

Opis:					Funkcja do składania rejestru 16-bitowego typu WORD z pojedynczych zmiennych BOOL,
						Nalezy pamietac, ze numeracja bitow jest zgodna z odpowiadajacymi wykladnikami potegi liczby 2
*)
wRejestr16Bit := 0;
//sprawdzanie stanu bitow
IF xBit0 THEN
	wRejestr16Bit := 1;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 2;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 4;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 8;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 16;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 32;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 64;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 128;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 256;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 512;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 1024;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 2048;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 4096;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 8192;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 16384;	
END_IF
IF xBit1 THEN
	wRejestr16Bit := wRejestr16Bit + 32768;	
END_IF</xhtml>
          </ST>
        </body>
        <addData />
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="#CAA Types" Namespace="CAA" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA Types Extern, * (CAA Technical Workgroup)" />
        <Library Name="#Standard" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Standard, * (System)" />
        <Library Name="WagoAppTime, 1.7.2.3 (WAGO)" Namespace="WagoAppTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="CAA Memory, 3.5.7.0 (CAA Technical Workgroup)" Namespace="MEM" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="WagoSysString, 1.6.0.0 (WAGO)" Namespace="WagoSysString" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="WagoTypesCom_Internal, 1.1.0.3 (WAGO)" Namespace="WagoTypesCom_Internal" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="CAA Storage, 3.5.9.0 (CAA Technical Workgroup)" Namespace="STO" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="VisuSymbols, 3.5.8.0 (System)" Namespace="VisuSymbols" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="WagoAppSerial_ebmBus, 1.6.0.1 (WAGO)" Namespace="WagoAppSerial_ebmBus" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
          <Parameters>
            <Parameter Name="EBM_MAX_DATA" Value="2" />
            <Parameter Name="EBM_MAX_JOBS" Value="3" />
          </Parameters>
        </Library>
        <Library Name="WagoAppSocket, 1.7.5.0 (WAGO)" Namespace="WagoAppSocket" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
          <Parameters>
            <Parameter Name="UIBACKLOGDEFAULT" Value="5" />
            <Parameter Name="TMULTICONNECT_TIMEOUT" Value="TIME#0ms" />
            <Parameter Name="UIMULTICONNECT_NINSTANCELISTSIZE" Value="20" />
          </Parameters>
        </Library>
        <Library Name="WagoAppPlcModbus, 1.0.1.8 (WAGO)" Namespace="WagoAppPlcModbus" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="IoDrvEthernet, 3.5.9.20 (3S - Smart Software Solutions GmbH)" Namespace="IoDrvEthernet" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
          <Parameters>
            <Parameter Name="TASK_PRIORITY" Value="15" />
          </Parameters>
        </Library>
        <Library Name="WagoAppBuildingHVAC, 1.0.1.0 (WAGO)" Namespace="WagoAppBuildingHVAC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
          <Parameters>
            <Parameter Name="REFERENCE_OUTSIDE_TEMPERATURE" Value="-20.0" />
          </Parameters>
        </Library>
        <Library Name="WagoVisuIcons, 1.0.0.7 (WAGO)" Namespace="WagoVisuIcons" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="CAA Net Base Services, 3.5.9.50 (CAA Technical Workgroup)" Namespace="NBS" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
          <Parameters>
            <Parameter Name="GC_UDITASKOPENERPRIORITY" Value="240" />
            <Parameter Name="GC_UDITASKRWPRIORITY" Value="240" />
          </Parameters>
        </Library>
        <Library Name="WagoAppMath, 1.1.0.0 (WAGO)" Namespace="WagoAppMath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="FloatingPointUtils, 3.5.9.0 (System)" Namespace="FPU" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="Plc Services, 3.5.8.0 (System)" Namespace="Plc_Services" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="#WagoTypesCom" Namespace="WagoTypesCom" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoTypesCom, * (WAGO)" />
        <Library Name="#WagoSysFileDir" Namespace="WagoSysFileDir" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoSysFileDir, * (WAGO)" />
        <Library Name="#WagoAppBuilding" Namespace="WagoAppBuilding" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="WagoAppBuilding, * (WAGO)">
          <Parameters>
            <Parameter Name="MAX_LIGHT_GROUP" Value="5" />
            <Parameter Name="MAX_SLAT_POSITION" Value="7" />
            <Parameter Name="MAX_WIND_SECTOR" Value="11" />
            <Parameter Name="MAX_LIGHT_SEGMENT" Value="24" />
            <Parameter Name="MAX_SUNSHADE_SEGMENT" Value="24" />
            <Parameter Name="DELAY_TIME_HEATING_SUPPORT" Value="TIME#60m0s0ms" />
            <Parameter Name="DELAY_TIME_COOLING_SUPPORT" Value="TIME#60m0s0ms" />
            <Parameter Name="S_OFFSET_MOVETIME" Value="TIME#5s0ms" />
            <Parameter Name="S_MIN_MOVETIME_LAMELLA" Value="TIME#30ms" />
            <Parameter Name="S_MIN_MOVETIME_BLIND" Value="TIME#2s0ms" />
            <Parameter Name="CLC_KP" Value="0.002" />
            <Parameter Name="CLC_TN_GREATER_VARIANCE" Value="500" />
            <Parameter Name="CLC_TN_SMALLER_VARIANCE" Value="800" />
            <Parameter Name="CLC_ON_DELAY_CONTROLLER" Value="TIME#2s0ms" />
            <Parameter Name="RWINDHYSTTIMEOUT" Value="0.05" />
            <Parameter Name="MAXDIMCYCLEBUFFER" Value="1000" />
            <Parameter Name="MAXDIMUPAFTERON" Value="100" />
          </Parameters>
        </Library>
        <Library Name="#System_VisuElems" Namespace="VisuElems" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElems, 3.5.11.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemMeter" Namespace="VisuElemMeter" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemMeter, 3.5.10.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsSpecialControls" Namespace="VisuElemsSpecialControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsSpecialControls, 3.5.11.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsWinControls" Namespace="VisuElemsWinControls" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsWinControls, 3.5.11.20 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTextEditor" Namespace="VisuElemTextEditor" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTextEditor, 3.5.11.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemTrace" Namespace="VisuElemTrace" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemTrace, 3.5.11.20 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuNativeControl" Namespace="VisuNativeControl" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuNativeControl, 3.5.11.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemsAlarm" Namespace="VisuElemsAlarm" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsAlarm, 3.5.11.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#System_VisuElemCamDisplayer" Namespace="VisuElemCamDisplayer" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemCamDisplayer, 3.5.10.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae">
          <Parameters>
            <Parameter Name="GC_POINTS_PER_CAM" Value="100" />
          </Parameters>
        </Library>
        <Library Name="#System_VisuElem3DPath" Namespace="VisuElem3DPath" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElem3DPath, 3.5.10.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae">
          <Parameters>
            <Parameter Name="GC_POINTS_PER_POLYGON" Value="100" />
          </Parameters>
        </Library>
        <Library Name="#System_VisuElemsDateTime" Namespace="VisuElemsDateTime" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="VisuElemsDateTime, 3.5.11.0 (System)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <Library Name="#system_visuinputs" Namespace="visuinputs" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="visuinputs, 3.5.10.0 (system)" ResolverGuid="2717eb6a-dd07-4c66-8d8d-cacebd7b18ae" />
        <addData />
      </Libraries>
    </data>
  </addData>
</project>